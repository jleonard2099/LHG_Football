'----------------------------------------
'          SCHEDULE Subroutine
'----------------------------------------
'This subroutine gives the user several
'options for interfacing with the Scheduler
'and also user boxscores generated by
'auto-played games
Sub SCHEDULE ()

    Dim scheduleFile$
    ReDim menuChoices$(1 To 8)

    Shared NS%

    Shared scheduleAP%(), scheduleNG%()

    _Title "3-in-1 Football - Scheduler"

    '--- Pay close attention to this and consider the "why"
    '--- I think this is setting defaults - much like we want to do!
    scheduleNG%(0, 8) = 0
    scheduleNG%(0, 3) = 1
    scheduleNG%(0, 7) = 0
    scheduleNG%(0, 2) = 1

    For I = 1 To 1500
        scheduleNG%(I, 13) = 0
    Next

    Do

        Color 7, 0
        Cls

        Call TITLE_SCHEDULER

        menuChoices$(1) = "ENTER A NEW SCHEDULE                            "
        menuChoices$(2) = "RETRIEVE / EDIT / PLAY AN EXISTING SCHEDULE     "
        menuChoices$(3) = "EXTRACT ONE TEAM'S SCHEDULE FROM LEAGUE SCHEDULE"
        menuChoices$(4) = "EXTRACT A CONFERENCE SCHEDULE FROM MAIN SCHEDULE"
        menuChoices$(5) = "CHANGE THE MODE OF PLAY FOR A TEAM IN A SCHEDULE"
        menuChoices$(6) = "MAKE GLOBAL CHANGES TO A SCHEDULE               "
        menuChoices$(7) = "BOXSCORE MAINTENANCE / SAVE BOXSCORE PARAMETERS "
        menuChoices$(8) = "EXIT AUTO SCHEDULER TO 3 IN 1 MENU              "
        Selection% = 1
        Count% = 8
        Start% = 1
        ExitCode% = 8
        FileFGColor% = 15: FileBGColor% = 1
        HiLiteFGColor% = 0: HiLiteBGColor% = 7
        Spacing% = 1
        Row% = 8
        menuWidth% = Len(menuChoices$(1))
        Column% = (80 - menuWidth% - 2) / 2

        Call box0(Row% - 1, Column% - 1, Row% + Count%, Column% + menuWidth%, 2, FileFGColor%, FileBGColor%)

        _MouseShow "DEFAULT"
        MMenuVert menuChoices$(), Selection%, Start%, ExitCode%, FileFGColor%, FileBGColor%, HiLiteFGColor%, HiLiteBGColor%, Count%, Row%, Column%
        _MouseHide

        Color , 0

        If ExitCode% <> 27 Then

            Select Case Selection%

                Case 1:
                    'number of games in schedule
                    scheduleAP%(0) = 0
                    NS% = 0

                    Do
                        'Get name of new schedule
                        Color 15, 0
                        Cls

                        Call MenuBox(6, 8, 61, 8, 15, 1)

                        Locate 7, 32

                        Locate , 12: Print "ENTER NAME FOR SCHEDULE: "
                        Print
                        Locate , 12: Print "THE NAME SHOULD HAVE NO PERIODS OR SPECIAL CHARACTERS"
                        Locate , 12: Print "DO NOT ADD A FILE EXTENSION; THE PROGRAM"
                        Locate , 12: Print "WILL AUTOMATICALLY ADD .SCD"
                        Locate , 12: Print "SAMPLE NAMES ARE ARIZONA, LSU-68, IU76, ETC."

                        Locate 7, 37: Input scheduleFile$

                        If scheduleFile$ <> "" Then

                            Do
                                Locate 14, 12
                                Print "ANY CHANGE? (Y/N) "
                                I$ = GetKeyPress$
                            Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

                        End If

                    Loop Until UCase$(I$) = "N" And scheduleFile$ <> ""

                    Color 15, 0

                    Call NewSchedule(scheduleFile$)

                Case 2 To 6:
                    'Have the user pick a schedule
                    scheduleFile$ = ChooseFile$(diskPaths$(0) + "*.SCD", "SCHEDULE", FileExit%)

                    If FileExit% <> 27 And FileExit% <> 0 Then

                        Call LoadScheduleInfo(scheduleFile$)

                        Cls

                        'Extract / Change / Global
                        If Selection% >= 3 And Selection% <= 6 Then
                            Call ExtractSchedule(Selection%, scheduleFile$)
                            If action% >= 4 Then Call SaveScheduleFile(scheduleFile$)
                        Else
                            'Retrieve / Edit / Play Schedule
                            Color 15, 0
                            Call NewSchedule(scheduleFile$)
                        End If

                    End If

                Case 7:
                    Call BoxscoreMaintenance

                Case 8:
                    Cls

            End Select

        End If

    Loop Until Selection% = 8 Or ExitCode% = 27

End Sub


'----------------------------------------
'       NewSchedule SubRoutine
'----------------------------------------
'This subroutine facilitates the user
'creation of a schedule. It provides all
'options required and displays the schedule
'while editing
Sub NewSchedule (scheduleFile$)

    Shared BS%, NS%
    Shared N$

    Shared homeScores(), visitorScores()
    Shared scheduleAP%(), scheduleNG%()
    Shared scheduleH$(), scheduleV$()
    Shared scheduleQB_V$(), scheduleQB_H$()
    Shared scheduleYN$()

    Shared modeAbbrev$()
    Shared qbName$()

    qbName$(4) = "RANDOM"

    modeAbbrev$(0) = "HH"
    modeAbbrev$(1) = "C1"
    modeAbbrev$(2) = "C2"
    modeAbbrev$(3) = "CC"

    scheduleYN$(0, 0) = ""
    scheduleYN$(0, 1) = ""

    Do

        Cls

        Locate 23, 1
        Color , 1: Print Tab(80);
        Locate 23, 1
        Color 13: Print "HF";
        Color 14: Print "-HOME FIELD ADV  ";
        Color 13: Print "MA";
        Color 14: Print "-MODE OF PLAY  ";
        Color 11: Print " G";
        Color 14: Print "-GOTO GAME";
        Color 11: Print " B";
        Color 14: Print "-BOXSCORE OPTIONS"

        Locate 24, 1
        Color , 1: Print Tab(80);
        Locate 24, 1
        Color 11: Print "C";
        Color 14: Print "-SAVE AND CONTINUE  ";
        Color 11: Print "A";
        Color 14: Print "-ADD A GAME  ";
        Color 11: Print "D";
        Color 14: Print "-DELETE A GAME  ";
        Color 11: Print "E";
        Color 14: Print "-EDIT A GAME  ";
        Color 11: Print "PGUP  PGDN";

        Locate 25, 1
        Color , 1: Print Tab(80);
        Locate 25, 1
        Color 11: Print "S";
        Color 14: Print "-SORT GAMES  ";
        Color 11: Print "P";
        Color 14: Print "-PLAY GAMES   ";
        Color 11: Print "X";
        Color 14: Print "-SAVE AND EXIT  ";
        Color 11: Print "Q";
        Color 14: Print "-QUIT  ";
        Color 11: Print "R";
        Color 14: Print "-RESET SCORES";

        Locate 1, 1: Print Tab(80);
        Locate 1, 1: Print scheduleFile$
        Locate 1, 33

        Color 14: Print "AUTO SCHEDULER"

        Color 15, 0

        Locate 2, 1
        Color 14
        Print "GAME  DATE      TIME    VISITING TEAM        HOME TEAM            MA  HF"
        Color 15

        'Show 20 schedule entries on the screen at once
        For X = 1 To 20

            Locate X + 2, 1

            If X + NS% * 20 <= scheduleAP%(0) Then

                T1 = scheduleNG%(X + NS% * 20, 0)
                YN$ = scheduleYN$(X + NS% * 20, 0)
                Call ReadTeam(YN$, N$, T1)
                scheduleV$(X) = N$
                scheduleQB_V$(X) = qbName$(scheduleNG%(X + NS% * 20, 5))

                T1 = scheduleNG%(X + NS% * 20, 1)
                YN$ = scheduleYN$(X + NS% * 20, 1)
                Call ReadTeam(YN$, N$, T1)
                scheduleH$(X) = N$
                scheduleQB_H$(X) = qbName$(scheduleNG%(X + NS% * 20, 8))

                'Game number
                Print Using "####  "; X + NS% * 20;

                'Date
                Print Using "##/##/##"; scheduleNG%(X + NS% * 20, 17); scheduleNG%(X + NS% * 20, 16); scheduleNG%(X + NS% * 20, 18);

                'Time
                Locate , 17
                I$ = "A"
                HR% = scheduleNG%(X + NS% * 20, 15) / 100
                MIN% = scheduleNG%(X + NS% * 20, 15) - HR% * 100

                If HR% = 12 Then I$ = "P"
                If HR% > 12 Then HR% = HR% - 12: I$ = "P"

                TM$ = Right$(Str$(HR%), 2) + ":"

                If MIN% < 10 Then TM$ = TM$ + "0" + Right$(Str$(MIN%), 1)
                If MIN% >= 10 Then TM$ = TM$ + Right$(Str$(MIN%), 2)

                'Time
                TM$ = TM$ + I$
                Print TM$;

                'Visiting Team
                Locate , 25: Print scheduleV$(X); " ";
                If scheduleNG%(X + NS% * 20, 13) = 1 Then Print Using "###"; visitorScores(X + NS% * 20);

                'Home Team
                Locate , 46: Print scheduleH$(X); " ";
                If scheduleNG%(X + NS% * 20, 13) = 1 Then Print Using "###"; homeScores(X + NS% * 20);

                'Mode of Play
                Locate , 67: Print modeAbbrev$(scheduleNG%(X + NS% * 20, 10));

                'Home Field
                Locate , 72: If scheduleNG%(X + NS% * 20, 2) = 1 Then Print "Y" Else Print "N"
            End If

        Next

        I$ = GetKeyPress$

        Select Case UCase$(I$)

            Case "A":
                ' *** ADD A GAME TO THE SCHEDULE ***
                V$ = ""
                H$ = ""
                QV$ = ""
                QH$ = ""

                'number of games in schedule
                scheduleAP%(0) = scheduleAP%(0) + 1
                targetGame% = scheduleAP%(0)

                BS% = Int((targetGame% - 1) / 20)
                If NS% < BS% Then NS% = BS%

                For X = 0 To 20
                    If X <> 13 Then
                        scheduleNG%(targetGame%, X) = scheduleNG%(targetGame% - 1, X)
                    End If
                Next

                For X = 0 To 1:
                    scheduleYN$(targetGame%, X) = scheduleYN$(targetGame% - 1, X)
                Next

                DT$ = "09-01-23"
                TM$ = "07:30P"
                Call NewGame(V$, QV$, H$, QH$, YN$, DT$, TM$, NTMS, targetGame%)

            Case "E":
                Call EditGame(DT$, TM$)

            Case "B":
                Do
                    Locate 23, 1: Print "ENTER GAME # TO GO TO        "
                    Locate 23, 1: Input "ENTER GAME # TO GO TO "; targetGame%
                Loop Until targetGame% >= 1 And targetGame% <= scheduleAP%(0)
                NS% = Int((targetGame% - 1) / 20)

                boxName$ = diskPaths$(1) + scheduleFile$ + "_GAME" + Mid$(Str$(targetGame%), 2, Len(Str$(targetGame%))) + ".BS"
                'boxName$ = diskPaths$(1) + "BOX" + Mid$(Str$(targetGame%), 2, Len(Str$(targetGame%)))

                Call EditBoxscore(boxName$)
                Color 15, 0

            Case "D":
                ' *** DELETE A GAME FROM THE SCHEDULE ***
                Do
                    Locate 24, 1: Input "ENTER GAME # TO DELETE "; targetGame%
                Loop Until targetGame% >= 1 And targetGame% <= scheduleAP%(0)

                For X = targetGame% To scheduleAP%(0) - 1
                    For X1 = 0 To 20
                        scheduleNG%(X, X1) = scheduleNG%(X + 1, X1)
                    Next

                    visitorScores(X) = visitorScores(X + 1)
                    homeScores(X) = homeScores(X + 1)

                    For X1 = 0 To 1
                        scheduleYN$(X, X1) = scheduleYN$(X + 1, X1)
                    Next
                Next

                scheduleAP%(0) = scheduleAP%(0) - 1
                BS% = Int((scheduleAP%(0) - 1) / 20)
                If NS% > BS% Then NS% = BS%

            Case "G":
                'GOTO A SPECIFIC PAGE
                Do
                    Locate 23, 1: Print "ENTER GAME # TO GO TO        "
                    Locate 23, 1: Input "ENTER GAME # TO GO TO "; targetGame%
                Loop Until targetGame% >= 1 And targetGame% <= scheduleAP%(0)

                NS% = Int((targetGame% - 1) / 20)

            Case "S":
                Call SortSchedule

            Case "C", "X":
                Call SaveScheduleFile(scheduleFile$)

            Case "Q", Chr$(27): '

            Case "P":
                Call SaveScheduleFile(scheduleFile$)

                ' *** PLAY GAMES ***
                Color , 0
                Cls

                Call MenuBox(6, 8, 61, 8, 15, 4)

                Do

                    Locate 8, 12: Print "TOTAL GAMES ="; scheduleAP%(0)
                    Locate 9, 12: Print "SELECT GAME # TO START AND END WITH": Print
                    Locate 10, 12: Input "ENTER START GAME #: "; SG%: Print
                    Locate 11, 12: Input "ENTER END GAME #:"; EG%: Print

                    Do
                        Locate 13, 12: Print "ANY CHANGE? (Y/N)"
                        I$ = GetKeyPress$
                    Loop Until UCase$(I$) = "N" Or UCase$(I$) = "Y"

                Loop Until UCase$(I$) = "N"

                If SG% <= 0 Then SG% = 1
                If EG% > scheduleAP%(0) Then EG% = scheduleAP%(0)

                Open "GAME82" For Output As #1

                Print #1, scheduleFile$ + ".SCD"
                Print #1, SG% 'Start Game
                Print #1, EG% 'End Game
                Print #1, 0

                Close #1

                For I = 1 To scheduleAP%(0)
                    HR% = Int(scheduleNG%(I, 15) / 100)
                    MIN% = scheduleNG%(I, 15) - HR% * 100
                    TM% = HR% * 60 + MIN%
                    scheduleNG%(I, 12) = Int(TM% / 30) - 18
                Next

                Open "TICKER" For Output As #2

                For I = 1 To 32:
                    For I1 = 0 To 1:
                        For I2 = 1 To 14
                            Print #2, -1
                        Next
                    Next
                Next

                For I = 1 To 32:
                    For I1 = 0 To 1:
                        Print #2, "XXX"
                    Next
                Next

                For I = SG% To SG% + 31
                    Print #2, scheduleNG%(I, 12)
                Next

                Close #2

                Call FOOTBALL

                Call LoadScheduleInfo(scheduleFile$)

            Case "R":
                ' *** RESET GAMES ***
                For I = 1 To scheduleAP%(0)
                    scheduleNG%(I, 13) = 0
                Next

            Case Chr$(0) + Chr$(81), Chr$(0) + Chr$(73)
                ' *** PAGE DOWN | RIGHT ARROW ***
                If NS% >= BS% Then
                    NS% = BS%
                Else
                    NS% = NS% + 1
                End If

            Case Chr$(0) + Chr$(73), Chr$(0) + Chr$(75)
                ' *** PAGE UP | LEFT ARROW ***
                If NS% <> 0 Then
                    NS% = NS% - 1
                End If

        End Select

    Loop Until UCase$(I$) = "Q" Or UCase$(I$) = "X"

End Sub


'----------------------------------------
'          EditGame SubRoutine
'----------------------------------------
'This subroutine gives the user an inter-
'face for choosing games to edit, then
'calls the NewGame routine to essentially
'display the existing parameters and allow
'them to be modified
Sub EditGame (DT$, TM$)

    Shared scheduleAP%()
    Shared scheduleH$(), scheduleV$()
    Shared scheduleQB_H$(), scheduleQB_V$()
    Shared scheduleYN$()
    Shared scheduleNG%()

    ' *** EDIT A GAME ***
    Do
        Locate 23, 1: Print "ENTER GAME # TO EDIT        "
        Locate 23, 1: Input "ENTER GAME # TO EDIT "; targetGame%
    Loop Until targetGame% >= 1 And targetGame% <= scheduleAP%(0)

    If targetGame% - Int(targetGame% / 20) * 20 = 0 Then
        V$ = scheduleV$(20)
        H$ = scheduleH$(20)
        QV$ = scheduleQB_V$(20)
        QH$ = scheduleQB_H$(20)
        YN$ = scheduleYN$(20, 0)
    Else
        V$ = scheduleV$(targetGame% - Int(targetGame% / 20) * 20)
        H$ = scheduleH$(targetGame% - Int(targetGame% / 20) * 20)
        QBV$ = scheduleQB_V$(targetGame% - Int(targetGame% / 20) * 20)
        QBH$ = scheduleQB_H$(targetGame% - Int(targetGame% / 20) * 20)
        YN$ = scheduleYN$(targetGame% - Int(targetGame% / 20) * 20, 0)
    End If

    HR% = Int(scheduleNG%(targetGame%, 15) / 100)
    MIN% = scheduleNG%(targetGame%, 15) - HR% * 100

    If HR% >= 12 Then
        I$ = "P"
        If HR% > 12 Then HR% = HR% - 12
    Else
        I$ = "A"
    End If

    TM$ = Right$(Str$(HR%), 2) + ":"

    If MIN% < 10 Then
        TM$ = TM$ + "0" + Right$(Str$(MIN%), 1)
    Else
        TM$ = TM$ + Right$(Str$(MIN%), 2)
    End If

    TM$ = TM$ + I$
    DT$ = Right$(Str$(scheduleNG%(targetGame%, 17)), 2) + "/"
    DYMO% = Val(Right$(Str$(scheduleNG%(targetGame%, 16)), 2))

    If DYMO% < 10 Then
        DYMO$ = "0" + Right$(Str$(scheduleNG%(targetGame%, 16)), 1)
    Else
        DYMO$ = Right$(Str$(scheduleNG%(targetGame%, 16)), 2)
    End If

    DT$ = DT$ + DYMO$ + "/" + Right$(Str$(scheduleNG%(targetGame%, 18)), 2)

    Call NewGame(V$, QBV$, H$, QBH$, YN$, DT$, TM$, NTMS, targetGame%)

End Sub

'----------------------------------------
'           NewGame SubRoutine
'----------------------------------------
'This subroutine gives the user an interface
'for editing and choosing options for the
'specified game in the schedule
Sub NewGame (visitor$, visitorQB$, home$, homeQB$, YN$, DT$, TM$, NTMS, gameIndex%)

    Shared N$

    Shared scheduleNG%(), teamRatings%()

    Shared scheduleH$(), scheduleV$()
    Shared scheduleQB_V$(), scheduleQB_H$()
    Shared scheduleYN$()

    Shared location$(), modeAbbrev$(), overtime$()
    Shared playMode$(), qbName$()
    Shared rulesType$(), ruleYrPro$(), ruleYrColl$()
    Shared weather$(), windSetting$(), yesNoText$()

    Dim displayPause!

    scheduleYN$(0, 0) = ""
    scheduleYN$(0, 1) = ""

    qbName$(4) = "RANDOM"

    Do

        ' ** Enter New Game **
        Color 15, 0
        Cls

        Color 2
        Print Tab(29); "SELECT OPENING OPTIONS"

        Locate 2, 2: Color 14
        Print "(1) ";
        Color 15: Print playMode$(scheduleNG%(gameIndex%, 10))
        Locate 3, 2: Color 14
        Print "(2) ";
        Color 15: Print "VISITING TEAM / QB: "; visitor$; " / "; visitorQB$
        Locate 4, 2: Color 14
        Print "(3) ";
        Color 15: Print "HOME TEAM / QB: "; home$; " / "; homeQB$
        Locate 5, 2: Color 14
        Print "(4) ";
        Color 15: Print "GAME DATE (XX-XX-XX)  "; DT$
        Locate 6, 2: Color 14
        Print "(5) ";
        Color 15: Print "GAME TIME (XX:XXP)    "; TM$
        Locate 7, 2: Color 14
        Print "(6) ";
        Color 15: Print Using "PLAY-BY-PLAY DELAY (SECS): ##.#"; scheduleNG%(gameIndex%, 4) / 10
        Locate 8, 2: Color 14
        Print "(7) ";
        Color 15: Print "GAME LOCATION: "; location$(scheduleNG%(gameIndex%, 2))
        Locate 9, 2: Color 14
        Print "(8) ";
        Color 15: Print "TYPE OF GAME: "; rulesType$(scheduleNG%(gameIndex%, 3))
        Locate 10, 2: Color 14
        Print "(9) ";
        Color 15: Print "PRO RULES: "; ruleYrPro$(scheduleNG%(gameIndex%, 11))
        Locate 11, 2: Color 14
        Print "(A) ";
        Color 15: Print "COLLEGE RULES: "; ruleYrColl$(scheduleNG%(gameIndex%, 7))
        Locate 12, 2: Color 14
        Print "(B) ";
        Color 15: Print "OVERTIME: "; overtime$(scheduleNG%(gameIndex%, 14))
        Locate 13, 2: Color 14
        Print "(C) ";
        Color 15: Print "WIND: "; windSetting$(scheduleNG%(gameIndex%, 19))
        Locate 14, 2: Color 14
        Print "(D) ";
        Color 15: Print "WEATHER: "; weather$(scheduleNG%(gameIndex%, 20))
        Locate 16, 2: Color 14
        Print "(0) ";
        Color 15: Print "ACCEPT SETTINGS"

        Locate 1, 1

        Do
            I$ = GetKeyPress$

            Select Case UCase$(I$)
                Case "A": I$ = "11"
                Case "B": I$ = "12"
                Case "C": I$ = "13"
                Case "D": I$ = "14"
            End Select

            setting = Val(I$)

            Select Case setting

                Case 1:
                    scheduleNG%(gameIndex%, 10) = scheduleNG%(gameIndex%, 10) + 1
                    If scheduleNG%(gameIndex%, 10) > 3 Then scheduleNG%(gameIndex%, 10) = 0

                Case 2, 3:

                    teamNbr = 0
                    Call ChooseTeam(YN$, NTMS, teamNbr, team$)

                    If teamNbr <> 0 Then

                        Color 15, 0
                        scheduleNG%(gameIndex%, setting - 2) = teamNbr
                        scheduleYN$(gameIndex%, setting - 2) = YN$

                        If setting = 2 Then
                            visitor$ = team$
                            scheduleV$(gameIndex% - Int(gameIndex% / 20) * 20) = team$
                            visitorQB$ = GetQBName$(gameIndex%, setting)
                            scheduleQB_V$(gameIndex% - Int(gameIndex% / 20) * 20) = visitorQB$
                        End If

                        If setting = 3 Then
                            home$ = team$
                            scheduleH$(gameIndex% - Int(gameIndex% / 20) * 20) = team$
                            homeQB$ = GetQBName$(gameIndex%, setting)
                            scheduleQB_H$(gameIndex% - Int(gameIndex% / 20) * 20) = homeQB$
                        End If

                    End If

                Case 4:
                    Locate 5, 26: Input DT$

                Case 5:
                    Locate 6, 26: Print "        "
                    Locate 6, 26: Input TM$

                Case 6:
                    Locate 7, 32: Input displayPause!
                    scheduleNG%(gameIndex%, 4) = displayPause! * 10

                Case 7:
                    'N = 1 - (scheduleNG%(gameIndex%, 2))
                    'scheduleNG%(gameIndex%, 2) = N
                    N = 1 - (scheduleNG%(gameIndex%, 2) - 1)
                    scheduleNG%(gameIndex%, 2) = N + 1

                Case 8:
                    scheduleNG%(gameIndex%, 3) = scheduleNG%(gameIndex%, 3) + 1
                    If scheduleNG%(gameIndex%, 3) > 5 Then scheduleNG%(gameIndex%, 3) = 0

                Case 9:
                    scheduleNG%(gameIndex%, 11) = 1 + scheduleNG%(gameIndex%, 11)
                    If scheduleNG%(gameIndex%, 11) > 3 Then scheduleNG%(gameIndex%, 11) = 0

                Case 10: ' Back to beginning of loop

                Case 11:
                    scheduleNG%(gameIndex%, 7) = 1 + scheduleNG%(gameIndex%, 7)
                    If scheduleNG%(gameIndex%, 7) > 5 Then scheduleNG%(gameIndex%, 7) = 0

                Case 12:
                    scheduleNG%(gameIndex%, 14) = scheduleNG%(gameIndex%, 14) + 1
                    If scheduleNG%(gameIndex%, 14) > 3 Then scheduleNG%(gameIndex%, 14) = 0

                Case 13:
                    scheduleNG%(gameIndex%, 19) = scheduleNG%(gameIndex%, 19) + 1
                    If scheduleNG%(gameIndex%, 19) > 3 Then scheduleNG%(gameIndex%, 19) = 0

                Case 14:
                    scheduleNG%(gameIndex%, 20) = scheduleNG%(gameIndex%, 20) + 1
                    If scheduleNG%(gameIndex%, 20) > 3 Then scheduleNG%(gameIndex%, 20) = 0

            End Select

        Loop Until (setting >= 0 And setting <= 14)

        If visitor$ <> "" And home$ <> "" And TM$ <> "" And DT$ <> "" Then

            meridian$ = Right$(TM$, 1)
            fullTime$ = Left$(TM$, Len(TM$) - 1)
            MIN% = Val(Right$(fullTime$, 2))
            hourString$ = Left$(fullTime$, Len(fullTime$) - 3)
            HR% = Val(hourString$)

            If UCase$(meridian$) = "P" And HR% < 12 Then
                'If user typed in PM, we are storing as military time
                'We don't check that military time may have been used
                HR% = HR% + 12
            End If

            scheduleNG%(gameIndex%, 15) = HR% * 100 + MIN%
            scheduleNG%(gameIndex%, 17) = Val(Left$(DT$, 2))
            scheduleNG%(gameIndex%, 18) = Val(Mid$((DT$), 7, 2))
            scheduleNG%(gameIndex%, 16) = Val(Mid$((DT$), 4, 2))

        End If

    Loop Until setting = 0

End Sub

'----------------------------------------
'       ExtractSchedule SubRoutine
'----------------------------------------
'This is the core subroutine to leverage
'when mass changes are needing to be made
'to a schedule. It essentially reads in
'the existing schedule parameters, prompts
'the user for the appropriate changes, and
'then writes the changes back to the orig-
'inal schedule file.
Sub ExtractSchedule (scheduleAction%, scheduleFile$)
    'scheduleAction% = 3: EXTRACT ONE TEAM'S SCHEDULE FROM LEAGUE SCHEDULE
    'scheduleAction% = 4: EXTRACT A CONFERENCE SCHEDULE FROM MAIN SCHEDULE
    'scheduleAction% = 5: CHANGE THE MODE OF PLAY FOR A TEAM IN A SCHEDULE
    'scheduleAction% = 6: MAKE GLOBAL CHANGES TO A SCHEDULE

    'EXTRACT A SCHEDULE FROM ANOTHER
    Dim displayPause!

    Shared N$

    Shared homeScores(), visitorScores()

    Shared scheduleAP%()
    Shared scheduleNG%(), teamRatings%()
    Shared scheduleYN$()

    Shared statsZ1%()
    Shared statsZ1$(), statsZ2$()

    Select Case scheduleAction%

        Case 6
            ' GLOBAL SETTINGS FOR A SCHEDULE
            Call ChangeGlobalSettings
            Call SaveScheduleFile(scheduleFile$)
            Call NewSchedule(scheduleFile$)

        Case 3, 4, 5

            If scheduleAction% = 3 Or scheduleAction% = 4 Then

                Color 15, 0
                Cls

                Call MenuBox(6, 8, 61, 8, 15, 1)

                Do

                    Locate 7, 32

                    Locate , 12: Print "ENTER NAME FOR SUB-SCHEDULE: "
                    Print
                    Locate , 12: Print "THE NAME SHOULD HAVE NO PERIODS OR SPECIAL CHARACTERS"
                    Locate , 12: Print "DO NOT ADD A FILE EXTENSION; THE PROGRAM"
                    Locate , 12: Print "WILL AUTOMATICALLY ADD .SCD"
                    Locate , 12: Print "SAMPLE NAMES ARE INDIANA, BOS68, CHI-76, ETC      "
                    Locate 7, 40: Input subSchedFile$

                    If subSchedFile$ <> "" Then

                        Do

                            Locate 14, 12
                            Print "ANY CHANGE? (Y/N) "
                            I$ = GetKeyPress$

                        Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N" Or I$ = Chr$(27)

                    End If

                Loop Until (UCase$(I$) = "N" And subSchedFile$ <> "") Or I$ = Chr$(27)

            End If

            If I$ <> Chr$(27) Then

                Color 15, 0
                Cls

                Select Case scheduleAction%

                    Case 4
                        conferenceFile$ = ChooseFile$(diskPaths$(2) + "*.LIB", "CONFERENCE", ExitCode%)

                        If ExitCode% <> 27 And ExitCode% <> 0 Then

                            Open diskPaths$(2) + conferenceFile$ + ".LIB" For Input As #1

                            Input #1, statType

                            If statType = 0 Then

                                Input #1, LG$
                                Input #1, X$
                                Input #1, X$

                                For X = 1 To 30
                                    Input #1, statsZ1$(X)
                                    Input #1, statsZ1%(X)
                                    Input #1, statsZ2$(X)
                                Next

                                numberTeams = 30

                                Close #1

                            End If

                            If statType = 1 Then

                                Input #1, LG$

                                For X = 1 To 30:
                                    Input #1, statsZ1$(X)
                                    Input #1, statsZ1%(X)
                                    Input #1, statsZ2$(X)
                                Next

                                numberTeams = 30

                                Close #1

                            End If

                            For I = 1 To scheduleAP%(0)

                                scheduleYN$(I, 0) = RTrim$(scheduleYN$(I, 0))
                                scheduleYN$(I, 1) = RTrim$(scheduleYN$(I, 1))

                                For I1 = 1 To numberTeams

                                    If statsZ1$(I1) <> "XXX" Then

                                        If statsZ1%(I1) = scheduleNG%(I, 0) And statsZ2$(I1) = scheduleYN$(I, 0) Or statsZ1%(I1) = scheduleNG%(I, 1) And statsZ2$(I1) = scheduleYN$(I, 1) Then

                                            Print
                                            Print "FOUND A MATCH"

                                            Open diskPaths$(0) + subSchedFile$ + ".SCD" For Random As #2 Len = SCHEDULE_SIZE_BYTES
                                            fileLength& = LOF(2)
                                            targetGame% = fileLength& / SCHEDULE_SIZE_BYTES

                                            For X = 0 To 20
                                                Field #2, X * 2 As X$, 2 As Q$(X + 1), SCHEDULE_SIZE_BYTES - 2 - 2 * X As X$
                                            Next

                                            Field #2, 42 As X$, 3 As Q$(22), 3 As Q$(23), 2 As Q$(24), 2 As Q$(25)

                                            For X = 0 To 20: LSet Q$(X + 1) = MKI$(scheduleNG%(I, X)): Next

                                            For X = 0 To 1: LSet Q$(22 + X) = scheduleYN$(I, X): Next

                                            LSet Q$(24) = MKI$(visitorScores(I)): LSet Q$(25) = MKI$(homeScores(I))

                                            Put #2, targetGame% + 1

                                            Close #2

                                            Exit For

                                        End If

                                    End If 'Done checking for "XXX"

                                Next I1

                            Next I

                        End If 'Done checking COUNT

                    Case 3, 5

                        T1 = 0
                        Call ChooseTeam(YN$, numberTeams, T1, N$)

                        If T1 <> 0 Then

                            Color 15, 0
                            Cls

                            'Change mode of play
                            If scheduleAction% = 5 Then

                                Color teamRatings%(2), teamRatings%(1): Print N$;
                                Color 15, 0
                                Print " IS TO BE:"
                                Print
                                Print "(0) MANUALLY CONTROLLED": Print
                                Print "(1) COMPUTER CONTROLLED"

                                Do
                                    C$ = GetKeyPress$
                                    I1 = Val(C$)
                                Loop Until C$ = "0" Or C$ = "1"

                                Print
                                Input "ENTER PLAY-BY-PLAY DELAY FOR THESE GAMES "; displayPause!

                            End If

                            For I = 1 To scheduleAP%(0)

                                scheduleYN$(I, 0) = RTrim$(scheduleYN$(I, 0))
                                scheduleYN$(I, 1) = RTrim$(scheduleYN$(I, 1))

                                If T1 = scheduleNG%(I, 0) And YN$ = scheduleYN$(I, 0) Or T1 = scheduleNG%(I, 1) And YN$ = scheduleYN$(I, 1) Then

                                    'CHANGE SETTINGS FOR A TEAM
                                    If T1 = scheduleNG%(I, 0) And YN$ = scheduleYN$(I, 0) Then scheduleNG%(I, 10) = 2
                                    If T1 = scheduleNG%(I, 1) And YN$ = scheduleYN$(I, 1) Then scheduleNG%(I, 10) = 1
                                    If (T1 = scheduleNG%(I, 0) And YN$ = scheduleYN$(I, 0) Or T1 = scheduleNG%(I, 1) And YN$ = scheduleYN$(I, 1)) And I1 = 1 And scheduleAction% = 5 Then scheduleNG%(I, 10) = 3
                                    scheduleNG%(I, 4) = displayPause! * 10

                                    'Extract only
                                    If Not (scheduleAction% = 5) Then
                                        'Write matching games
                                        Locate 1, 1: Print numberGames + 1; " MATCHES"

                                        Open diskPaths$(0) + subSchedFile$ + ".SCD" For Random As #3 Len = SCHEDULE_SIZE_BYTES
                                        fileLength& = LOF(3)

                                        numberGames = fileLength& / SCHEDULE_SIZE_BYTES

                                        For X = 0 To 20
                                            Field #3, X * 2 As X$, 2 As Q$(X + 1), SCHEDULE_SIZE_BYTES - 2 - 2 * X As X$
                                        Next

                                        Field #3, 42 As X$, 3 As Q$(22), 3 As Q$(23), 2 As Q$(24), 2 As Q$(25)

                                        For X = 0 To 20: LSet Q$(X + 1) = MKI$(scheduleNG%(I, X)): Next

                                        For X = 0 To 1: LSet Q$(22 + X) = scheduleYN$(I, X): Next

                                        LSet Q$(24) = MKI$(visitorScores(I)): LSet Q$(25) = MKI$(homeScores(I))

                                        Put #3, numberGames + 1

                                        Close #3

                                    End If 'Done checking schedule action

                                End If 'Done checking for matches

                            Next 'Done looping through games

                        End If

                End Select

            End If 'Done checking for ESC

    End Select 'Done with actions 2 -5

End Sub


'----------------------------------------
'       EditParameters SubRoutine
'----------------------------------------
'This subroutine gives the user an inter-
'face for editing the parameters by which
'"Special" boxscores are created / saved.
Sub EditParameters ()

    Dim eventSettings(13)

    'Read in existing parameters if there are any
    If _FileExists("EVENTS.BOX") Then

        Open "EVENTS.BOX" For Input As #1

        For X = 1 To 13
            Input #1, eventSettings(X)
        Next

        Close #1

    End If

    Cls
    Color 14

    Print "PARAMETERS FOR SAVING SPECIAL EVENTS BOXSCORES"

    Color 15

    Print " 1. IF QUARTERS ARE OVER "; eventSettings(1)
    Print " 2. A TEAM'S POINTS MORE THAN "; eventSettings(2)
    Print " 3. A TEAM'S POINTS LESS THAN "; eventSettings(3)
    Print " 4. RUSHER'S YARDS MORE THAN "; eventSettings(4)
    Print " 5. RUSHER'S TDS MORE THAN "; eventSettings(5)
    Print " 6. RECEIVER'S YARDS MORE THAN "; eventSettings(6)
    Print " 7. RECEIVER'S TDS MORE THAN "; eventSettings(7)
    Print " 8. PASSER'S YARDS MORE THAN "; eventSettings(8)
    Print " 9. PASSER'S TDS MORE THAN "; eventSettings(9)
    Print "10. KICKER'S FGM MORE THAN "; eventSettings(10)

    C1 = 1

    Do

        Locate 23, 1: Print "SELECT # TO CHANGE 1-13 (0 TO CONTINUE) ";
        Input B9

        Select Case B9

            Case 1: Locate 2: Input " 1. IF QUARTERS ARE OVER "; eventSettings(1)
            Case 2: Locate 3: Input " 2. A TEAM'S POINTS MORE THAN "; eventSettings(2)
            Case 3: Locate 4: Input " 3. A TEAM'S POINTS LESS THAN "; eventSettings(3)
            Case 4: Locate 5: Input " 4. RUSHER'S YARDS MORE THAN "; eventSettings(4)
            Case 5: Locate 6: Input " 5. RUSHER'S TDS MORE THAN "; eventSettings(5)
            Case 6: Locate 7: Input " 6. RECEIVER'S YARDS MORE THAN "; eventSettings(6)
            Case 7: Locate 8: Input " 7. RECEIVER'S TDS MORE THAN "; eventSettings(7)
            Case 8: Locate 9: Input " 8. PASSER'S YARDS MORE THAN "; eventSettings(8)
            Case 9: Locate 10: Input " 9. PASSER'S TDS MORE THAN "; eventSettings(9)
            Case 10: Locate 11: Input "10. KICKER'S FGM MORE THAN "; eventSettings(10)

        End Select

    Loop Until B9 = 0 'ENTER also counts as 0

    'Save all changes
    Open "EVENTS.BOX" For Output As #2

    For X = 1 To 13
        Print #2, eventSettings(X)
    Next

    Close #2

End Sub


'----------------------------------------
'    BoxscoreMaintenance SubRoutine
'----------------------------------------
'This subroutine gives the user a menu
'for several of the options available to
'manage and maintain boxscores.
Sub BoxscoreMaintenance ()

    ReDim menuChoices$(1 To 6)

    menuChoices$(1) = "SET PARAMETERS TO SAVE SPECIAL EVENTS BOXSCORES  "
    menuChoices$(2) = "ACCESS USER SAVED AND SPECIAL EVENTS BOXSCORES   "
    menuChoices$(3) = "DELETE ALL SCHEDULE GENERATED BOXSCORES          "
    menuChoices$(4) = "DELETE ALL USER SAVED, & SPECIAL BOXSCORES       "
    menuChoices$(5) = "DELETE ALL BOXSCORES (SCHEDULE, USER, &  SPECIAL)"
    menuChoices$(6) = "RETURN TO MAIN AUTO SCHEDULER MENU               "
    Selection% = 1
    Count% = 6
    Start% = 1
    ExitCode% = 6
    FileFGColor% = 15: FileBGColor% = 1
    HiLiteFGColor% = 0: HiLiteBGColor% = 7
    Spacing% = 1
    Row% = 8
    menuWidth% = Len(menuChoices$(1))
    Column% = (80 - menuWidth% - 2) / 2

    Do

        Color 15, 0

        Call TITLE_SCHEDULER

        Call box0(Row% - 1, Column% - 1, Row% + Count%, Column% + menuWidth%, 2, FileFGColor%, FileBGColor%)

        _MouseShow "DEFAULT"
        MMenuVert menuChoices$(), Selection%, Start%, ExitCode%, FileFGColor%, FileBGColor%, HiLiteFGColor%, HiLiteBGColor%, Count%, Row%, Column%
        _MouseHide

        If ExitCode% <> 27 Then

            Select Case Selection%

                Case 1:
                    Call EditParameters

                Case 2:
                    boxscoreFile$ = ChooseFile$(diskPaths$(1) + "*.BSS", "BOXSCORE", ExitCode%)
                    'boxscoreFile$ = ChooseFile$(diskPaths$(1) + "*.SPC", "BOXSCORE", ExitCode%)

                    If ExitCode% <> 27 And ExitCode% <> 0 And boxscoreFile$ <> "" Then
                        boxName$ = diskPaths$(1) + boxscoreFile$
                        Call EditBoxscore(boxName$ + ".BSS")
                        'Call EditBoxscore(boxName$ + ".SPC")
                    End If

                Case 3
                    Spec$ = diskPaths$(1) + "*.BS"
                    'Spec$ = diskPaths$(1) + "BOX*."
                    Call DeleteBoxscores(Selection%, Spec$)

                Case 4
                    Spec$ = diskPaths$(1) + "*.BSS"
                    'Spec$ = diskPaths$(1) + "*.SPC"
                    Call DeleteBoxscores(Selection%, Spec$)

                Case 5:
                    Spec$ = diskPaths$(1) + "*.BS"
                    'Spec$ = diskPaths$(1) + "BOX*."
                    Call DeleteBoxscores(Selection%, Spec$)

                    Spec$ = diskPaths$(1) + "*.BSS"
                    'Spec$ = diskPaths$(1) + "*.SPC"
                    Call DeleteBoxscores(Selection%, Spec$)

            End Select

        End If

    Loop Until Selection% = 6 Or ExitCode% = 27

End Sub


'----------------------------------------
'       SaveScheduleFile SubRoutine
'----------------------------------------
'This subroutine writes all scheduled data,
'as stored in the relevant arrays, back to
'the target schedule file.
Sub SaveScheduleFile (saveFile$)

    Shared homeScores(), visitorScores()
    Shared scheduleAP%(), scheduleNG%()
    Shared scheduleYN$()

    If _FileExists(diskPaths$(0) + saveFile$ + ".SCD") Then Kill diskPaths$(0) + saveFile$ + ".SCD"

    Open diskPaths$(0) + saveFile$ + ".SCD" For Random As #1 Len = SCHEDULE_SIZE_BYTES

    For X = 0 To 20
        Field #1, X * 2 As X$, 2 As Q$(X + 1), SCHEDULE_SIZE_BYTES - 2 - 2 * X As X$
    Next

    Field #1, 42 As X$, 3 As Q$(22), 3 As Q$(23), 2 As Q$(24), 2 As Q$(25)

    For I = 1 To scheduleAP%(0)

        For X = 0 To 20:
            LSet Q$(X + 1) = MKI$(scheduleNG%(I, X))
        Next

        For X = 0 To 1:
            LSet Q$(22 + X) = RTrim$(scheduleYN$(I, X))
        Next

        LSet Q$(24) = MKI$(visitorScores(I))
        LSet Q$(25) = MKI$(homeScores(I))

        Put #1, I

    Next

    Close #1

End Sub


'----------------------------------------
'       SortSchedule SubRoutine
'----------------------------------------
'This subroutine is used to automatically
'sort all games in the schedule by their
'date / time.
Sub SortSchedule ()

    Dim schedDates&(MAX_SCHEDULE_GAMES)
    Dim D&, M&, Y&

    Shared homeScores(), visitorScores()
    Shared scheduleAP%(), scheduleNG%()
    Shared scheduleYN$()

    For I = 1 To scheduleAP%(0)
        HR% = Int(scheduleNG%(I, 15) / 100)
        MIN% = scheduleNG%(I, 15) - HR% * 100
        TM% = HR% * 60 + MIN%
        scheduleNG%(I, 12) = Int(TM% / 30 - 18)
        D& = (scheduleNG%(I, 18) - 1)
        D& = D& * 365
        M& = (scheduleNG%(I, 17) - 1)
        M& = M& * 31
        Y& = scheduleNG%(I, 16)
        schedDates&(I) = (D& + M& + Y&) * 24 * 60 + TM%
    Next

    For Z = 1 To scheduleAP%(0) - 1

        For Z1 = Z + 1 To scheduleAP%(0)

            Locate 1, 1: Print Z, Z1

            If scheduleNG%(Z, 12) > scheduleNG%(Z1, 12) Then
                For I = 0 To 20:
                    Swap scheduleNG%(Z, I), scheduleNG%(Z1, I)
                Next
                For I = 0 To 1:
                    Swap scheduleYN$(Z, I), scheduleYN$(Z1, I)
                Next
                Swap schedDates&(Z), schedDates&(Z1)
                Swap visitorScores(Z), visitorScores(Z1)
                Swap homeScores(Z), homeScores(Z1)
            End If

        Next Z1

    Next Z

    For Z = 1 To scheduleAP%(0) - 1

        For Z1 = Z + 1 To scheduleAP%(0)

            If schedDates&(Z) > schedDates&(Z1) Then
                For I = 0 To 20:
                    Swap scheduleNG%(Z, I), scheduleNG%(Z1, I)
                Next
                For I = 0 To 1:
                    Swap scheduleYN$(Z, I), scheduleYN$(Z1, I)
                Next
                Swap schedDates&(Z), schedDates&(Z1)
                Swap visitorScores(Z), visitorScores(Z1)
                Swap homeScores(Z), homeScores(Z1)
            End If

        Next Z1

    Next Z

End Sub


'----------------------------------------
'    ChangeGlobalSettings SubRoutine
'----------------------------------------
'This subroutine presents the end user a
'variety of game options that can be changed
'or applied to all games in the schedule file.
'These would be game-specific options, as
'opposed to teams / dates / times.
Sub ChangeGlobalSettings ()

    Shared scheduleAP%(), scheduleNG%()

    Shared modeAbbrev$()
    Shared qbName$(), scheduleYN$()

    Shared location$(), overtime$(), playMode$()
    Shared rulesType$(), ruleYrColl$(), ruleYrPro$()
    Shared windSetting$(), weather$()

    Dim displayPause!

    scheduleYN$(0, 0) = ""
    scheduleYN$(0, 1) = ""

    ' GLOBAL SETTINGS FOR A SCHEDULE
    ' The code below would use default values based on the most recent rules
    'ruleOptType = 1
    'ruleOptColl = 5
    'ruleOptPro = 3
    'overtimeOpt = 1
    'windOpt = 3
    'weatherOpt = 3

    'QB selections
    qbName$(4) = "RANDOM"

    'This code will assign defaults based on the first game in the schedule.
    'Usually when I want to change global settings, I want to keep most
    'settings in the schedule the same.
    playerOpt = scheduleNG%(1, 10)
    gameLoc = scheduleNG%(1, 2)
    ruleOptType = scheduleNG%(1, 3)
    ruleOptPro = scheduleNG%(1, 11)
    ruleOptColl = scheduleNG%(1, 7)
    overtimeOpt = scheduleNG%(1, 14)
    displayPause! = scheduleNG%(1, 4) / 10
    windOpt = scheduleNG%(1, 19)
    weatherOpt = scheduleNG%(1, 20)

    DT$ = "09-01-23"
    TM$ = "07:30P"

    Do
        Color 15, 0
        Cls
        Print Tab(30); "GLOBAL SETTINGS FOR SCHEDULE"

        Locate 3, 2: Color 14: Print "(1) ";
        Color 15: Print "GAME PLAY: "; playMode$(playerOpt)
        Locate 4, 2: Color 14: Print "(2) ";
        Color 15: Print "GAME LOCATION: "; location$(gameLoc)
        Locate 5, 2: Color 14: Print "(3) ";
        Color 15: Print "TYPE OF GAME: "; rulesType$(ruleOptType)
        Locate 6, 2: Color 14: Print "(4) ";
        Color 15: Print "PRO RULES: "; ruleYrPro$(ruleOptPro)
        Locate 7, 2: Color 14: Print "(5) ";
        Color 15: Print "COLLEGE RULES: "; ruleYrColl$(ruleOptColl)
        Locate 8, 2: Color 14: Print "(6) ";
        Color 15: Print "OVERTIME: "; overtime$(overtimeOpt)
        Locate 9, 2: Color 14: Print "(7) ";
        Color 15: Print Using "PLAY-BY-PLAY DELAY (SECS): ##.#  "; displayPause!
        Locate 10, 2: Color 14: Print "(8) ";
        Color 15: Print "WIND OPTION: "; windSetting$(windOpt)
        Locate 11, 2: Color 14: Print "(9) ";
        Color 15: Print "WEATHER OPTION: "; weather$(weatherOpt)
        Locate 13, 2: Color 14: Print "(0) ";
        Color 15: Print "ACCEPT GLOBAL SETTINGS"

        Do
            I$ = GetKeyPress$
            If UCase$(I$) = "A" Then I$ = "10"
            I = Val(I$)
        Loop Until I >= 0 And I <= 10

        Select Case I

            Case 1:
                playerOpt = playerOpt + 1
                If playerOpt > 3 Then playerOpt = 0

            Case 2:
                gameLoc = gameLoc + 1
                If gameLoc = 3 Then gameLoc = 1

            Case 3:
                ruleOptType = ruleOptType + 1
                If ruleOptType > 5 Then ruleOptType = 0

            Case 4:
                ruleOptPro = ruleOptPro + 1
                If ruleOptPro > 3 Then ruleOptPro = 0

            Case 5:
                ruleOptColl = ruleOptColl + 1
                If ruleOptColl > 5 Then ruleOptColl = 0

            Case 6:
                overtimeOpt = overtimeOpt + 1
                If overtimeOpt > 3 Then overtimeOpt = 0

            Case 7:
                Locate 9, 32: Input displayPause!
                'Input "DISPLAY VARIABLE "; displayPause!

            Case 8:
                windOpt = windOpt + 1
                If windOpt > 3 Then windOpt = 0

            Case 9
                weatherOpt = weatherOpt + 1
                If weatherOpt > 3 Then weatherOpt = 0

        End Select

    Loop Until I = 0

    For I = 1 To scheduleAP%(0)
        scheduleNG%(I, 2) = gameLoc
        scheduleNG%(I, 3) = ruleOptType
        scheduleNG%(I, 4) = displayPause! * 10
        scheduleNG%(I, 7) = ruleOptColl
        scheduleNG%(I, 10) = playerOpt
        scheduleNG%(I, 11) = ruleOptPro
        scheduleNG%(I, 14) = overtimeOpt
        scheduleNG%(I, 19) = windOpt
        scheduleNG%(I, 20) = weatherOpt
    Next

End Sub


'----------------------------------------
'       DeleteBoxscores Subroutine
'----------------------------------------
'This subroutine prompts for confirmation
'of and proceeds to delete the specified
'types of boxscores. This is called by
'BoxScore maintenance routine.
Sub DeleteBoxscores (fileChoice%, fileSpec$)

    Spec$ = diskPaths$(0) + fileSpec$
    Count% = FileCount%(Spec$)

    If Count% = 0 Then

        Select Case fileChoice%

            Case 3:
                MsgText$ = "NO BOXSCORES WERE FOUND PRESS ANY KEY TO RETURN TO MENU"

            Case 4:
                MsgText$ = "NO SPECIAL EVENTS BOXSCORES WERE FOUND PRESS ANY KEY TO RETURN TO MENU"

            Case 5:
                ' Exit Sub

        End Select

        BoxWidth = 24
        BoxHeight = (Len(MsgText$) / BoxWidth) + 3 'top and box lines + 1 extra
        Locate ((25 - BoxHeight) / 2), (80 - ((BoxWidth + 2) / 2))
        Call CSMsgBox(MsgText$, BoxWidth, Pass)
        I$ = GetKeyPress$
        Call CSMsgBox("", 0, Pass)

    Else

        ReDim boxFiles$(0 To Count%)

        For X = 1 To Count%
            boxFiles$(X) = Space$(12)
        Next

        boxFiles$(0) = fileSpec$
        Call ReadFile(boxFiles$())

        For X = 1 To Count%
            Kill (diskPaths$(1) + boxFiles$(X))
            Locate 12, 34: Print "DELETING "; boxFiles$(X)
        Next

        MsgText$ = "ALL BOXSCORE FILES HAVE BEEN DELETED. PRESS ANY KEY TO RETURN TO MAIN MENU"
        BoxWidth = 20
        BoxHeight = (Len(MsgText$) / BoxWidth) + 3 'top and box lines + 1 extra
        Locate ((25 - BoxHeight) / 2), (80 - ((BoxWidth + 2) / 2))
        Call CSMsgBox(MsgText$, BoxWidth, Pass)
        I$ = GetKeyPress$
        Call CSMsgBox("", 0, Pass)

    End If

End Sub


'----------------------------------------
'      LoadScheduleInfo SubRoutine
'----------------------------------------
'This subroutine opens the target SCHEDULE
'file and reads the data into corresponding
'arrays for use in the scheduler
Sub LoadScheduleInfo (targetFile$)

    Shared BS%, NS%

    Shared scheduleAP%(), scheduleNG%()
    Shared homeScores(), visitorScores()
    Shared scheduleYN$()

    Open diskPaths$(0) + targetFile$ + ".SCD" For Random As #1 Len = SCHEDULE_SIZE_BYTES

    fileLength& = LOF(1)

    scheduleAP%(0) = fileLength& / SCHEDULE_SIZE_BYTES
    BS% = Int((scheduleAP%(0) - 1) / 20)

    For X = 0 To 20
        Field #1, X * 2 As X$, 2 As Q$(X + 1), SCHEDULE_SIZE_BYTES - 2 - 2 * X As X$
    Next

    Field #1, 42 As X$, 3 As Q$(22), 3 As Q$(23), 2 As Q$(24), 2 As Q$(25)

    For I = 1 To scheduleAP%(0)

        Get #1, I

        For X = 0 To 20:
            scheduleNG%(I, X) = CVI(Q$(X + 1))
        Next

        For X = 0 To 1:
            scheduleYN$(I, X) = RTrim$(Q$(22 + X))
        Next

        visitorScores(I) = CVI(Q$(24))
        homeScores(I) = CVI(Q$(25))

    Next

    Close #1

    NS% = 0

End Sub


'----------------------------------------
'       EditBoxscore SubRoutine
'----------------------------------------
'This subroutine is designed to facilitate
'the user's ability to edit, in-realtime,
'a boxscore that has been previously created
'by the game. It is essentially a DOS-based
'text editing routine, which was written in
'x86 asm. Therefore, the corresponding code
'is no longer available or useful. It is
'recommended that users simply edit their
'boxscores in their favorite text editor.
Sub EditBoxscore (boxName$)

    If Not _FileExists(boxName$) Then

        MsgText$ = "BOXSCORE DOES NOT EXIST PRESS ANY KEY TO RETURN TO MAIN MENU"
        BoxWidth = 24
        BoxHeight = (Len(MsgText$) / BoxWidth) + 3 'top and box lines + 1 extra
        Locate ((25 - BoxHeight) / 2), (80 - ((BoxWidth + 2) / 2))
        Call CSMsgBox(MsgText$, BoxWidth, Pass)
        I$ = GetKeyPress$
        Call CSMsgBox("", 0, Pass)

    Else

        Call QBWRITE(boxName$)

    End If

End Sub
