'----------------------------------------
'            INFO Subroutine
'----------------------------------------
'This subroutine displays a simple header
'and footer for the game options menu.
Sub INFO ()

    Cls

    Color , 1
    Locate 1, 1
    Print Tab(80);

    Locate , 33: Color 14
    Print "GAME OPTIONS MENU"

    Locate 24, 1
    Print Tab(80);
    Locate , 1
    Print "(C) LANCE HAFFNER 1986-2000"; Tab(70); Left$(Time$, 5);
    Locate 3, 1: Color , 0

End Sub


'----------------------------------------
'           InitVar Subroutine
'----------------------------------------
' Initializes variables for the game
' Does not process any that will be read
' in from file or assigned elsewhere
Sub InitVar ()

    Shared scheduleFile$

    '-- Does this really belong here???
    If G9 <> 0 Then
        For I = 1 To 10
            If Left$(D$(I), 3) = "5-2" Then D$(I) = "3-4" + Right$(D$(I), Len(D$(I)) - 3)
            If Left$(D2$(I), 3) = "5-2" Then D2$(I) = "3-4" + Right$(D2$(I), Len(D2$(I)) - 3)
        Next
    End If

    For J1 = 1 To 15:
        D2$(J1) = D$(J1)
    Next

    For J1 = 12 To 15:
        D2$(J1) = D2$(J1 - 7)
    Next

    D2$(5) = D2$(9)
    D2$(6) = D2$(10)

    For J1 = 12 To 15:
        D2$(J1 - 5) = D2$(J1)
    Next
    '-- Does this really belong here???


    DR$(0) = "RIGHT"
    DR$(1) = "LEFT"
    D$(11) = "GOAL LINE"

    For I = 0 To 6: WX%(I) = 0: Next

    G$(1) = "FLEA FLICKER"
    G$(2) = "REVERSE"
    G$(3) = "HB PASS"

    PS$(0) = "RUN"
    PS$(1) = "PASS"
    PS$(3) = "FIELD GOAL ATTEMPT"
    PS$(2) = "PUNT"
    PS$(4) = "SCOUTING REPORT"
    PS$(5) = "CHANGE/SELECT QB"
    PS$(6) = "SHOW GAME STATS"
    PS$(7) = "QB KNEEL DOWN"
    PS$(8) = "TEN MINUTE TICKER "
    PS$(9) = "CHANGE/SELECT KICKER"

    DN$(0) = "FIRST"
    DN$(1) = DN$(0)
    DN$(2) = "SECOND"
    DN$(3) = "THIRD"
    DN$(4) = "FOURTH"

    A = 0
    A2 = 0
    A3 = 0
    A4 = 0
    A5 = 0
    A6 = 0
    A7 = 0
    A8 = 0
    A9 = 0
    AP = 0
    B = 0
    B1 = 0
    B2 = 0
    B3 = 0
    B4 = 0
    B5 = 0
    B7 = 0
    B8 = 0
    
    'this can be used to control certain colors
    'with the display of the field / PBP
    BW = 0

    CP = 0
    CT = 0
    D = 0
    D1 = 0
    D2 = 0
    D3 = 0
    DDI = 0
    DDS = 0
    DI = 0
    DR = 0
    DS = 0
    DT = 0
    E = 0
    endAllGames = 0
    endGame = 0
    EY = 0
    F2 = 0
    F8 = 0
    F9 = 0
    G = 0
    gameClock! = 0
    halfTime = 0
    I = 0
    I1 = 0
    I2 = 0
    I3 = 0
    I4 = 0
    I5 = 0
    I6 = 0
    I7 = 0
    I8 = 0
    I9 = 0
    J = 0
    JJ = 0
    K3 = 0
    N = 0
    NT = 0
    O = 0
    OT = 0
    P1 = 0
    P2 = 0
    PN = 0
    PQ = 0
    PR = 0
    PW = 0
    Q = 0
    QB = 0
    R1 = 0
    RP = 0
    RY = 0
    S = 0
    S2 = 0
    S3 = 0
    S6 = 0
    specialStat = 0
    SY = 0
    T1 = 0
    timeElapsed! = 0
    TMT = 0
    W5 = 0
    WE = 0
    WS = 0
    X = 0
    X1 = 0
    X2 = 0
    XD = 0
    XE = 0
    Y = 0
    Y1 = 0
    YC = 0
    YF = 0
    YL = 0
    YT = 0
    Z1 = 0

    BO% = 0
    C% = 0
    EG% = 0
    F% = 0
    GL% = 0
    HB% = 0
    intB8% = 0
    intDI% = 0
    intDS% = 0
    intI% = 0
    intY8% = 0
    intYL% = 0
    PA% = 0
    PC% = 0
    PS% = 0
    Q6% = 0
    Q7% = 0
    QBN% = 0
    QX% = 0
    RF% = 0
    S1% = 0
    SX% = 0
    W% = 0
    WX% = 0

    actualAttendance& = 0

    A$ = ""
    A1$ = ""
    A2$ = ""
    A3$ = ""
    A4$ = ""
    A5$ = ""
    A6$ = ""
    A7$ = ""
    DI$ = ""
    div2$ = ""
    DN$ = ""
    DR$ = ""
    DS$ = ""
    DV$ = ""
    F$ = ""
    G$ = ""
    I$ = ""
    LO$ = ""
    NM$ = ""
    NN$ = ""
    NY$ = ""
    PS$ = ""
    Q$ = ""
    RP$ = ""
    RV$ = ""
    scheduleFile$ = ""
    SD$ = ""
    SITE$ = ""
    strG9$ = ""
    SX$ = ""
    U$ = ""
    U5$ = ""
    X$ = ""
    Y8$ = ""
    Y9$ = ""
    YN$ = ""

    Erase A$, A1$, A2$, A3$, A4$, A5$, A6$, A7$
    Erase AA$, B$, DI$, DS$, diskPaths$
    Erase H$, HO$, strIR$, strKR$
    Erase strLC$, LF$, LI$, LK$, LP$, strLR$
    Erase NN$, PK$, strPR$, Q$, strQB$
    Erase strRB$, SITE$, SX$
    Erase teamNames$, strWR$, Y$, YN$, YR%

    Erase A, A1, A2, A3, A4, A5, A6, A7, A8, A9
    Erase AF, AM, B, B1, B2, B3, B4, B5, B6, B7, B8
    Erase C, CRD&, DDI, DDS, DI, DS, FA, FL, FM
    Erase GI, GS, IR
    Erase K, K1, K2, K3, KR
    Erase LC, LF, LI, LK, LP, LR, OT, PK, PR
    Erase QB, RB, S, SI, SK, T1, timePoss ', T
    Erase W6, WR, XD, YC, Z, Z1, Z2

    Erase AP%, intB8%, intDI%, intDS%
    Erase intG9%, HB%
    Erase O%, PA%, PC%, intPR%
    Erase Q6%, Q7%, QX%, R9%, RQ%, RV%
    Erase ST%, SX%, TE%, TF%, TeamScore%

    Erase teamIndex%, V4%

End Sub


'----------------------------------------
'          AUTOSETUP Subroutine
'----------------------------------------
'This subroutine auto-assigns game param-
'eters from a schedule file's data.
Sub AUTOSETUP

    'Assign settings from schedule / etc.
    H% = NG%(2)
    G9 = NG%(3)
    pbpDelay! = NG%(4) / 10
    Y9 = NG%(7)
    J6 = NG%(10)
    Y8 = NG%(11)
    tickerStart = NG%(12)

    For P9 = 0 To 1

        teamNbr = NG%(P9)
        Call ReadGameTeam(YN$(P9), A$(P9), teamNbr, P9)
        NG%(P9) = teamNbr
        X = 0

    Next P9

    'If college rules, pre-1974
    If Y8 = 1 And G9 <> 0 Then
        'is this an adjustment for
        'kicking distance based on
        'placement of the goal posts???
        intY8% = -10
    End If

    'If WFL rules
    If G9 = 4 Then
        intY8% = 0
    End If

End Sub


'----------------------------------------
'           TEAMBOX Subroutine
'----------------------------------------
'This subroutine draws an ASCII box using 
'team colors. The box starts at row 6 and 
'is approx. 60 char's wide. When done, the 
'cursor is set at the first printable row
'and column inside the box.
Sub TEAMBOX (boxHeight, teamIdx)

    Locate 6, 8
    Color PA%(teamIdx, 2), PA%(teamIdx, 1)

    'Print box top
    Print " " + Chr$(214); String$(61, 196); Chr$(183) + " ";

    'Print box sides
    For II = 1 To boxHeight
        Locate 6 + II, 8
        Print " " + Chr$(186); String$(61, 32); Chr$(186) + " ";
    Next

    'Print box bottom
    Locate 7 + boxHeight, 8
    Print " " + Chr$(211); String$(61, 196); Chr$(189) + " ";

    Locate 7, 11

End Sub


'----------------------------------------
'         FRAMEOPTION Subroutine
'----------------------------------------
'This subroutine draws an ASCII box using 
'team colors. The box starts at row 8 and 
'is approx. 60 char's wide. When done, the 
'cursor is set at the first printable row
'and column inside the box.
Sub FRAMEOPTION (boxHeight, teamIdx)

    PCopy 0, 1
    Screen , , 1, 1

    Locate 8, 8
    Color PA%(teamIdx, 2), PA%(teamIdx, 1)

    'Print box top
    Print " " + Chr$(214); String$(61, 196); Chr$(183) + " ";

    'Print box sides
    For II = 1 To boxHeight
        Locate 8 + II, 8
        Print " " + Chr$(186); String$(61, 32); Chr$(186) + " ";
    Next

    'Print box bottom
    Locate 9 + boxHeight, 8
    Print " " + Chr$(211); String$(61, 196); Chr$(189) + " ";

    Locate 9, 12

End Sub


'----------------------------------------
'          OPTIONBOX Subroutine
'----------------------------------------
'This subroutine draws an ASCII box in grey.
'The box starts at row 8 and is approx. 60 
'char's wide. When done, the cursor is set 
'at the first printable row and column 
'inside the box.
Sub OPTIONBOX (J)

    PCopy 0, 1
    Screen , , 1, 1

    Locate 8, 8
    Color 0, 7

    'Print box top
    Print " " + Chr$(214); String$(61, 196); Chr$(183) + " ";

    'Print box sides
    For II = 1 To J
        Locate 8 + II, 8
        Print " " + Chr$(186); String$(61, 32); Chr$(186) + " ";
    Next

    'Print box bottom
    Locate 9 + J, 8
    Print " " + Chr$(211); String$(61, 196); Chr$(189) + " ";

    Locate 10, 15

End Sub


'----------------------------------------
'         FRAMESTATS Subroutine
'----------------------------------------
'This subroutine draws an ASCII box in grey.
'The box starts at row 8 and is approx. 77
'char's wide. When done, the cursor is set 
'at the first printable row and column 
'inside the box.
Sub FRAMESTATS (J)

    Locate 1, 1
    Color 0, 7

    Print Chr$(214); String$(77, 196); Chr$(183);

    For II = 1 To J
        Locate 1 + II, 1
        Print Chr$(186); String$(77, 32); Chr$(186);
    Next

    Locate 2 + J, 1
    Print Chr$(211); String$(77, 196); Chr$(189);

    Locate 2, 32

End Sub


'----------------------------------------
'            d100 Subroutine
'----------------------------------------
'This subroutine assigns a random number
'between 1 and 100 to the variable that
'it is called with
Sub d100 (randNumVar)

    randNumVar = Int(Rnd(1) * 100) + 1

End Sub


'----------------------------------------
'            DELAY Subroutine
'----------------------------------------
'This subroutine simply serves as a place-
'holder for the command to initiate the
'pbp delay.
Sub DELAY ()

    _Delay pbpDelay!

End Sub


'----------------------------------------
'             PBP Subroutine
'----------------------------------------
'This is the classic Haffner Play-by-play
'subroutine. Given the target text, it will
'place it in the correct spot in the pbp
'text window. No text is placed if the
'delay is 0.
Sub PBP ()

    M$ = InKey$

    If UCase$(M$) = "Q" Then Cls: End

    Call PLACEPBP

    If pbpDelay! > 0 Then
        _Delay pbpDelay!
    End If

End Sub


'----------------------------------------
'           TICKER Subroutine
'----------------------------------------
'This subroutine displays the score of all 
'current games being tracked by the ticker.
'For each game it will find the score that
'matches the current game time / period.
Sub TICKER ()

    If Not (AP = 1 And J6 = 2) Then

        Color 14, 0
        Cls

        Call d100(RN)

        If halfTime = 1 Then

            If G9 = 0 Then
                If RN <= 50 Then
                    Locate , 23: Print "PRUDENTIAL AT THE HALF SCOREBOARD"
                Else
                    Locate , 28: Print "RED MAN HALFTIME REPORT"
                End If
            Else
                If RN <= 50 Then
                    Locate , 29: Print "TOYOTA HALFTIME REPORT"
                Else
                    Locate , 29: Print "HONDA HALFTIME REPORT"
                End If
            End If

        Else

            If endGame = 1 Then

                If G9 = 0 Then
                    Locate , 27: Print "CHEVROLET FINAL SCOREBOARD"
                Else
                    Select Case RN
                        Case 1 To 33: Locate , 27: Print "USA TODAY FINAL SCOREBOARD"
                        Case 34 To 67: Locate , 24: Print "FEDERAL EXPRESS FINAL SCOREBOARD"
                        Case 67 To 100: Locate , 23: Print "ESPN SPORTSCENTER FINAL SCOREBOARD"
                    End Select
                End If
            Else
                If halfTime = 0 Then Locate , 30: Print "LANCE HAFFNER GAMES SCOREBOARD"
            End If

        End If

        Color 15

        If TMT = 0 Then
            Locate 10, 28: Print "NO OTHER GAMES SCHEDULED"
        Else
            If Q = 1 And gameClock! < 900 And gameClock! >= 600 Then timeInterval = 1
            If Q = 1 And gameClock! < 600 And gameClock! >= 300 Then timeInterval = 2
            If Q = 1 And gameClock! < 300 Then timeInterval = 3

            If Q = 2 And gameClock! < 900 And gameClock! >= 600 Then timeInterval = 4
            If Q = 2 And gameClock! < 600 And gameClock! >= 300 Then timeInterval = 5
            If Q = 2 And gameClock! < 300 Then timeInterval = 6

            If Q = 3 And gameClock! < 900 And gameClock! >= 600 Then timeInterval = 9
            If Q = 3 And gameClock! < 600 And gameClock! >= 300 Then timeInterval = 10
            If Q = 3 And gameClock! < 300 Then timeInterval = 11

            If Q = 4 And gameClock! < 900 And gameClock! >= 600 Then timeInterval = 12
            If Q = 4 And gameClock! < 600 And gameClock! >= 300 Then timeInterval = 13
            If Q = 4 And gameClock! < 300 Then timeInterval = 14

            If Q = 5 And gameClock! < 900 And gameClock! >= 600 Then timeInterval = 15
            If Q = 5 And gameClock! < 600 And gameClock! >= 300 Then timeInterval = 16
            If Q = 5 And gameClock! < 300 Then timeInterval = 17

            If halfTime = 1 Then timeInterval = 8

            If Left$(SX$(1, 0), 3) <> "XXX" Then
                Locate 2, 1
                X = 1
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(1, 0), 13);
                Locate , 15
                Print Using "## "; SX%(1, 0, tickInterval);
                Print R$(tickInterval)

                Print Left$(SX$(1, 1), 13);
                Locate , 15: Print Using "## #"; SX%(1, 1, tickInterval)
            End If

            If Left$(SX$(2, 0), 3) <> "XXX" Then
                Locate 5, 1
                X = 2
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(2, 0), 13);
                Locate , 15: Print Using "## "; SX%(2, 0, tickInterval);
                Print R$(tickInterval)

                Print Left$(SX$(2, 1), 13);
                Locate , 15: Print Using "## #"; SX%(2, 1, tickInterval)
            End If

            If Left$(SX$(3, 0), 3) <> "XXX" Then
                Locate 8, 1
                X = 3
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(3, 0), 13);
                Locate , 15: Print Using "## "; SX%(3, 0, tickInterval);
                Print R$(tickInterval)

                Print Left$(SX$(3, 1), 13);
                Locate , 15: Print Using "## #"; SX%(3, 1, tickInterval)
            End If

            If Left$(SX$(4, 0), 3) <> "XXX" Then
                Locate 11, 1
                X = 4
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(4, 0), 13);
                Locate , 15: Print Using "## "; SX%(4, 0, tickInterval);
                Print R$(tickInterval)

                Print Left$(SX$(4, 1), 13);
                Locate , 15: Print Using "## #"; SX%(4, 1, tickInterval)
            End If

            If Left$(SX$(5, 0), 3) <> "XXX" Then
                Locate 14, 1
                X = 5
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(5, 0), 13);
                Locate , 15: Print Using "## "; SX%(5, 0, tickInterval);
                Print R$(tickInterval)

                Print Left$(SX$(5, 1), 13);
                Locate , 15: Print Using "## #"; SX%(5, 1, tickInterval)
            End If

            If Left$(SX$(6, 0), 3) <> "XXX" Then
                Locate 17, 1
                X = 6
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(6, 0), 13);
                Locate , 15: Print Using "## "; SX%(6, 0, tickInterval);
                Print R$(tickInterval)

                Print Left$(SX$(6, 1), 13);
                Locate , 15: Print Using "## #"; SX%(6, 1, tickInterval)
            End If

            If Left$(SX$(7, 0), 3) <> "XXX" Then
                Locate 20, 1
                X = 7
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(7, 0), 13);
                Locate , 15: Print Using "## "; SX%(7, 0, tickInterval);
                Print R$(tickInterval)

                Print Left$(SX$(7, 1), 13);
                Locate , 15: Print Using "## #"; SX%(7, 1, tickInterval)
            End If

            If Left$(SX$(8, 0), 3) <> "XXX" Then
                Locate 23, 1
                X = 8
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(8, 0), 13);
                Locate , 15: Print Using "## "; SX%(8, 0, tickInterval);
                Print R$(tickInterval)

                Print Left$(SX$(8, 1), 13);
                Locate , 15: Print Using "## #"; SX%(8, 1, tickInterval);
            End If

            If Left$(SX$(9, 0), 3) <> "XXX" Then
                Locate 2, 21
                X = 9
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(9, 0), 13);
                Locate , 35: Print Using "## "; SX%(9, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(9, 1), 13);
                Locate , 35: Print Using "## #"; SX%(9, 1, tickInterval)
            End If

            If Left$(SX$(10, 0), 3) <> "XXX" Then
                Locate 5, 21
                X = 10
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(10, 0), 13);
                Locate , 35: Print Using "## "; SX%(10, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(10, 1), 13);
                Locate , 35: Print Using "## #"; SX%(10, 1, tickInterval)
            End If

            If Left$(SX$(11, 0), 3) <> "XXX" Then
                Locate 8, 21
                X = 11
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(11, 0), 13);
                Locate , 35: Print Using "## "; SX%(11, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(11, 1), 13);
                Locate , 35: Print Using "## #"; SX%(11, 1, tickInterval)
            End If

            If Left$(SX$(12, 0), 3) <> "XXX" Then
                Locate 11, 21
                X = 12
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(12, 0), 13);
                Locate , 35: Print Using "## "; SX%(12, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(12, 1), 13);
                Locate , 35: Print Using "## #"; SX%(12, 1, tickInterval)
            End If

            If Left$(SX$(13, 0), 3) <> "XXX" Then
                Locate 14, 21
                X = 13
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(13, 0), 13);
                Locate , 35: Print Using "## "; SX%(13, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(13, 1), 13);
                Locate , 35: Print Using "## #"; SX%(13, 1, tickInterval)
            End If

            If Left$(SX$(14, 0), 3) <> "XXX" Then
                Locate 17, 21
                X = 14
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(14, 0), 13);
                Locate , 35: Print Using "## "; SX%(14, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(14, 1), 13);
                Locate , 35: Print Using "## #"; SX%(14, 1, tickInterval)
            End If

            If Left$(SX$(15, 0), 3) <> "XXX" Then
                Locate 20, 21
                X = 15
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(15, 0), 13);
                Locate , 35: Print Using "## "; SX%(15, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(15, 1), 13);
                Locate , 35: Print Using "## #"; SX%(15, 1, tickInterval)
            End If

            If Left$(SX$(16, 0), 3) <> "XXX" Then
                Locate 23, 21
                X = 16
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(16, 0), 13);
                Locate , 35: Print Using "## "; SX%(16, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(16, 1), 13);
                Locate , 35: Print Using "## #"; SX%(16, 1, tickInterval);
            End If

            If Left$(SX$(17, 0), 3) <> "XXX" Then
                Locate 2, 41
                X = 17
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(17, 0), 13);
                Locate , 55: Print Using "## "; SX%(17, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(17, 1), 13);
                Locate , 55: Print Using "## #"; SX%(17, 1, tickInterval)
            End If

            If Left$(SX$(18, 0), 3) <> "XXX" Then
                Locate 5, 41
                X = 18
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(18, 0), 13);
                Locate , 55: Print Using "## "; SX%(18, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(18, 1), 13);
                Locate , 55: Print Using "## #"; SX%(18, 1, tickInterval)
            End If

            If Left$(SX$(19, 0), 3) <> "XXX" Then
                Locate 8, 41
                X = 19
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(19, 0), 13);
                Locate , 55: Print Using "## "; SX%(19, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(19, 1), 13);
                Locate , 55: Print Using "## #"; SX%(19, 1, tickInterval)
            End If

            If Left$(SX$(20, 0), 3) <> "XXX" Then
                Locate 11, 41
                X = 20
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(20, 0), 13);
                Locate , 55: Print Using "## "; SX%(20, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(20, 1), 13);
                Locate , 55: Print Using "## #"; SX%(20, 1, tickInterval)
            End If

            If Left$(SX$(21, 0), 3) <> "XXX" Then
                Locate 14, 41
                X = 21
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(21, 0), 13);
                Locate , 55: Print Using "## "; SX%(21, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(21, 1), 13);
                Locate , 55: Print Using "## #"; SX%(21, 1, tickInterval)
            End If

            If Left$(SX$(22, 0), 3) <> "XXX" Then
                Locate 17, 41
                X = 22
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(22, 0), 13);
                Locate , 55: Print Using "## "; SX%(22, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(22, 1), 13);
                Locate , 55: Print Using "## #"; SX%(22, 1, tickInterval)
            End If

            If Left$(SX$(23, 0), 3) <> "XXX" Then
                Locate 20, 41
                X = 23
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(23, 0), 13);
                Locate , 55: Print Using "## "; SX%(23, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(23, 1), 13);
                Locate , 55: Print Using "## #"; SX%(23, 1, tickInterval)
            End If

            If Left$(SX$(24, 0), 3) <> "XXX" Then
                Locate 23, 41
                X = 24
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(24, 0), 13);
                Locate , 55: Print Using "## "; SX%(24, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(24, 1), 13);
                Locate , 55: Print Using "## #"; SX%(24, 1, tickInterval);
            End If

            If Left$(SX$(25, 0), 3) <> "XXX" Then
                Locate 2, 61
                X = 25
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(25, 0), 13);
                Locate , 75: Print Using "## "; SX%(25, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(25, 1), 13);
                Locate , 75: Print Using "## #"; SX%(25, 1, tickInterval)
            End If

            If Left$(SX$(26, 0), 3) <> "XXX" Then
                Locate 5, 61
                X = 26
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(26, 0), 13);
                Locate , 75: Print Using "## "; SX%(26, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(26, 1), 13);
                Locate , 75: Print Using "## #"; SX%(26, 1, tickInterval)
            End If

            If Left$(SX$(27, 0), 3) <> "XXX" Then
                Locate 8, 61
                X = 27
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(27, 0), 13);
                Locate , 75: Print Using "## "; SX%(27, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(27, 1), 13);
                Locate , 75: Print Using "## #"; SX%(27, 1, tickInterval)
            End If

            If Left$(SX$(28, 0), 3) <> "XXX" Then
                Locate 11, 61
                X = 28
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(28, 0), 13);
                Locate , 75: Print Using "## "; SX%(28, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(28, 1), 13);
                Locate , 75: Print Using "## #"; SX%(28, 1, tickInterval)
            End If

            If Left$(SX$(29, 0), 3) <> "XXX" Then
                Locate 14, 61
                X = 29
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(29, 0), 13);
                Locate , 75: Print Using "## "; SX%(29, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(29, 1), 13);
                Locate , 75: Print Using "## #"; SX%(29, 1, tickInterval)
            End If

            If Left$(SX$(30, 0), 3) <> "XXX" Then
                Locate 17, 61
                X = 30
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(30, 0), 13);
                Locate , 75: Print Using "## "; SX%(30, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(30, 1), 13);
                Locate , 75: Print Using "## #"; SX%(30, 1, tickInterval)
            End If

            If Left$(SX$(31, 0), 3) <> "XXX" Then
                Locate 20, 61
                X = 31
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(31, 0), 13);
                Locate , 75: Print Using "## "; SX%(31, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(31, 1), 13);
                Locate , 75: Print Using "## #"; SX%(31, 1, tickInterval)
            End If

            If Left$(SX$(32, 0), 3) <> "XXX" Then
                Locate 23, 61
                X = 32
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(32, 0), 13);
                Locate , 75: Print Using "## "; SX%(32, 0, tickInterval);
                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(32, 1), 13);
                Locate , 75: Print Using "## #"; SX%(32, 1, tickInterval);
            End If

        End If

        I$ = GetKeyPress$

    End If

    Screen , , 0, 0

End Sub


'----------------------------------------
'          TickerTime Function
'----------------------------------------
'This subroutine determines which of the
'pre-determined time intervals the ticker
'display should be using.
Function TickerTime% (timeInterval, X)

    Shared tickerStart

    tickerIdx = timeInterval + (tickerStart - ST%(X)) * 3

    If tickerIdx < 0 Then tickerIdx = 0
    If tickerIdx > 14 Then tickerIdx = 14
    If endGame = 1 Then tickerIdx = 14

    TickerTime% = tickerIdx

End Function


'----------------------------------------
'        TICKERUPDATE Subroutine
'----------------------------------------
'This subroutine calculates the updated
'scores for the ticker games.
Sub TICKERUPDATE ()

    'Should this be <= 31???
    If AP = 1 And AP%(2) <= 32 Then

        If Q = 1 And gameClock! <= 600 And SX%(AP%(2) + 1, 0, 1) = -1 Then SX%(AP%(2) + 1, 0, 1) = S(0, 0): SX%(AP%(2) + 1, 1, 1) = S(1, 0)
        If Q = 1 And gameClock! <= 300 And SX%(AP%(2) + 1, 0, 2) = -1 Then SX%(AP%(2) + 1, 0, 2) = S(0, 0): SX%(AP%(2) + 1, 1, 2) = S(1, 0)

        If Q = 2 And gameClock! <= 600 And SX%(AP%(2) + 1, 0, 4) = -1 Then SX%(AP%(2) + 1, 0, 4) = S(0, 0): SX%(AP%(2) + 1, 1, 4) = S(1, 0)
        If Q = 2 And gameClock! <= 300 And SX%(AP%(2) + 1, 0, 5) = -1 Then SX%(AP%(2) + 1, 0, 5) = S(0, 0): SX%(AP%(2) + 1, 1, 5) = S(1, 0)

        If Q > 2 And SX%(AP%(2) + 1, 0, 3) = -1 Then SX%(AP%(2) + 1, 0, 3) = S(0, 1): SX%(AP%(2) + 1, 1, 3) = S(1, 1)
        If Q > 2 And SX%(AP%(2) + 1, 0, 6) = -1 Then For I2 = 6 To 8: SX%(AP%(2) + 1, 0, I2) = S(0, 2) + S(0, 1): SX%(AP%(2) + 1, 1, I2) = S(1, 2) + S(1, 1): Next

        If Q = 3 And gameClock! <= 600 And SX%(AP%(2) + 1, 0, 9) = -1 Then SX%(AP%(2) + 1, 0, 9) = S(0, 0): SX%(AP%(2) + 1, 1, 9) = S(1, 0)
        If Q = 3 And gameClock! <= 300 And SX%(AP%(2) + 1, 0, 10) = -1 Then SX%(AP%(2) + 1, 0, 10) = S(0, 0): SX%(AP%(2) + 1, 1, 10) = S(1, 0)

        If Q > 3 And SX%(AP%(2) + 1, 0, 11) = -1 Then SX%(AP%(2) + 1, 0, 11) = S(0, 3) + S(0, 2) + S(0, 1): SX%(AP%(2) + 1, 1, 11) = S(1, 3) + S(1, 2) + S(1, 1)

        If Q = 4 And gameClock! <= 600 And SX%(AP%(2) + 1, 0, 12) = -1 Then SX%(AP%(2) + 1, 0, 12) = S(0, 0): SX%(AP%(2) + 1, 1, 12) = S(1, 0)
        If Q = 4 And gameClock! <= 300 And SX%(AP%(2) + 1, 0, 13) = -1 Then SX%(AP%(2) + 1, 0, 13) = S(0, 0): SX%(AP%(2) + 1, 1, 13) = S(1, 0)

        SX%(AP%(2) + 1, 0, 14) = S(0, 0)
        SX%(AP%(2) + 1, 1, 14) = S(1, 0)

    End If

End Sub


'----------------------------------------
'       TickerSchedule Subroutine
'----------------------------------------
'This subroutine reads in the scores from
'the ticker and uses them to update the
'corresponding schedule file.
Sub TickerSchedule ()

    Shared scheduleFile$

    If AP%(2) <= 32 Then

        For X = 0 To 1: SX$(AP%(2) + 1, X) = A$(X): Next

        Open "TICKER" For Output As #2

        For I = 1 To 32:
            For I1 = 0 To 1:
                For I2 = 1 To 14
                    Print #2, SX%(I, I1, I2)
                Next
            Next
        Next

        For I = 1 To 32:
            For I1 = 0 To 1:
                Print #2, SX$(I, I1)
            Next
        Next

        For I = 1 To 32:
            Print #2, ST%(I)
        Next

        Close 2

    End If

    Open diskPaths$(0) + scheduleFile$ As #1 Len = 52

    For X = 0 To 20
        Field #1, X * 2 As X$, 2 As Q$(X + 1), 52 - 2 - 2 * X As X$
    Next

    Field #1, 42 As X$, 3 As Q$(22), 3 As Q$(23), 2 As Q$(24), 2 As Q$(25)

    NG%(13) = 1

    For X = 0 To 20: LSet Q$(X + 1) = MKI$(NG%(X)): Next

    For X = 0 To 1: LSet Q$(22 + X) = YN$(X): Next

    LSet Q$(24) = MKI$(S(0, 0))
    LSet Q$(25) = MKI$(S(1, 0))

    Put #1, AP%(0) + AP%(2)

    Close 1

    AP%(2) = AP%(2) + 1

    AP = 1

End Sub


'----------------------------------------
'            SCOUT Subroutine
'----------------------------------------
'This subroutine makes some sort of adj-
'ustments to each team, but it's still not
'clear why it's called "SCOUT"
Sub SCOUT ()

    For I = 0 To 1

        I2 = 0
        I3 = 0
        I4 = 0
        I5 = 0
        I6 = 0

        For I1 = 0 To 9
            If A2(I, I1) <> 0 Then I2 = A2(I, I1): I3 = 0
        Next I1

        For I1 = 0 To 9
            If I1 = 0 Then K3(I, 3) = K3(I, 3) + A2(I, I1) * A3(I, I1): K3(I, 3) = K3(I, 3) + A5(I, I1) * (A4(I, I1) - I2)
            If I1 > 0 And I1 < 10 And A2(I, I1) <> 0 Then K3(I, 3) = K3(I, 3) + A3(I, I1) * (A2(I, I1) - I3)
            If I1 > 0 And I1 < 6 And A4(I, I1) <> 0 Then K3(I, 3) = K3(I, 3) + A5(I, I1) * (A4(I, I1) - I6)
            If A2(I, I1) <> 0 Then I3 = A2(I, I1)
            If A4(I, I1) <> 0 Then I6 = A4(I, I1)
        Next I1

        K3(I, 3) = Int((K3(I, 3) * 3) / 100)

        I2 = 0
        I3 = 0
        I6 = 0

        For I1 = 0 To 9
            If A(I, I1) <> 0 Then I4 = A(I, I1): I5 = 0
        Next I1

        For I1 = 0 To 9
            If I1 = 0 Then K3(I, 0) = K3(I, 0) + A(I, I1) * A1(I, I1): I2 = I2 + A6(I, I1) * A7(I, I1): I3 = I3 + A6(I, I1) * A8(I, I1)
            If I1 > 0 And A(I, I1) <> 0 Then K3(I, 0) = K3(I, 0) + A1(I, I1) * (A(I, I1) - I5)
            If I1 > 0 And I1 < 4 And A6(I, I1) <> 0 Then I2 = I2 + A7(I, I1) * (A6(I, I1) - I6): I3 = I3 + A8(I, I1) * (A6(I, I1) - I6)
            If A(I, I1) <> 0 Then I5 = A(I, I1)
            If A6(I, I1) <> 0 Then I6 = A6(I, I1)
        Next I1

        If I = 0 Then I1 = 1
        If I = 1 Then I1 = 0

        K3(I, 0) = ((K3(I, 0) * 3) / 100) + ((B6(I1, 0)) * 3): ' HAD (B6()+1)*3
        K3(I, 0) = Int(K3(I, 0) + .5) / 10
        K3(I, 1) = Int((I2 / 100) + B6(I1, 1) + .5)
        K3(I, 2) = Int((I3 / 100) - B6(I1, 2) + .5)
        K3(I, 4) = (B3(I, 0) * 2) + 28
        K3(I, 5) = (B4(I, Q7%(I)) * 5) + 25
        K3(I, 6) = B7(I, Q7%(I))

        XE = YC(I1) / 100

        If XE < .5 Then XD(I1) = Int(XE * 30)
        If XE > .5 Then XD(I1) = Int(((1 - XE) * 30) * -1)

        I4 = I

        If I4 = H% Then

            K3(I4, 0) = K3(I4, 0) + .3
            K3(I4, 1) = K3(I4, 1) + 3

        Else

            If H% <> 2 Then
                K3(I4, 0) = K3(I4, 0) - .3
                K3(I4, 1) = K3(I4, 1) - 3
            End If

        End If

    Next I

End Sub


'----------------------------------------
'          HALFSTART Subroutine
'----------------------------------------
'This subroutine resets the game parameters
'for a new half: yard line, possession,
'new set of downs, timeouts, etc. 
Sub HALFSTART ()

    'Team to Kick/Receive
    P1 = W%
    D = 1

    If P1 = D Then D = 0

    'Timeouts
    T1(0) = 3
    T1(1) = 3

    'Yds / Yds To Go
    Y = 35
    YT = 65

    '1st and 10
    D1 = 1
    Y1 = 10
    YF = -Y1

    If G9 <> 0 And intY8% < 0 Then Y = 40: YT = 60
    If G9 = 1 And Y8 = 3 Or G9 = 4 Then Y = 30: YT = 70
    If G9 = 0 And Y9 = 0 Then Y = 40: YT = 60

End Sub


'----------------------------------------
'           KICKER Subroutine
'----------------------------------------
'This subroutine gives the user a choice
'of kicker for a kicking attempt.
Sub KICKER ()

    Color , 1
    Cls

    Call OPTIONBOX(10)

    Locate , 31: Print "SELECT KICKER": Print
    Locate , 18
    Print " # NAME            FG%  %ATT  EP%  %ATT"

    For I = 0 To 1

        If A7$(I3, I) <> "XXX" And A7$(I3, I) <> "END" And A7$(I3, I) <> "" Then
            Locate , 18
            Print I; "-"; A7$(I3, I);
            Locate , 36
            Print Using " ###   ###  ###   ###"; B4(I3, I) * 5 + 25, B5(I3, I), B7(I3, I), B8(I3, I)
        End If

        Locate , 1

    Next I

    Print

    Locate , 19: Print "SELECT (0-1) ";

    Do
        I$ = GetKeyPress$
        choice = Val(I$)
    Loop Until choice = 0 Or choice = 1

    Q7%(I3) = choice

End Sub


'----------------------------------------
'           PLACEPBP Subroutine
'----------------------------------------
'This subroutine is used to position the
'Play-by-Play text in the screen, taking
'care to center the text as well.
Sub PLACEPBP ()

    U$ = Left$(U$, 76)

    '-- I never knew the color for this
    '-- was supposed to be variable?
    '-- The value of BW is always 0.
    '-- See DISPWEATHER/SETSCREEN as examples.
    Color 14 - 7 * BW, 1 - BW

    Locate 22, 3

    Print String$(74, 46);

    Locate 22, 39 - Len(U$) / 2

    Print " "; U$; " ";

    'Print #9, U$

End Sub


'----------------------------------------
'         DISPWEATHER Subroutine
'----------------------------------------
'This subroutine displays the current
'weather and wind conditions
Sub DISPWEATHER ()

    '-- I never knew the color for this
    '-- was supposed to be variable?
    '-- The value of BW is always 0.
    '-- See PLACEPBP/SETSCREEN for examples.
    Color 15 * 1 - BW, 2 + 5 * BW

    Locate 7, 20
    
    Print "WIND: ";

    If WX%(1) = 0 Then Print "NONE ";
    If WX%(1) = -7 Then Print "LIGHT ";
    If WX%(1) = -15 Then Print "STRONG ";

    If WX%(1) <> 0 Then
        If WX%(0) = P1 Then
            Print "+";
        Else
            Print "-";
        End If
    End If

    Locate , 40
    Print "WEATHER: ";

    If WX%(4) = 0 Then Print "GOOD"
    If WX%(4) = -3 Then Print "RAIN/SNOW"
    If WX%(4) = -6 Then Print "DOWNPOUR/BLIZZARD"

End Sub


'----------------------------------------
'         CHANGEPOSS Subroutine
'----------------------------------------
'This subroutine literally just swaps the
'indicators as to which team in the arrays
'is defense and which is on offense.
Sub CHANGEPOSS ()

    Swap P1, D

End Sub


'----------------------------------------
'          SETSCREEN Subroutine
'----------------------------------------
'This subroutine essentially draws the
'football field and scoreboard on a fresh 
'graphic screen. It has been gutted to
'create the DisplayField routine as one
'that is separate.
Sub SETSCREEN ()

    Screen , , 0, 0

    Color 0, 0, 0

    Cls

    '-- I never knew the color for this
    '-- was supposed to be variable?
    '-- The value of BW is always 0.
    '-- See PLACEPBP/DISPWEATHER as examples.
    Color 15, 1 + BW * 6

    Print

    'Converted these Chr$ statements so the graphics
    'are preserved in any text editor
    Print Chr$(219); String$(38, 223)
    Print Chr$(219)
    Print Chr$(219)
    Print Chr$(219)

    Call DisplayField

End Sub


'----------------------------------------
'        DisplayField Subroutine
'----------------------------------------
'This subroutine draws the football field 
'and scoreboard.
Sub DisplayField ()

    Locate 2, 40
    Color 1 + BW * 6, 0
    Print Chr$(220)

    Color 15 * (1 - BW), 1 + BW * 6

    Locate 3, 2, 0
    Print String$(22, 32); "1  2  3  4   T   ";

    For I = 0 To 1
        Locate I + 4, 2
        Print "  ";

        Color PA%(I, 2), PA%(I, 1)
        Print A$(I);

        Color 15 * (1 - BW), 1 + BW * 6
        Print Tab(36);

        Locate I + 4, 23

        ' Previously read as Q + (Q = 5)
        For J = 1 To Q 'as in, return 0 or 1 based on value of Q / OT
            Print Using "## "; S(I, J);
        Next J

        Locate , 35
        Print Using "###   "; S(I, 0);
    Next I

    Locate 4 + P1, 3
    Print "*";

    Locate 5 - P1, 3
    Print " ";

    Color 0, 1 + BW * 6
    Locate 6, 1

    Print Chr$(219); String$(39, 220);
    Color 15, 4 + BW * 3

    Locate 2, 43
    Print Chr$(219); String$(36, 223);

    Locate 3, 43
    Print Chr$(219);

    Locate 4, 43
    Print Chr$(219);

    Locate 5, 43
    Print Chr$(219);

    Locate 2, 80
    Color 0: Print Chr$(223);

    Call YARDLINE

    Color 15 * (1 - BW)
    Color 15 * (1 - BW), 4 + BW * 3
    TI = gameClock!
    TI = TI + TI * (TI < 0)
    I = Int(TI / 60)
    J = TI - I * 60

    Call TICKERUPDATE

    Locate 3, 44: Print Using " TIME: ##.##     QUARTER: # "; I + J / 100, Q;
    Locate 3, 53: Print ":";: Locate , 72: Print Tab(80); " ";

    Locate 4, 44: Print Using " DOWN: #"; D1;: Print Tab(60);
    Print Using " TO GO: ##.#"; Y1;: Print Tab(80); " ";

    Locate 5, 44: Print " BALL ON ";
    If Y <= 50 Then
        Print "OWN";
    Else
        Print "OPP";
    End If

    Print Using " ##.# YD LINE "; YL;
    Print Tab(80); " ";
    Locate 6, 44

    Color 0, 4 + BW * 3: Print String$(37, 220);
    Color 15 * (1 - BW), 2 + 5 * BW

    For I = 7 To 19:
        Locate I, 1
        Print String$(80, 32);
    Next I

    Call DISPWEATHER

    'Replaced special characters with Chr$ references
    'This keeps modern text editors from messing things up

    'Print top row yard markers
    Color 15 * (1 - BW), 2 + 5 * BW
    Locate 8, 4
    Print Chr$(218) + String$(3, 196);

    For II = 1 To 21
        Print String$(2, 196) + Chr$(194);
    Next

    Print String$(5, 196) + Chr$(191);

    'Print end zones and major yard markers
    F$ = Chr$(179) + String$(5, 176)

    For II = 1 To 20
        F$ = F$ + Chr$(179) + "  "
    Next

    F$ = F$ + Chr$(179) + String$(5, 176) + Chr$(179)

    For II = 9 To 17
        Locate II, 4
        Print F$
    Next

    'Print bottom row yard markers
    Locate 18, 4
    Print Chr$(192) + String$(5, 196);

    For II = 1 To 21
        Print Chr$(193) + String$(2, 196);
    Next

    Print String$(3, 196) + Chr$(217);

    'Print minor yard markers
    For II = 10 To 67 Step 3
        For J = 1 To 2
            Locate 11, II + J
            Print Chr$(34);
            Locate 16, II + J
            Print Chr$(34);
        Next
    Next

    'Print major yard numbers
    For II = 1 To 9
        For J = 9 To 17 Step 8
            Locate J, II * 6 + 9
            Print Using "#" + Chr$(179) + "0"; II + 2 * (II - 5) * (II > 5);
        Next
    Next

    'Print play-by-play box
    Locate 19, 1: Print Tab(79)
    
    Color 14 - 7 * BW, 1 - BW
    Locate 20, 1: Print String$(80, 32);
    Locate 21, 1: Print Chr$(219); String$(78, 223); Chr$(219);
    Locate 22, 1: Print Chr$(219) + " "; String$(76, 46); " " + Chr$(219);
    Locate 23, 1: Print Chr$(219); String$(78, 220); Chr$(219);

End Sub


'----------------------------------------
'          YARDLINE Subroutine
'----------------------------------------
'This subroutine calculates the yardline
'for the ball. This is needed because our
'variables for tracking position only use
'yards to endzone.
Sub YARDLINE ()

    YL = YT - (YT > 50) * (100 - YT - YT)

End Sub


'----------------------------------------
'          GOALLINE Subroutine
'----------------------------------------
'This subroutine calculates the yardage
'gains / loss from a play against the
'goalline defense
Sub GOALLINE ()

    ' *** GOAL LINE DEFENSE ***
    Call d100(I6)

    If D2 > 3 And D2 < 6 Then

        Select Case Y

            Case 94.999 To 95.998

                Select Case I6
                    Case 1 To 14: G = 6
                    Case 15 To 17: G = 4
                    Case 18 To 29: G = 3
                    Case 30 To 43: G = 2
                    Case 44 To 63: G = 1
                    Case 64 To 77: G = 0
                    Case 78 To 84: G = -1
                    Case 85 To 91: G = -2
                    Case 92 To 98: G = -3
                    Case 99 To 100: G = -4
                End Select

            Case 95.999 To 96.998

                Select Case I6
                    Case 1 To 29: G = 5
                    Case 30 To 31: G = 3
                    Case 32 To 45: G = 2
                    Case 46 To 72: G = 1
                    Case 73 To 86: G = 0
                    Case 87 To 90: G = -1
                    Case 91: G = -2
                    Case 92 To 94: G = -3
                    Case 95 To 97: G = -4
                    Case 98 To 100: G = -5
                End Select

            Case 96.999 To 97.998

                Select Case I6
                    Case 1 To 24: G = 4
                    Case 25 To 28: G = 2
                    Case 29 To 69: G = 1
                    Case 70 To 85: G = 0
                    Case 86 To 88: G = -1
                    Case 89 To 93: G = -2
                    Case 94 To 100: G = -4
                End Select

            Case 97.999 To 98.998

                Select Case I6
                    Case 1 To 43: G = 3
                    Case 44 To 65: G = 1
                    Case 66 To 83: G = 0
                    Case 84 To 92: G = -1
                    Case 93 To 94: G = -2
                    Case 95 To 100: G = -4
                End Select

            Case Is >= 98.999
                Select Case I6
                    Case 1 To 57: G = 2
                    Case 58 To 74: G = 0
                    Case 75 To 83: G = -1
                    Case 84 To 90: G = -2
                    Case 91 To 97: G = -3
                    Case 98 To 100: G = -4
                End Select

        End Select

    Else

        Select Case Y

            Case 94.999 To 95.998

                Select Case I6
                    Case 1 To 17: G = 6
                    Case 18 To 22: G = 4
                    Case 23 To 35: G = 3
                    Case 36 To 52: G = 2
                    Case 53 To 76: G = 1
                    Case 77 To 93: G = 0
                    Case 94 To 100: G = -1
                End Select

            Case 95.999 To 96.998

                Select Case I6
                    Case 1 To 26: G = 5
                    Case 27 To 29: G = 3
                    Case 30 To 49: G = 2
                    Case 50 To 78: G = 1
                    Case 79 To 94: G = 0
                    Case 95 To 100: G = -1
                End Select

            Case 96.999 To 97.998

                Select Case I6
                    Case 1 To 27: G = 4
                    Case 28 To 32: G = 2
                    Case 33 To 80: G = 1
                    Case 81 To 98: G = 0
                    Case 99 To 100: G = -1
                End Select

            Case 97.999 To 98.998

                Select Case I6
                    Case 1 To 46: G = 3
                    Case 47 To 72: G = 1
                    Case 73 To 91: G = 0
                    Case 92 To 100: G = -1
                End Select

            Case Is >= 98.999

                Select Case I6
                    Case 1 To 61: G = 2
                    Case 62 To 96: G = 0
                    Case 97 To 100: G = -1
                End Select

        End Select

    End If

    Call d100(I6)

    If I2 <= 30 Then
        'Added this to avoid scenarios
        'where the rushing average from
        'OTHERS was negative, therefore
        'leading to a negative index
        If I2 <= 0 Then I2 = 1

        If I6 <= GL%(I2, 1) Then G = G + GL%(I2, 2)

    Else
        'I2 > 30
        'Given how I2 is calculated (based on Rushing Avg),
        'it is not clear how you get a value this high
        If I6 <= GL%(30, 1) Then G = G + GL%(30, 2)

    End If

End Sub


'----------------------------------------
'          FINDSPACE Subroutine
'----------------------------------------
'This subroutine simply looks to see if
'there is a space in the team name. The
'position in the string is tracked with
'variables I2 / I3 for other routines
'to reference. The purpose is to help
'trim extra space from the end of the
'player / team strings. That makes this 
'routine obsolete with the built-in 
'TRIM functions for strings.
Sub FINDSPACE ()

    I2 = 1
    I3 = 2

    Do

        mid1$ = Mid$(X$, I2, I2)
        mid2$ = Mid$(X$, I3, I3)

        If Asc(mid1$) <> 32 Or Asc(mid2$) <> 32 Then

            I2 = I2 + 1
            I3 = I2 + 1

            If I3 = 13 Then I3 = 12

        End If

    Loop Until I2 = 13 Or I2 = Len(X$) Or Asc(mid1$) = 32 Or Asc(mid2$) = 32

End Sub


'----------------------------------------
'          NAMEEDIT Subroutine
'----------------------------------------
'This subroutine trims all the spaces from
'team names, mascot names and player names.
Sub NAMEEDIT ()

    For I = 0 To 1

        A$(I) = RTrim$(A$(I))
        AA$(I) = RTrim$(AA$(I))

        For I1 = 0 To 9:
            A1$(I, I1) = RTrim$(A1$(I, I1))
        Next I1

        For I1 = 0 To 5:
            A2$(I, I1) = RTrim$(A2$(I, I1))
        Next I1

        For I1 = 0 To 3:
            A3$(I, I1) = RTrim$(A3$(I, I1))
        Next I1

        For I1 = 0 To 2:
            A4$(I, I1) = RTrim$(A4$(I, I1))
        Next I1

        For I1 = 0 To 2:
            A5$(I, I1) = RTrim$(A5$(I, I1))
        Next I1

        A6$(I, 0) = RTrim$(A6$(I, 0))

        For I1 = 0 To 1:
            A7$(I, I1) = RTrim$(A7$(I, I1))
        Next I1

        For I1 = 0 To 14:
            DS$(I, I1) = RTrim$(DS$(I, I1))
        Next I1

        For I1 = 0 To 9
            DI$(I, I1) = RTrim$(DI$(I, I1))
        Next I1

    Next I

End Sub


'----------------------------------------
'          SCOUTREPT Subroutine
'----------------------------------------
'This subroutine clears the screen so it
'can print a quick scouting report
Sub SCOUTREPT ()

    Call OPTIONBOX(13)
    Locate 8, 30: Print "SCOUTING REPORT"

    Locate 10, 30
    Color PA%(0, 2), PA%(0, 1): Print A$(0);

    Color 0, 7
    Locate , 52
    Color PA%(1, 2), PA%(1, 1): Print A$(1)

    Color 0, 7
    Print
    Locate , 12
    Print "RUSH AVG.";
    Locate , 34: Print Using "#.#"; K3(0, 0);
    Locate , 56: Print Using "#.#"; K3(1, 0)

    Locate , 12: Print "FUM %";
    Locate , 34: Print B6(0, 3) + B6(1, 4);
    Locate , 56: Print B6(1, 3) + B6(0, 4)

    Locate , 12: Print "COMP %";
    Locate , 34: Print K3(0, 1);
    Locate , 56: Print K3(1, 1)

    Locate , 12: Print "INT %";
    Locate , 34: Print K3(0, 2);
    Locate , 56: Print K3(1, 2)

    Locate , 12: Print "AVG/COMP";
    Locate , 34: Print Using "##.#"; K3(0, 3) + XD(1);
    Locate , 56: Print Using "##.#"; K3(1, 3) + XD(0)

    Locate , 12: Print "PUNT AVG";
    Locate , 34: Print K3(0, 4);
    Locate , 56: Print K3(1, 4)

    Locate , 12: Print "FG % ";
    Locate , 34: Print K3(0, 5);
    Locate , 56: Print K3(1, 5)

    Locate , 12: Print "EP % ";
    Locate , 34: Print K3(0, 6);
    Locate , 56: Print K3(1, 6)

    Locate , 12: Print "SACKED %";
    Locate , 34: Print B6(0, 5) + B6(1, 6);
    Locate , 56: Print B6(1, 5) + B6(0, 6)

    Locate , 12: Print "RUN/PASS %";
    Locate , 34: Print B6(0, 7);
    Locate , 56: Print B6(1, 7)

    Locate 12, 38: If K3(0, 0) - (B6(1, 0) * .3) > 4.5 And B6(0, 7) < 50 Then Print "*";
    Locate 12, 60: If K3(1, 0) - (B6(0, 0) * .3) > 4.5 And B6(1, 7) < 50 Then Print "*";

    Locate 16, 38: If K3(0, 3) >= 18 Then Print "*";
    Locate 16, 60: If K3(1, 3) >= 18 Then Print "*";

    I$ = GetKeyPress$

End Sub


'----------------------------------------
'          ADDBACKS Subroutine
'----------------------------------------
'This subroutine populates running backs
'to the list of receivers.
Sub ADDBACKS ()

    For I = 0 To 1

        For I1 = 0 To 9

            For I2 = 0 To 3

                If A1$(I, I1) = A3$(I, I2) Then
                    K2(I, I1, 0) = K2(I, I1, 0) + K2(I, I2 + 10, 0)
                    K2(I, I1, 1) = K2(I, I1, 1) + K2(I, I2 + 10, 1)
                    K2(I, I1, 2) = K2(I, I1, 2) + K2(I, I2 + 10, 2)
                    K2(I, I2 + 10, 0) = 0
                    K2(I, I2 + 10, 1) = 0
                    K2(I, I2 + 10, 2) = 0
                End If

            Next I2

        Next I1

    Next I

End Sub


'----------------------------------------
'           ONSIDE Subroutine
'----------------------------------------
'This subroutine handles the resolution of
'an onside kick and the associated text in
'the Play-by-Play
Sub ONSIDE ()

    Call d100(X)

    U$ = A7$(P1, Q7%(P1)) + " IS PLACING THE BALL ON THE TEE"
    Call PBP

    If X <= 50 Then
        U$ = A$(P1) + " IS LINING UP FOR THE KICKOFF"
    Else
        U$ = AA$(P1) + " ARE LINING UP FOR THE KICKOFF"
    End If

    Call PBP

    U$ = "IT'S AN ONSIDE KICK!!"
    Call PBP

    Swap P1, D

    I = (Rnd(1) * 21) + 5
    Y = Y + I
    G = I

    Call AddPossessionTime(4, 7)

    If Int(G * 10 + .5) / 10 < 9.95 Then
        U$ = "BALL DID NOT TRAVEL 10 YDS"
        Call PBP
        Y = 100 - Y
    Else
        I = (Rnd(1) * 100) + 1
        If I <= 78 Then
            U$ = A$(P1) + " RECOVERS"
            Call PBP
            Y = 100 - Y
        Else
            U$ = A$(D) + " RECOVERS !!!"
            Call PBP
            Call CHANGEPOSS
        End If
    End If

End Sub


'----------------------------------------
'         INCOMPLETE Subroutine
'----------------------------------------
'This subroutine develops the Play-by-play
'text string for an incomplete pass.
Sub INCOMPLETE ()

    Call QBTHROW

    Call d100(RN)

    If RN > 10 Then

        Call d100(RN)

        If RN > 60 Then

            Call d100(RN)

            Select Case P2

                Case 13
                    Select Case RN
                        Case 1 To 40: U$ = "BUT THE SCREEN FALLS INCOMPLETE"
                        Case 41 To 55: U$ = "BUT THE SCREEN IS BROKEN UP"
                        Case 56 To 60: U$ = "BUT " + RV$ + " CAN'T HANDLE THE PASS"
                        Case 61 To 100: U$ = "BUT THE PASS IS OVERTHROWN AND INCOMPLETE"
                    End Select

                Case 12
                    Select Case RN
                        Case 1 To 15: U$ = "BUT THE PASS IS BROKEN UP"
                        Case 16 To 44: U$ = "BUT THE PASS IS OVERTHROWN"
                        Case 45 To 74: U$ = "BUT " + RV$ + " CAN'T GET TO THE BALL...INCOMPLETE"
                        Case 75 To 80: U$ = "PASS IS ALMOST PICKED OFF!!...INCOMPLETE"
                        Case 81 To 100: U$ = "BUT " + RV$ + " IS COVERED...INCOMPLETE"
                    End Select

                Case Else
                    Select Case RN
                        Case 1 To 23: U$ = "BUT THE PASS FALLS INCOMPLETE"
                        Case 24 To 47: U$ = "BUT THE PASS IS THROWN BEHIND " + RV$ + "...INCOMPLETE"
                        Case 48 To 70: U$ = "BUT THE PASS IS OVERTHROWN AND INCOMPLETE"
                        Case 71 To 75: U$ = RV$ + " CAN'T HANDLE THE PASS...INCOMPLETE"
                        Case 76 To 81: U$ = "BUT THE PASS IS BATTED DOWN AT THE LINE OF SCRIMMAGE"
                        Case 82 To 96: U$ = "BUT THE PASS TO " + RV$ + " IS BROKEN UP"
                        Case 97 To 199: U$ = "THE PASS IS BROKEN UP AND ALMOST PICKED OFF!!"
                    End Select

            End Select

        Else

            RN = Int(Rnd(1) * 26) + 1

            Select Case RN
                Case 1: U$ = RV$ + " DROPS A PASS RIGHT TO HIM"
                Case 2: U$ = RV$ + " IS HIT AND CAN'T HANG ON....INCOMPLETE PASS"
                Case 3: U$ = RV$ + " BROKE THE WRONG WAY...INCOMPLETE"
                Case 4: U$ = RV$ + " DROPS IT!"
                Case 5: U$ = "DROPPED BY " + RV$
                Case 6: U$ = "BUT " + RV$ + " CAN'T REACH IT"
                Case 7: U$ = RV$ + " CAN'T HAUL IT IN...INCOMPLETE"
                Case 8: U$ = RV$ + " MISHANDLES IT....INCOMPLETE"
                Case 9: U$ = RV$ + " JUGGLES IT....INCOMPLETE"
                Case 10: U$ = RV$ + " CAN'T FIND THE HANDLE....INCOMPLETE"
                Case 11: U$ = RV$ + " CAN'T PULL IT IN....INCOMPLETE"
                Case 12: U$ = RV$ + " BOBBLES IT....INCOMPLETE"
                Case 13: U$ = RV$ + " WAS OUT OF BOUNDS....INCOMPLETE"
                Case 14: U$ = RV$ + " CAME DOWN OUT OF BOUNDS....INCOMPLETE"
                Case 15: U$ = "THE PASS IS BROKEN UP"
                Case 16: U$ = "BUT " + RV$ + " CAN'T HANDLE THE PASS"
                Case 17: U$ = "BUT THE PASS IS OVERTHROWN"
                Case 18: U$ = "BUT " + RV$ + " CAN'T GET TO THE BALL...INCOMPLETE"
                Case 19: U$ = "PASS IS ALMOST PICKED OFF!!...INCOMPLETE"
                Case 20: U$ = "BUT " + RV$ + " IS COVERED...INCOMPLETE"
                Case 21: U$ = "BUT THE PASS FALLS INCOMPLETE"
                Case 22: U$ = "BUT THE PASS IS THROWN BEHIND " + RV$ + "...INCOMPLETE"
                Case 23: U$ = RV$ + " CAN'T HANDLE THE PASS...INCOMPLETE"
                Case 24: U$ = "BUT THE PASS IS BATTED DOWN AT THE LINE OF SCRIMMAGE"
                Case 25: U$ = "BUT THE PASS TO " + RV$ + " IS BROKEN UP"
                Case 26: U$ = "THE PASS IS BROKEN UP AND ALMOST PICKED OFF!!"
            End Select

        End If

    Else

        ' ***PASS BROKEN UP ***
        RN = Int(Rnd(1) * 6) + 1
        Select Case RN
            Case 1: U$ = "PASS IS BROKEN UP"
            Case 2: U$ = "PASS IS TIPPED AWAY"
            Case 3: U$ = "PASS IS KNOCKED AWAY"
            Case 4: U$ = "PASS IS KNOCKED DOWN"
            Case 5: U$ = "PASS IS DEFLECTED"
            Case 6: U$ = "PASS IS BATTED AWAY"
        End Select

        'Handle an interception
        If intDI%(1 - P1) > 0 Then 
            Call FINDINT
            U$ = U$ + " BY " + X$
        End If

    End If

    Call PBP

End Sub

'----------------------------------------
'           QBSNEAK Subroutine
'----------------------------------------
'This subroutine handles the yard gain and
'Play-by-Play text for a QB sneak.
Sub QBSNEAK ()

    ' *** QB SNEAK ***
    U$ = A3$(P1, Q6%(P1)) + " KEEPS IT ON THE SNEAK"

    Call PBP

    Call d100(I4)

    If (D3 = 11 Or D3 = 7 Or D3 = 9) Then

        If I4 <= 20 Then
            G = (Int(Rnd(1) * 6) - 3) / 10
        Else
            G = (Int(Rnd(1) * 7) + 3) / 10
        End If

    Else

        Select Case D2

            Case 11
                If I4 <= 40 Then
                    G = (Int(Rnd(1) * 6) - 3) / 10
                Else
                    G = (Int(Rnd(1) * 7) + 3) / 10
                End If

            Case 1, 2

                Select Case I4
                    Case 1 To 10
                        G = (Int(Rnd(1) * 6) - 3) / 10

                    Case 11 To 80
                        G = (Int(Rnd(1) * 7) + 3) / 10

                    Case 81 To 100
                        G = Int(Rnd(1) * 2) + 1
                End Select

            Case 3, 4
                If I4 <= 30 Then
                    G = (Int(Rnd(1) * 6) - 3) / 10
                Else
                    G = (Int(Rnd(1) * 7) + 3) / 10
                End If

            Case 5, 6
                If I4 <= 15 Then
                    G = (Int(Rnd(1) * 6) - 3) / 10
                Else
                    G = (Int(Rnd(1) * 7) + 3) / 10
                End If

            Case 7 To 10
                Select Case I4
                    Case 1 To 10
                        G = (Int(Rnd(1) * 6) - 3) / 10

                    Case 11 To 80
                        G = (Int(Rnd(1) * 7) + 3) / 10

                    Case 81 To 100
                        G = Int(Rnd(1) * 2) + 1

                End Select

        End Select

    End If

    U$ = "HE GAINS"
    I1 = QB
    X = 4
    X1 = 9
    R1 = 1

    If Int((G + Y) * 10 + .5) / 10 >= 99.94999 Then
        U$ = U$ + Str$(Int(100 - Y))
    Else
        U$ = U$ + Str$(Int((G) * 10 + .5) / 10)
    End If

    U$ = U$ + " YARDS ON THE PLAY"
    Call PBP

End Sub


'----------------------------------------
'           OVERUSE Subroutine
'----------------------------------------
'This subroutine attempts to adjust the
'opponents response to a play that is
'being overused.
Sub OVERUSE ()

    If K(P1, 1) + K(P1, 3) <> 0 Then

        If (K(P1, 1) / (K(P1, 1) + K(P1, 3))) < (B6(P1, 7) / 100) And K3(P1, 3) >= 18 Then I4 = I4 * .65

        If I4 <= 0 Then I4 = 1

    End If

End Sub


'----------------------------------------
'           BLITZ Subroutine
'----------------------------------------
'This subroutine determines the yardage
'gains for a blitz defense for when a
'pass will be completed.
Sub BLITZ ()

    Call d100(I5)
    XE = YC(D) / 100

    If XE <= .5 Then
        XE = Int(XE * 100 + .5)
        If XE > 21 Then XE = 21
        If XE < 1 Then XE = 1
        If I5 <= PS%(1, XE) Then I4 = I4 + PS%(2, XE)
    Else
        XE = Int((1 - XE) * 100 + .5)
        If XE > 21 Then XE = 21
        If XE < 1 Then XE = 1
        If I5 <= PS%(1, XE) Then I4 = I4 - PS%(2, XE)
    End If

    Call d100(RN)
    If QX%(P1, Q6%(P1)) > 20 Then QX%(P1, Q6%(P1)) = 20
    If QX%(P1, Q6%(P1)) < -20 Then QX%(P1, Q6%(P1)) = -20

    QX = QX%(P1, Q6%(P1))

    If QX <> 0 Then

        If QX < 0 Then QX = QX * -1

        If RN <= QR%(QX, 1) Then
            If QX%(P1, Q6%(P1)) > 0 Then
                I4 = I4 + QR%(QX, 2)
            Else
                I4 = I4 - QR%(QX, 2)
            End If
        End If

    End If

    Call OVERUSE
    I7 = 4

    altYdg% = 0

    Select Case P2
        Case 9
            I7 = 1

        Case 10
            I7 = 3
            If D3 = 9 Or D3 = 10 Then I8 = 21: Call BlitzYardageLong(I8): altYdg% = 1
            If D3 = 11 Then I8 = 25: Call BlitzYardageLong(I8): altYdg% = 1

        Case 11
            If D3 = 7 Or D3 = 8 Then I8 = 21: Call BlitzYardageLong(I8): altYdg% = 1
            If D3 = 9 Or D3 = 10 Then I8 = 25: Call BlitzYardageLong(I8): altYdg% = 1
            If D3 = 11 Then I8 = 28: Call BlitzYardageLong(I8): altYdg% = 1

        Case 12
            I7 = 5
            If D3 = 7 Or D3 = 8 Then I8 = 33: Call BlitzYardageLong(I8): altYdg% = 1
            If D3 >= 9 Then I8 = 42: Call BlitzYardageLong(I8): altYdg% = 1

        Case 13
            I7 = 2
            If D3 = 9 Or D3 = 10 Then I8 = 25: Call BlitzYardageLong(I8): altYdg% = 1
            If D3 = 11 Then I8 = 36: Call BlitzYardageLong(I8): altYdg% = 1

        Case 14
            If D3 = 7 Or D3 = 8 Then I8 = 25: Call BlitzYardageLong(I8): altYdg% = 1
            If D3 = 9 Or D3 = 10 Then I8 = 28: Call BlitzYardageLong(I8): altYdg% = 1
            If D3 = 11 Then I8 = 31: Call BlitzYardageLong(I8): altYdg% = 1

        Case 15
            I7 = 5
            If D3 >= 7 Then I8 = 42: Call BlitzYardageLong(I8): altYdg% = 1

        Case 16
            If D3 = 7 Or D3 = 8 Then I8 = 18: Call BlitzYardageLong(I8): altYdg% = 1
            If D3 = 9 Or D3 = 10 Then I8 = 28: Call BlitzYardageLong(I8): altYdg% = 1
            If D3 = 11 Then I8 = 33: Call BlitzYardageLong(I8): altYdg% = 1

        Case 17, 18
            If D3 = 7 Or D3 = 9 Then I8 = 21: Call BlitzYardageLong(I8): altYdg% = 1
            If D3 = 8 Then I8 = 25: Call BlitzYardageLong(I8): altYdg% = 1
            If D3 >= 10 Then I8 = 28: Call BlitzYardageLong(I8): altYdg% = 1

    End Select

    If altYdg% <> 1 Then

        I4 = I4 + S1%(2, P2 - 8, D3)

        If I4 > 10 Then I4 = 10
        If I4 < 1 Then I4 = 1

        Call d100(I9)

        For I = 1 To 14
            If I9 <= S2%(I7, I4, I) Then Exit For
        Next I

        'This calculates shorter gains after 
        'an unsuccessful blitz attempt.
        ' Yardage ranges from -4 to 101
        ' 50% chance of gains under 30
        Select Case I
            Case 1: G = Int(Rnd(1) * 5) - 4
            Case 2: G = Int(Rnd(1) * 3) + 1
            Case 3: G = Int(Rnd(1) * 4) + 4
            Case 4: G = Int(Rnd(1) * 8) + 8
            Case 5: G = Int(Rnd(1) * 5) + 16
            Case 6: G = Int(Rnd(1) * 5) + 21
            Case 7: G = Int(Rnd(1) * 5) + 26
            Case 8: G = Int(Rnd(1) * 11) + 30
            Case 9: G = Int(Rnd(1) * 11) + 40
            Case 10: G = Int(Rnd(1) * 11) + 50
            Case 11: G = Int(Rnd(1) * 11) + 60
            Case 12: G = Int(Rnd(1) * 11) + 70
            Case 13: G = Int(Rnd(1) * 11) + 80
            Case 14: G = Int(Rnd(1) * 11) + 90
        End Select

    End If

End Sub


'----------------------------------------
'      BlitzYardageLong Subroutine
'----------------------------------------
'This subroutine calculates longer gains 
'from a play after an unsuccessful blitz
'attempt.
'Yardage ranges from 31 to 101
Sub BlitzYardageLong (I8)

    ' *** BLITZ ***
    Select Case I8
        Case 18: G = Int(Rnd(1) * 21) + 10
        Case 21: G = Int(Rnd(1) * 31) + 10
        Case 25: G = Int(Rnd(1) * 41) + 10
        Case 28: G = Int(Rnd(1) * 51) + 10
        Case 31: G = Int(Rnd(1) * 41) + 20
        Case 33: G = Int(Rnd(1) * 71) + 10
        Case 36: G = Int(Rnd(1) * 91) + 10
        Case 42: G = Int(Rnd(1) * 71) + 30
        Case Else: G = G + (I4 - 4) * 3
    End Select

End Sub


'----------------------------------------
'           BLITZ2 Subroutine
'----------------------------------------
'This is another routine for calculating
'blitz yardage gains.
Sub BLITZ2 ()

    Call d100(I4)

    Select Case I2

        Case Is <= 15

            Select Case I4

                Case 1 To 15
                    G = Int(Rnd(1) * 5) - 4

                Case 16 To 60
                    G = Int(Rnd(1) * 2) + 1

                Case 61 To 100
                    G = Int(Rnd(1) * (I2 * 2.22)) + 1

            End Select

        Case 16, 17

            Select Case I4

                Case 1 To 10
                    G = Int(Rnd(1) * 5) - 4

                Case 11 To 50
                    G = Int(Rnd(1) * 2) + 1

                Case 51 To 100
                    G = Int(Rnd(1) * (I2 * 1.78)) + 1

            End Select

        Case 18, 19

            Select Case I4

                Case 1 To 10
                    G = Int(Rnd(1) * 5) - 4

                Case 11 To 40
                    G = Int(Rnd(1) * 2) + 1

                Case 41 To 100
                    G = Int(Rnd(1) * (I2 * 1.54)) + 1

            End Select

        Case 20, 21

            Select Case I4

                Case 1 To 5
                    G = Int(Rnd(1) * 5) - 4

                Case 6 To 30
                    G = Int(Rnd(1) * 2) + 1

                Case 31 To 100
                    G = Int(Rnd(1) * (I2 * 1.32)) + 1

            End Select

        Case Else

            Select Case I4

                Case 1 To 5
                    G = Int(Rnd(1) * 5) - 4

                Case 6 To 20
                    G = Int(Rnd(1) * 2) + 1

                Case 21 To 100
                    G = Int(Rnd(1) * (I2 * 1.2)) + 1

            End Select

    End Select

End Sub


'----------------------------------------
'          COMPCHEAT Subroutine
'----------------------------------------
'This subroutine appears to help the comp-
'uter team pick a more useful defense that
'is based on the chosen offense. But that
'is somewhat a guess.
Sub COMPCHEAT ()

    D3 = 1

    R0 = Int(Rnd(1) * 4) + 1
    Call d100(I3)

    If R0 = 2 Then
        
        Select Case P2

            Case 1, 2, 6, 8
                If I3 <= 50 Then
                    D2 = 3
                Else
                    D2 = 4
                End If

            Case 3, 4, 5, 7
                D2 = 2

            Case 9, 10, 13
                D3 = 3

            Case 11, 14
                If I3 <= 50 Then
                    D3 = 3
                Else
                    D3 = 5
                End If

            Case 12, 15
                D3 = 1

            Case 16
                D3 = 2

            Case Is >= 17
                D3 = 3

        End Select

    End If

End Sub


'----------------------------------------
'           PBPRINT Subroutine
'----------------------------------------
'This subroutine handles the Play-by-play
'text for an interceptions
Sub PBPINT ()

    U$ = ""

    If intDS%(D) <> 0 Then

        M5 = 0
        RN = Int(Rnd(1) * DDS(D)) + 1

        For Z1 = 0 To 14
            M5 = M5 + DS(D, Z1)
            If RN <= M5 Then U$ = DS$(D, Z1) + " OF ": Exit For
        Next

    End If

End Sub


'----------------------------------------
'        CheckGameClock Subroutine
'----------------------------------------
'This subroutine looks to see if the clock
'has expired and adjust the play time and
'possession based on time that was left on
'the clock.
Sub CheckGameClock ()

    If gameClock! <= 0 Then

        TE = gameClock!
        timePoss(P1) = timePoss(P1) + TE
        gameClock! = 0

    End If

End Sub


'----------------------------------------
'           DEFENSE Subroutine
'----------------------------------------
'This subroutine appears to determine the
'defense to call bed on the game clock
'and yardage situation.
Sub DEFENSE ()

    skipY90% = 0

    If Not (Q = 2 And gameClock! <= 120) Or Not (Q >= 4 And gameClock! <= 120) Then

        Select Case D1

            Case 1
                If Y1 > 10 Then
                    Call d100(R0)
                    D2 = 1
                    D3 = 2

                    Select Case R0

                        Case 1 To 5
                            D2 = 9
                            Call d100(RN)
                            Select Case RN
                                Case 1 To 45: D3 = 7
                                Case 46 To 90: D3 = 8
                                Case 91 To 95: D3 = 9
                                Case 96 To 100: D3 = 10
                            End Select

                        Case 6 To 20
                            D2 = 10
                            D3 = 3

                        Case 21 To 55
                            D2 = 1
                            D3 = 5

                        Case 56 To 90
                            D2 = 2

                        Case 91 To 95
                            D3 = 1

                    End Select

                End If

                If Y1 < 10 Then
                    '8867
                    Call d100(R0)
                    D2 = 1
                    D3 = 1
                    If R0 <= 50 Then
                        D2 = 2
                        D3 = 3
                    Else
                        D2 = 4
                    End If

                    skipY90% = 1

                End If

            Case 2
                If Y1 > 8 Then
                    Call d100(R0)
                    D2 = 1
                    D3 = 2

                    Select Case R0
                        Case 1 To 5
                            D2 = 9
                            Call d100(RN)
                            Select Case RN
                                Case 1 To 45: D3 = 7
                                Case 46 To 90: D3 = 8
                                Case 91 To 95: D3 = 9
                                Case 96 To 100: D3 = 10
                            End Select

                        Case 6 To 20
                            D2 = 10
                            D3 = 3

                        Case 21 To 55
                            D2 = 1
                            D3 = 5

                        Case 56 To 90
                            D2 = 2

                        Case 91 To 95
                            D3 = 1

                    End Select

                End If

                If Y1 < 5 Then
                    '8867
                    Call d100(R0)
                    D2 = 1
                    D3 = 1
                    If R0 <= 50 Then
                        D2 = 2
                        D3 = 3
                    Else
                        D2 = 4
                    End If

                    skipY90% = 1

                End If

            Case 3
                If Y1 >= 3 Then
                    Call d100(R0)
                    D2 = 1
                    D3 = 2

                    Select Case R0
                        Case 1 To 5
                            D2 = 9
                            Call d100(RN)
                            Select Case RN
                                Case 1 To 45: D3 = 7
                                Case 46 To 90: D3 = 8
                                Case 91 To 95: D3 = 9
                                Case 96 To 100: D3 = 10
                            End Select

                        Case 6 To 20
                            D2 = 10
                            D3 = 3

                        Case 21 To 55
                            D2 = 1
                            D3 = 5

                        Case 56 To 90
                            D2 = 2

                        Case 91 To 95
                            D3 = 1

                    End Select

                Else
                    '8867
                    Call d100(R0)
                    D2 = 1
                    D3 = 1
                    If R0 <= 50 Then
                        D2 = 2
                        D3 = 3
                    Else
                        D2 = 4
                    End If

                    skipY90% = 1

                End If

            Case 4
                If Y >= 68 Then
                    If (Q = 4 And S(D, 0) - S(P1, 0) > 10) Or (Q >= 3 And S(D, 0) - S(P1, 0) > 21) Then
                        Call d100(R0)
                        D2 = 1
                        D3 = 2

                        Select Case R0
                            Case 1 To 5
                                D2 = 9
                                Call d100(RN)
                                Select Case RN
                                    Case 1 To 45: D3 = 7
                                    Case 46 To 90: D3 = 8
                                    Case 91 To 95: D3 = 9
                                    Case 96 To 100: D3 = 10
                                End Select

                            Case 6 To 20
                                D2 = 10
                                D3 = 3

                            Case 21 To 55
                                D2 = 1
                                D3 = 5

                            Case 56 To 90
                                D2 = 2

                            Case 91 To 95
                                D3 = 1

                        End Select

                    End If

                End If

                If Y1 >= 3 Then
                    Call d100(R0)
                    D2 = 1
                    D3 = 2

                    Select Case R0
                        Case 1 To 5
                            D2 = 9
                            Call d100(RN)
                            Select Case RN
                                Case 1 To 45: D3 = 7
                                Case 46 To 90: D3 = 8
                                Case 91 To 95: D3 = 9
                                Case 96 To 100: D3 = 10
                            End Select

                        Case 6 To 20
                            D2 = 10
                            D3 = 3

                        Case 21 To 55
                            D2 = 1
                            D3 = 5

                        Case 56 To 90
                            D2 = 2

                        Case 91 To 95
                            D3 = 1

                    End Select

                Else
                    '8867
                    Call d100(R0)
                    D2 = 1
                    D3 = 1
                    If R0 <= 50 Then
                        D2 = 2
                        D3 = 3
                    Else
                        D2 = 4
                    End If

                    skipY90% = 1

                End If

            Case Else
                Call d100(R0)

                If R0 <= B6(P1, 7) Then
                    Call d100(R0)
                    D2 = 1
                    D3 = 1
                    If R0 <= 50 Then
                        D2 = 2
                        D3 = 3
                    Else
                        D2 = 4
                    End If

                Else
                    Call d100(R0)
                    D2 = 1
                    D3 = 2

                    Select Case R0
                        Case 1 To 5
                            D2 = 9
                            Call d100(RN)
                            Select Case RN
                                Case 1 To 45: D3 = 7
                                Case 46 To 90: D3 = 8
                                Case 91 To 95: D3 = 9
                                Case 96 To 100: D3 = 10
                            End Select

                        Case 6 To 20
                            D2 = 10
                            D3 = 3

                        Case 21 To 55
                            D2 = 1
                            D3 = 5

                        Case 56 To 90
                            D2 = 2

                        Case 91 To 95
                            D3 = 1

                    End Select

                End If

        End Select

        If skipY90% <> 1 Then
            If Y >= 90 And D3 = 5 Or Y1 < 7 And D3 = 5 Then D3 = 3
        End If

    Else

        If S(P1, 0) - S(D, 0) <= 0 Then

            Call d100(R0)

            If R0 <= 50 Then
                D2 = Int(Rnd(1) * 3) + 4
            Else
                D2 = 3
            End If

            Call d100(R0)

            Select Case R0
                Case 1 To 33: D3 = 1
                Case 34 To 67: D3 = 2
                Case 68 To 100: D3 = 5
            End Select

        Else

            Call d100(R0)
            Call d100(RN)

            Select Case RN
                Case 1 To 50:
                    D2 = 1
                    If R0 <= 90 Then
                        D3 = 1
                    Else
                        D3 = 2
                    End If

                Case 51 To 70
                    D2 = 2
                    If R0 <= 90 Then
                        D3 = 1
                    Else
                        D3 = 2
                    End If

                Case 71 To 94
                    D2 = 3
                    If R0 <= 90 Then
                        D3 = 1
                    Else
                        D3 = 2
                    End If

                Case 95
                    D2 = 9
                    D3 = 10

                Case 96
                    D2 = 10
                    D3 = 9

                Case 97, 98
                    D2 = 9

                Case 99, 100
                    D2 = 10
                    D3 = 7

            End Select

        End If

    End If

End Sub


'----------------------------------------
'           MARKER Subroutine
'----------------------------------------
'This subroutine prints the yard line
'marker on the field
Sub MARKER ()

    If P1 Then J = FNP(YT) - 3 Else J = FNP(100 - YT) - 3

    Locate 13, 4

    '-- I never knew the color for this
    '-- was supposed to be variable?
    '-- The value of BW is always 0.
    '-- See PLACEPBP/DISPWEATHER as examples.
    Color 15 * (1 - BW), 2 + 5 * BW

    If J < WS Then

        Print Left$(F$, J - 1);
        Color 0: Print Chr$(16 + P1);
        Color 15 * (1 - BW): Print Mid$(F$, J + 1, WS - J - 1);
        Color 2 + 5 * BW, 7 * (1 - BW): Print Mid$(F$, WS, 7);
        Color 15 * (1 - BW), 2 + 5 * BW: Print Right$(F$, 67 - WS);

    Else

        If J > WE Then

            Print Left$(F$, WS - 1);
            Color 2 + 5 * BW, 7 * (1 - BW): Print Mid$(F$, WS, 7);
            Color 15 * (1 - BW), 2 + 5 * BW: Print Mid$(F$, WE + 1, J - WE - 1);
            Color 0: Print Chr$(16 + P1);
            Color 15 * (1 - BW), 2 + 5 * BW: Print Right$(F$, 73 - J);

        Else

            Print Left$(F$, WS - 1);
            Color 2 + 5 * BW, 7 * (1 - BW): Print Mid$(F$, WS, J - WS);
            Color BW * 15: Print Chr$(16 + P1);
            Color 2 + 5 * BW, 7 * (1 - BW): Print Mid$(F$, J + 1, WE - J);
            Color 15 * (1 - BW), 2 + 5 * BW: Print Right$(F$, 73 - WE);

        End If
    End If


End Sub


'----------------------------------------
'           MARKER1 Subroutine
'----------------------------------------
'This subroutine also has something to do
'with printing the yard marker. 
Sub MARKER1 ()

    YT = 100 - Y
    YF = -Y1

    If P1 Then
        WS = FNP(YT + YF) - 3
        WE = WS + 6
    Else
        WE = FNP(100 - YT - YF) - 3
        WS = WE - 6
    End If

    Call MARKER

End Sub


'----------------------------------------
'          MOVEBALL Subroutine
'----------------------------------------
'This subroutine handles the play-by-play
'text for after the ball has moved. With 
'that also comes Play-by-Play for the
'tackle / stop.
Sub MOVEBALL ()

    If pbpDelay! <> 0 Then

        I$ = "He's at "

        If EY <= SY Then

            For YT = SY To EY Step -1

                Call MARKER
                _Delay pbpDelay! / 20
                Call YARDLINE
                intYL% = YL

                If YT <= 0 Then
                    YT = EY
                Else
                    If Int(intYL% / 10) * 10 = intYL% Then
                        U$ = I$ + "the" + Str$(intYL%) + " yard line"
                        Call PLACEPBP
                        I$ = ""
                    End If
                End If

            Next YT

        Else

            For YT = SY To EY

                Call MARKER
                _Delay pbpDelay! / 20
                Call YARDLINE
                intYL% = YL

                If YT <= 0 Then
                    YT = EY
                Else
                    If Int(intYL% / 10) * 10 = intYL% Then
                        U$ = I$ + "the" + Str$(intYL%) + " yard line"
                        Call PLACEPBP
                        I$ = ""
                    End If
                End If

            Next YT

        End If

        If YT <= 0 Then
            YT = 0
        Else
            YT = YT + 1

            Call YARDLINE

            RN = Int(Rnd(1) * 21) + 1

            Select Case RN
                Case 1: I$ = " IS TACKLED"
                Case 2: I$ = " GOES OUT OF BOUNDS"
                Case 3: I$ = " IS HIT"
                Case 4: I$ = " GOES DOWN"
                Case 4: I$ = " IS GANG TACKLED"
                Case 5: I$ = " IS STOPPED"
                Case 6: I$ = " IS TRIPPED UP"
                Case 7: I$ = " IS WRAPPED UP"
                Case 8: I$ = " IS RIDDEN DOWN"
                Case 9: I$ = " IS LEVELED"
                Case 10: I$ = " IS PULLED DOWN"
                Case 11: I$ = " IS HAULED DOWN"
                Case 12: I$ = " IS FORCED OUT"
                Case 13: I$ = " IS SNOWED UNDER"
                Case 14: I$ = " IS THROWN DOWN"
                Case 15: I$ = " IS POPPED"
                Case 16: I$ = " IS SMACKED"
                Case 17: I$ = " IS SLAMMED"
                Case 18: I$ = " IS STOPPED"
                Case 19: I$ = " IS POPPED"
                Case 19: I$ = " STEPS OUT"
                Case 20: I$ = " IS PUSHED OUT"
                Case 21: I$ = " IS KNOCKED OUT OF BOUNDS"
            End Select

            If YT >= 100 Then
                U$ = "The ball carrier" + I$ + " for a" + Str$(Int(-Y)) + " yard loss"
            Else
                If YT > 0 Then
                    Call MARKER
                    U$ = "AND HE" + I$ + " AT THE" + Str$(Int(intYL%)) + " YARD LINE"
                End If

            End If

        End If

        If YT <> 0 Then Call PBP

    End If

End Sub


'----------------------------------------
'         SCOREBOARD Subroutine
'----------------------------------------
'This subroutine updates the scoreboard
'with the latest values for the clock, 
'and possession location.
Sub SCOREBOARD ()

    Screen , , 0, 0

    If Screen(2, 1) <> 219 Then
        Call SETSCREEN
        Call MARKER1
    Else

        YF = -Y1
        YT = 100 - Y

        '-- I never knew the color for this
        '-- was supposed to be variable?
        '-- The value of BW is always 0.
        '-- See PLACEPBP/DISPWEATHER as examples.
        Color 15 * (1 - BW), 1 + BW * 6
        Locate 4 + P1, 3

        'Print indicator of team with possession
        Print "*";: Locate 5 - P1, 3: Print " ";

        Call YARDLINE

        Color 15 * (1 - BW), 4 + BW * 3
        TI = gameClock!
        TI = TI + TI * (TI < 0)
        I = Int(TI / 60)

        Call TICKERUPDATE

        J = TI - I * 60

        Locate 3, 44: Print Using " TIME: ##.##     QUARTER: # "; I + J / 100, Q;
        Locate 3, 53: Print ":";
        Locate , 72: Print Tab(80); " ";

        Locate 4, 44: Print Using " DOWN: #"; D1;
        Print Tab(60);

        Print Using " TO GO: ##.#"; Y1;
        Print Tab(80); " ";

        Locate 5, 44: Print " BALL ON ";
        If Y <= 50 Then
            Print "OWN";
        Else
            Print "OPP";
        End If

        Print Using " ##.# YD LINE "; YL;
        Print Tab(80); " ";

    End If

End Sub


'----------------------------------------
'           DEFMENU Subroutine
'----------------------------------------
'This subroutine gives the user a menu for
'selecting their defensive choices.
Sub DEFMENU ()

    goodSelection% = 1

    If J6 = 1 And D = CT Or J6 = 2 Then

        Call DEFENSE
        Call DEFGOALLINE

    Else

        Do

            Call FRAMEOPTION(10, D)
            Print "SELECT DEFENSIVE LINE PLAY "; A$(D)

            For D2 = 1 To 5:
                Locate 11 + D2, 14
                Print D2 - 1; "- "; D2$(D2); Tab(41); D2 + 4; "- "; D2$(D2 + 5)
            Next D2

            Print
            Locate , 28: Print " G - GOAL LINE (5 YL AND IN)"

            Do
                I$ = GetKeyPress$

                If UCase$(I$) = "Q" Then Cls: End
                If UCase$(I$) = "G" And Y >= 94.999 Then
                    D2 = 11
                    Screen , , 0, 0
                    Exit Sub
                End If

                D2 = Val(I$)

            Loop Until D2 >= 0 And D2 <= 9 And UCase$(I$) <> "G"

            D2 = D2 + 1

            Screen , , 0, 0

            Select Case D2
                Case 5, 6
                    D2 = D2 + 4
                Case 7 To 10
                    D2 = D2 - 2
            End Select

            Call FRAMEOPTION(10, D)
            Print "SELECT PASS COVERAGE "; A$(D)

            For D3 = 1 To 5
                Locate 11 + D3, 14
                Print D3 - 1; "- "; D1$(D3); Tab(41); D3 + 4; "- "; D1$(D3 + 5)
            Next D3

            Locate , 41: Print " B - BLITZ ENGAGE"

            Do
                I$ = GetKeyPress$

                'Main loop condition
                If I$ <> Chr$(27) Then
                    If UCase$(I$) = "B" Then D3 = 10: Exit Do
                    D3 = Val(I$)
                End If

            Loop Until D3 >= 0 And D3 <= 9 Or I$ = Chr$(27)

            If I$ <> Chr$(27) Then
                ' 3065
                D3 = D3 + 1
                Screen , , 0, 0

                'More loop conditions
                If (D2 = 5 Or D2 = 6) And (D3 = 7 Or D3 = 9 Or D3 = 11) Then goodSelection% = 0
                If (D2 = 7 Or D2 = 8) And (D3 = 8 Or D3 = 10 Or D3 = 11) Then goodSelection% = 0

            End If

        Loop Until goodSelection% = 1

    End If

End Sub


'----------------------------------------
'         DEGFOALLINE Subroutine
'----------------------------------------
'This subroutine automatically picks a
'goal line defense when 5 yards are left.
Sub DEFGOALLINE ()

    If Y > 94.999 Then D2 = 11: D3 = 1

End Sub


'----------------------------------------
'            LGPBP Subroutine
'----------------------------------------
'This subroutine chooses the play-by-play
'text for the start of a play where any
'long gain has been calculated.
Sub LGPBP ()

    RN = Int(Rnd(1) * 20) + 1

    Select Case RN
        Case 1: U$ = "HE BREAKS FREE"
        Case 2: U$ = "HE DODGES A TACKLER"
        Case 3: U$ = "HE STIFF ARMS A TACKLER"
        Case 4: U$ = "HE HEADS DOWN THE SIDELINE"
        Case 5: U$ = "HE SEES DAYLIGHT"
        Case 6: U$ = "HE CUTS BACK"
        Case 7: U$ = "HE CUTS UPFIELD"
        Case 8: U$ = "HE CHARGES THROUGH A GAPING HOLE"
        Case 9: U$ = "HE MAY GO ALL THE WAY"
        Case 10: U$ = "HE BREAKS IT"
        Case 11: U$ = "HE TURNS IT ON"
        Case 12: U$ = "HE SHIFTS INTO HIGH GEAR"
        Case 13: U$ = "HE BREAKS IT BIG!!"
        Case 14: U$ = "HE BURSTS THROUGH"
        Case 15: U$ = "HE RUNS WILD"
        Case 16: U$ = "HE POPS A BIG ONE"
        Case 17: U$ = "HE BUSTS ONE"
        Case 18: U$ = "HE POPS THROUGH THERE"
        Case 19: U$ = "HE POPS OUT THERE"
        Case 20: U$ = "HE SEES A BREAK"
    End Select

    Call PBP

End Sub


'----------------------------------------
'          RUNTDPBP Subroutine
'----------------------------------------
'This subroutine generates the Play-by-Play
'for a rushing TD.
Sub RUNTDPBP ()

    RN = Int(Rnd(1) * 29) + 1

    Select Case RN
        Case 1: U$ = "HE BREAKS FREE"
        Case 2: U$ = "HE DODGES A TACKLER"
        Case 3: U$ = "HE STIFF ARMS A TACKLER"
        Case 4: U$ = "HE HEADS DOWN THE SIDELINE"
        Case 5: U$ = "HE SEES DAYLIGHT"
        Case 6: U$ = "HE CUTS BACK"
        Case 7: U$ = "HE CUTS UPFIELD"
        Case 8: U$ = "HE CHARGES THROUGH A GAPING HOLE"
        Case 9: U$ = "HE MAY GO ALL THE WAY"
        Case 10: U$ = "HE BREAKS IT"
        Case 11: U$ = "HE TURNS IT ON"
        Case 12: U$ = "HE SHIFTS INTO HIGH GEAR"
        Case 13: U$ = "HE BREAKS IT BIG!!"
        Case 14: U$ = "HE BURSTS THROUGH"
        Case 15: U$ = "HE RUNS WILD"
        Case 16: U$ = "HE POPS A BIG ONE"
        Case 17: U$ = "HE BUSTS ONE"
        Case 18: U$ = "HE POPS THROUGH THERE"
        Case 19: U$ = "HE POPS OUT THERE"
        Case 20: U$ = "HE SEES A BREAK"
        Case 21: U$ = "HE'S GONE!"
        Case 22: U$ = "NO ONE WILL CATCH HIM"
        Case 23: U$ = "SEE YOU LATER!!"
        Case 24: U$ = "HE GETS THE CORNER"
        Case 25: U$ = "HE COULD GO"
        Case 26: U$ = "HE'LL GO THE DISTANCE"
        Case 27: U$ = "THERE HE GOES!!"
        Case 28: U$ = "HE'LL GO ALL THE WAY"
        Case 29: U$ = "HE'S IN THE SECONDARY"
    End Select

    Call PBP

End Sub


'----------------------------------------
'         SETWEATHER Subroutine
'----------------------------------------
'This subroutine presents the user a menu
'that helps set the wind and weather options
Sub SETWEATHER ()

    If PA%(H%, 3) <> 1 Then

        Call SETSCREEN

        Call OPTIONBOX(9)

        Print "WEATHER OPTIONS "
        Locate 12, 14
        Locate , 14: Print "0 - GOOD"
        Locate , 14: Print "1 - BAD (RAIN/SNOW)"
        Locate , 14: Print "2 - TERRIBLE (BLIZZARD/HEAVY RAIN)"
        Locate , 14: Print "3 - COMPUTER SELECT"

        If AP = 1 Then
            'read weather from schedule options
            I2 = NG%(20)
        Else

            Do
                I$ = GetKeyPress$
                choice = Val(I$)
            Loop Until choice >= 1 And choice <= 3 Or I$ = "0"

        End If

        Screen , , 0, 0

        'If choice = 0 Then 200

        If choice = 1 Then WX%(4) = -3: WX%(5) = 1: WX%(6) = -10

        If choice = 2 Then WX%(4) = -6: WX%(5) = 2: WX%(6) = -20

        If choice = 3 Then
            I = Int(Rnd(1) * 22) + 1
            If I = 18 Then WX%(4) = -3: WX%(5) = 1: WX%(6) = -10
            If I = 7 Then WX%(4) = -6: WX%(5) = 2: WX%(6) = -20
        End If

        Call OPTIONBOX(9)

        Print "WIND OPTIONS "
        Locate 12, 14
        Locate , 14: Print "0 - NONE"
        Locate , 14: Print "1 - LIGHT TO MODERATE"
        Locate , 14: Print "2 - STRONG AND GUSTY"
        Locate , 14: Print "3 - COMPUTER SELECT"

        If AP = 1 Then
            choice = NG%(19)
        Else
            Do
                I$ = GetKeyPress$
                choice = Val(I$)
            Loop Until choice >= 0 And choice <= 3
        End If

        Screen , , 0, 0

        'If choice = 0 Then 299
        If choice = 1 Then WX%(1) = -7: WX%(2) = -5: WX%(3) = -10
        If choice = 2 Then WX%(1) = -15: WX%(2) = -15: WX%(3) = -30
        If choice = 3 Then
            I = Int(Rnd(1) * 22) + 1
            If I = 14 Then WX%(1) = -7: WX%(2) = -5: WX%(3) = -10
            If I = 3 Then WX%(1) = -15: WX%(2) = -15: WX%(3) = -30
        End If

    End If

End Sub


'----------------------------------------
'            FGATT Subroutine
'----------------------------------------
'This subroutine tracks and increments FG 
'attempts based on yardage increments for 
'the current kicker.
Sub FGATT ()

    DT = Int(117 + intY8% - Y + .5)

    Select Case DT

        Case 1 To 19
            FA(P1, Q7%(P1), 0) = FA(P1, Q7%(P1), 0) + 1

        Case 20 To 29
            FA(P1, Q7%(P1), 1) = FA(P1, Q7%(P1), 1) + 1

        Case 30 To 39
            FA(P1, Q7%(P1), 2) = FA(P1, Q7%(P1), 2) + 1

        Case 40 To 49
            FA(P1, Q7%(P1), 3) = FA(P1, Q7%(P1), 3) + 1

        Case Is >= 50
            FA(P1, Q7%(P1), 4) = FA(P1, Q7%(P1), 4) + 1

    End Select

End Sub


'----------------------------------------
'            FGMADESubroutine
'----------------------------------------
'This subroutine tracks and increments FG 
'made based on yardage increments for 
'the current kicker.
Sub FGMADE ()

    Select Case DT

        Case 1 To 19
            FM(P1, Q7%(P1), 0) = FM(P1, Q7%(P1), 0) + 1

        Case 20 To 29
            FM(P1, Q7%(P1), 1) = FM(P1, Q7%(P1), 1) + 1

        Case 30 To 39
            FM(P1, Q7%(P1), 2) = FM(P1, Q7%(P1), 2) + 1

        Case 40 To 49
            FM(P1, Q7%(P1), 3) = FM(P1, Q7%(P1), 3) + 1

        Case 50 To FL(P1, Q7%(P1))
            FM(P1, Q7%(P1), 4) = FM(P1, Q7%(P1), 4) + 1

        Case Is > FL(P1, Q7%(P1))
            FL(P1, Q7%(P1)) = DT

    End Select

End Sub


'----------------------------------------
'           OFFMENU Subroutine
'----------------------------------------
'This subroutine gives the user a menu for
'selecting their offensive choices.
Sub OFFMENU ()

    If E = 1 Then
        'E = 1 means play reached endzone ??
        'So we'd only be here if going for 2 ??
        Call d100(R0)
        Select Case R0
            Case 1 To 25: P2 = 17
            Case 26 To 50: P2 = 11
            Case 51 To 70: P2 = 10
            Case 71 To 80: P2 = 5
            Case 81 To 90: P2 = 4
            Case 91 To 100: P2 = 3
        End Select

    End If

    '4th Quarter
    'Any down, Less than 105 seconds to go, 0 Timeouts Opponent, Offense leading
    If Q = 4 And gameClock! <= 35 * (4 - D1) And T1(D) = 0 And S(P1, 0) > S(D, 0) Then
        'Select kicker
        P2 = 9
        R1 = 1
        QBN% = 1
    Else

        'If not inside 2 minute warning and past Own 40 Yd Line
        If Not (Q = 2 And gameClock! <= 120 And Y > 40 Or Q >= 4 And gameClock! <= 120) Then

            '4th Quarter+,
            '4th Down, Opponent's side of field, Score = Down by 11 or more
            If D1 = 4 And Q >= 4 And Y >= 50 And S(D, 0) - S(P1, 0) > 10 Then 8833

            '3rd Quarter+,
            '4th Down, Inside opponent's 45, Score = Down by 15 or more
            If D1 = 4 And Q >= 3 And Y >= 55 And S(D, 0) - S(P1, 0) > 14 Then 8833

            '4th Down, 1 Yd To Go, 3 Pt. Lead, Opponent's 32 to 38, Score Not Tied
            If D1 = 4 And Y1 <= 1 And S(P1, 0) - S(D, 0) <= 3 And S(P1, 0) - S(D, 0) > 0 And Y >= 62 + intY8% And Y <= 68 + intY8% Then 8827

            '4th Quarter+
            '---------------
            '4th Down, Opponent's 32 to 38, Score = 3 Pt. Margin, Pro Rules or College Rules + Team after 1960 = Field Goal
            If Q >= 4 And D1 = 4 And S(P1, 0) - S(D, 0) <= 3 And S(P1, 0) - S(D, 0) >= -3 And Y >= 62 + intY8% And Y < 68 + intY8% And (G9 <> 0 Or G9 = 0 And YR%(1) > 1960 And YR%(0) > 1960) Then P2 = 20: GoTo 8800

            '4th Down, Opponent's 32 to 38, Score <= 3 Pt. Lead, Pro Rules or College Rules + Team after 1960 = Field Goal
            If Q >= 4 And D1 = 4 And Y >= 62 + intY8% And Y < 68 + intY8% And S(D, 0) - S(P1, 0) <= 3 And (G9 <> 0 Or G9 = 0 And YR%(1) > 1960 And YR%(0) > 1960) Then P2 = 20: GoTo 8800

            '4th Down, <= 2 Yds to Go, Opponent's 25 - 35, Score - Down by 11 or more
            If Q >= 4 And Y >= 65 + intY8% And Y < 75 + intY8% And Y1 <= 2 And S(D, 0) - S(P1, 0) > 10 Then 8827

            '4th Down, <= 2 Yds to Go, Opponent's 25 - 35, Score - Down by 10 or less, 4 Minutes Remaining, Pro Rules or College Rules + Team after 1960 = Field Goal
            If Q >= 4 And Y >= 65 + intY8% And Y < 75 + intY8% And S(D, 0) - S(P1, 0) <= 10 And S(D, 0) - S(P1, 0) > 0 And D1 = 4 And gameClock! < 240 And (G9 <> 0 Or G9 = 0 And YR%(1) > 1960 And YR%(0) > 1960) Then P2 = 20: GoTo 8800



            '4th Quarter Only
            '---------------
            '4th Down, More Than 2 Minutes, Score - Down by 4 to 10, Inside Red Zone = Field Goal
            If D1 = 4 And Q = 4 And gameClock! > 240 And S(D, 0) - S(P1, 0) >= 4 And S(D, 0) - S(P1, 0) <= 10 And Y > 80 + intY8% Then P2 = 20: GoTo 8800

            '4th Down, Down by 4 or More, Inside Red Zone
            If D1 = 4 And Q = 4 And S(D, 0) - S(P1, 0) >= 4 And Y >= 80 + intY8% Then 8833


            'Any Quarter
            '---------------
            '4th Down, Any Time, <= 2 Yds to Go, Inside Opponent's 40
            If D1 = 4 And Y >= 60 And Y1 <= 2 Then 8827

            '4th Down, Any Time, >= 3 Yds To Go, Inside Opponent's 32, Pro Rules or College Rules + Team after 1960 = Field Goal
            If D1 = 4 And Y >= 68 + intY8% And Y1 > 2 And (G9 <> 0 Or G9 = 0 And YR%(1) > 1960 And YR%(0) > 1960) Then P2 = 20: GoTo 8800

            '4th Down, Any Time, Outside Opponent's 32 = Punt
            If D1 = 4 And Y < 68 + intY8% Then P2 = 19: GoTo 8800

            Call d100(R0)

            'Any Time, Inside Team's Own 8 Yd Line
            If Y <= 8 Then 8827

            '2nd Down, Any Time, <=12 Yds To Go
            If B6(P1, 7) > 75 And D1 = 2 And Y1 <= 12 Then 8827

            '3rd Down, Any Time, <= 5 Yds to Go
            If B6(P1, 7) > 75 And D1 = 3 And Y1 <= 5 Then 8827

            '1st or 2nd Down, Any Time
            If D1 = 1 And B6(P1, 7) >= 70 Or D1 <= 2 And B6(P1, 7) >= 80 Then 8827

            '1st Down, Any Time, >= 11 Yds To Go
            If D1 = 1 And Y1 > 10 Then 8833

            '2nd Down, Any Time, >= 11 Yds To Go
            If D1 = 2 And Y1 > 10 Then 8833

            '2nd Down, Any Time, <= 4 Yds to Go
            If D1 = 2 And Y1 < 5 Then 8827

            '3nd Down, Any Time, >= 4 Yds to Go
            If D1 = 3 And Y1 >= 4 Then 8833

            '3rd Down, Any Time, 1 Yds to Go
            If D1 = 3 And Y1 < 2 Then 8827

            '4th Down, Any Time, >= 4 Yds to Go
            If D1 = 4 And Y1 >= 4 Then 8833

            '4th Down, Any Time, 1 Yds To Go
            If D1 = 4 And Y1 < 2 Then 8827

            '4th Quarter
            '---------------
            'Less than 8 Minutes in Game
            'Either team is ahead by 9 or more pts
            If Q = 4 And gameClock! <= 480 And S(D, 0) - S(P1, 0) >= 9 And R0 >= B6(P1, 7) - B6(P1, 7) / 2 Then 8833
            If Q = 4 And gameClock! <= 480 And S(P1, 0) - S(D, 0) >= 9 And R0 >= B6(P1, 7) + B6(P1, 7) / 2 Then 8833


            If R0 > B6(P1, 7) Then 8833


            '----- DECISION BRANCH 1 -----
            8827 '
            If K(P1, 1) + K(P1, 3) <> 0 Then
                If K(P1, 1) / (K(P1, 1) + K(P1, 3)) > B6(P1, 7) / 100 And B6(P1, 7) < 50 Then 8833
            End If

            Call d100(R0)

            P2 = 1

            Select Case R0
                Case 1 To 2: If B6(P1, 7) < 75 Then P2 = 15
                Case 3 To 5: If B6(P1, 7) < 75 Then P2 = 14
                Case 6 To 10: P2 = 5
                Case 11 To 20: P2 = 4
                Case 21 To 30: P2 = 7
                Case 31 To 50: P2 = 3
                Case 51 To 70: P2 = 2
            End Select

            GoTo 8800



            '----- DECISION BRANCH 2 -----
            8833 '
            Call d100(R0)
            P2 = 10

            Select Case R0
                Case 1 To 5: P2 = 6
                Case 6 To 30: P2 = 17
                Case 31 To 36: P2 = 9
                Case 37 To 44: P2 = 13
                Case 45 To 63: P2 = 12
                Case 64 To 89: P2 = 11
            End Select

            '3rd / 4th Down, Any Time, >= 5 Yds To Go, Picked (P2 = 6) = Pass (???)
            If D1 >= 3 And Y1 >= 5 And P2 = 6 Then P2 = 12

            '3rd / 4th Down, Any Time, >= 5 Yds To Go, Picked (P2 = 10) = Pass (???)
            If D1 >= 3 And Y1 >= 5 And P2 = 10 Then P2 = 11

            '3rd / 4th Down, Any Time, >= 5 Yds To Go, Picked (P2 = 9 / 13) = Pass (???)
            If D1 >= 3 And Y1 >= 5 And (P2 = 13 Or P2 = 9) Then P2 = 17

            'Any Down, Any Time, Inside Opponent's 10, Picked (P2 = 12 | 15) ---Or--- < 7 Yds To Go and Picked (P2 = 12 | 15) = Pass (???)
            If Y > 90 And (P2 = 12 Or P2 = 15) Or Y1 < 7 And (P2 = 12 Or P2 = 15) Then P2 = 11

            GoTo 8800

        Else
            '2nd / 4th Quarter
            '2 Min Warning
            '--------------------

            'Score - Down by >= 4
            If S(D, 0) - S(P1, 0) > 3 Then
                If Q >= 4 Then 8880
                If Q = 2 Then 8885
            End If

            'Score Tied or Down
            If S(D, 0) - S(P1, 0) >= 0 Then 8885

            Call d100(R0)

            '2nd Quarter, Past Own 40 Yd Line
            If Y > 40 And Q = 2 Then 8885

            P2 = 4

            If R0 <= 60 Then P2 = 3

            '2nd Quarter / Overtime / 4th Quarter and Tied Score
            'Any down, Inside Opponent's 35, Less than 22 seconds to go = Field Goal
            If Y >= 65 + intY8% And gameClock! <= 22 And Q = 2 Or Y >= 65 + intY8% And gameClock! <= 22 And Q > 4 Or Y >= 65 + intY8% And gameClock! <= 22 And Q = 4 And S(P1, 0) - S(D, 0) = 0 Then P2 = 20

            '4th Down, Inside Opponent's 35, >= 1 Yard to go, Pro Rules or College Rules + Team after 1960 = Field Goal
            If Y >= 65 + intY8% And D1 = 4 And Y1 >= 2 And (G9 <> 0 Or G9 = 0 And YR%(1) > 1960 And YR%(0) > 1960) Then P2 = 20

            '4th Down, Outside Opponents' 35 = Punt
            If D1 = 4 And Y <= 65 + intY8% Then P2 = 19

        End If

        '----- DECISION MADE -----
        8880 '
        '2nd Quarter
        '4th Down, Any Time
        If Q = 2 And D1 = 4 Then

            If Y < 65 + intY8% Then
                'Outside Opponent's 35 = Punt
                P2 = 19
            Else
                'Inside Opponent's 35, Pro Rules, or College Rules + Team after 1960 = Field Goal
                '--- COMPARE A
                If (G9 <> 0 Or G9 = 0 And YR%(1) > 1960 And YR%(0) > 1960) Then
                    P2 = 20
                End If
            End If

            GoTo 8800

        End If

        'Any Quarter
        '---------------
        'Any Down, Less than 22 seconds to go, 0 Timeouts Offense = Pass
        If gameClock! <= 22 And T1(P1) = 0 Then P2 = 12: GoTo 8800

        'Any Down, Less than 12 sceonds to go, 1 or more timeouts Offense = Pass
        If gameClock! <= 12 And T1(P1) <> 0 Then P2 = 12: GoTo 8800

        GoTo 8892

        '-----

        8885 '
        '2nd / 4th Quarter
        '4th Down, Any Time, Outside Opponent's 35, Score Tied = Punt
        If Q = 2 And D1 = 4 And Y < 65 + intY8% Or Q >= 4 And Y < 65 + intY8% And S(P1, 0) = S(D, 0) And D1 = 4 Then P2 = 19: GoTo 8800


        '2nd Quarter Only
        '4th Down, Any Time, Inside Opponent's 35, Pro Rules or College Rules + Team after 1960 = FIeld Goal
        '--- COMPARE B
        If Q = 2 And D1 = 4 And Y >= 65 + intY8% And (G9 <> 0 Or G9 = 0 And YR%(1) > 1960 And YR%(0) > 1960) Then P2 = 20: GoTo 8800


        'Any Quarter
        '---------------
        'Any Down, Less than 37 seconds to go, 0 Timeouts Offense, Outside Opponent's 35 = Pass (???)
        If gameClock! <= 37 And T1(P1) = 0 And Y < 65 + intY8% Then P2 = 12: GoTo 8800

        'Any Down, Less than 22 seconds to go, 0 Timeouts Offense, Outside opponent's 35 = Pass
        If gameClock! <= 12 And T1(P1) <> 0 And Y < 65 + intY8% Then P2 = 12: GoTo 8800

        'Any Down, Less than 22 seconds to go, 0 Timeouts Offense, Inside Opponent's 35 = Field Goal
        If gameClock! <= 22 And T1(P1) = 0 And Y >= 65 + intY8% Then P2 = 20: GoTo 8800

        'Any Down, Less than 12 seconds to go, 0 Timeouts Offense, Inside Opponent's 35 = Field Goal
        '--- This is essentially the same as above ???
        If gameClock! <= 12 And T1(P1) <> 0 And Y >= 65 + intY8% Then P2 = 20: GoTo 8800

        '4th Down, Any Time, Inside Opponent's 35, Pro Rules or College Rules + Team after 1960 = Field Goal
        If D1 = 4 And Y >= 65 + intY8% And (G9 <> 0 Or G9 = 0 And YR%(1) > 1960 And YR%(0) > 1960) Then P2 = 20: GoTo 8800


        8892 '
        Call d100(R0)
        P2 = 16

        '50% random chance of Pass # 10-12
        If R0 < 50 Then P2 = Int(Rnd(1) * 3) + 10

        'Inside Opponent's 10 = Pass (???)
        If Y >= 90 Then P2 = 11

        'In the Red Zone, Score - Down by <3 ---or--- Inside Opponent's 10 and Down by 3 = (Random choice of run)
        If Y > 80 And S(D, 0) - S(P1, 0) < 3 Or Y > 90 And S(D, 0) - S(P1, 0) = 3 Then P2 = Int(Rnd(1) * 4) + 1

    End If


    'Final Checks
    '-----

    8800 '
    'Overtime and 4th Down
    If Q > 4 And NG%(14) = 3 And D1 = 4 Then

        'Punt chosen, Score Tied = Pass (what kind?)
        If P2 = 19 And S(D, 0) = S(P1, 0) Then P2 = 12

        'Punt or FG chosen, Down by 4 or more = Pass (what kind?)
        If (P2 = 19 Or P2 = 20) And S(D, 0) - S(P1, 0) > 3 Then P2 = 12

        'Punt chosen, Score - Down by 3 or less = Pass (what kind?)
        If P2 = 19 And S(D, 0) - S(P1, 0) <= 3 Then P2 = 12
    End If

End Sub


'----------------------------------------
'         MEASUREMENT Subroutine
'----------------------------------------
'This subroutine handles the play-by-play
'for when a measurement is done to check
'for first down.
Sub MEASUREMENT ()

    U$ = "HE'S CLOSE TO A FIRST DOWN"
    Call PBP

    U$ = "THE OFFICIAL SIGNALS FOR A MEASUREMENT"
    Call PBP
    Call PBP

    'Are these numbers accurate? I'm not confident they are
    'I believe we're converting these numbers as yards to
    'feet / inches???
    '1 yard = 36 inches
    Select Case G - Y1

        Case Is < -.2
            U$ = "HE'S ABOUT A FOOT SHORT"

        Case -0.20 To -0.11
            U$ = "HE'S ABOUT 6 INCHES SHORT"

        Case -0.10 To -0.01
            U$ = "HE'S SHORT BY INCHES"

        Case Else
            U$ = "THE OFFICIAL SIGNALS FIRST DOWN!"

    End Select

    Call PBP
    Call PBP

End Sub


'----------------------------------------
'        WHICHRECEIVER Subroutine
'----------------------------------------
'This subroutine determines which receiver
'to include in the Play-by-Play text
Sub WHICHRECEIVER

    If I3 > 9 Then U$ = U$ + A2$(P1, I3 - 10) Else U$ = U$ + A1$(P1, I3)

End Sub


'----------------------------------------
'          CLIPPING Subroutine
'----------------------------------------
'This subroutine handles the yardage and
'Play-by-Play for a clipping penalty.
Sub CLIPPING ()

    U$ = "*** PENALTY - 10 YD ILLEGAL BLOCK ON THE RETURN ***"
    Call PBP

    If Y < 20 Then
        Y = Y / 2
        K(P1, 12) = K(P1, 12) + Y / 2
    End If

    K(P1, 11) = K(P1, 11) + 1

    If Y >= 20 Then
        Y = Y - 10
        K(P1, 12) = K(P1, 12) + 10
    End If

End Sub


'----------------------------------------
'          CHANGEQB Subroutine
'----------------------------------------
'This subroutine gives the user a menu for
'choosing a quarterback and sets up the
'corresponding arrays for the game.
Sub CHANGEQB ()

    Color 15, 0
    Cls

    Call TEAMBOX(12, I3)

    RQ%(I3) = 0

    Locate , 31
    Print "SELECT QUARTERBACK"
    Print
    Locate , 18: Print " # QB NAME    % OF  COMP  INT"
    Locate , 18: Print "              ATTS  PCT   PCT  ARM"

    For I = 0 To 3

        If A3$(I3, I) <> "XXX" And A3$(I3, I) <> "END" And A3$(I3, I) <> "" Then

            If I = 0 Then

                Locate , 18: Print I; "-"; A3$(I3, I);
                Locate , 32
                If I = 0 Then
                    Print A6(I3, I);
                Else
                    Print Int(A6(I3, I)) - A6(I3, I - 1);
                End If

                Locate , 38: Print A7(I3, I);
                Locate , 44: Print A8(I3, I);
                Locate , 49: Print QX%(I3, I)

            Else

                If A6(I3, I - 1) < 100 Then

                    Locate , 18: Print I; "-"; A3$(I3, I);
                    Locate , 32

                    If I = 0 Then
                        Print A6(I3, I);
                    Else
                        Print Int(A6(I3, I)) - A6(I3, I - 1);
                    End If

                    Locate , 38: Print A7(I3, I);
                    Locate , 44: Print A8(I3, I);
                    Locate , 49: Print QX%(I3, I)

                End If

                Locate , 1

            End If

        End If

    Next I

    Locate , 19: Print "4 -COMPUTER SELECT PASSER EACH PLAY"
    Print
    Locate , 19: Print "SELECT (0-4) ";
    Color 15, 0

    Do
        I$ = GetKeyPress$
        choice = Val(I$)
    Loop Until choice >= 0 And choice <= 4

    If choice <= 3 Then Q6%(I3) = choice
    If choice = 4 Then RQ%(I3) = 1

    If G9 <> 0 And choice <= 3 And RQ%(I3) <> 1 Then

        Call TEAMBOX(12, I3)

        Locate 8, 15: Print "ENTER "; A3$(I3, choice); " MOBILITY RATING (1-9)"
        Print
        Locate , 16: Print "THIS IS HOW OFTEN HE RUNS OUT OF THE POCKET"
        Locate , 16: Print "SOME QB'S LIKE MARINO & FOUTS ALMOST NEVER DO"
        Locate , 16: Print "OTHERS LIKE ELWAY & TARKENTON WILL TAKE OFF"
        Locate , 16: Print "IF UNSURE SIMPLY TYPE 5"
        Locate , 16: Print "        1-LOW, 9-HIGH"

        Color 15, 0

        Do
            I$ = GetKeyPress$
            R9%(I3) = Val(I$)
        Loop Until R9%(I3) >= 1 And R9%(I3) <= 9

    End If

    For I = 0 To 3: 
        V4%(I3, I) = -1
    Next I

    If RQ%(I3) <> 1 Then

        For I4 = 0 To 9:

            For I5 = 0 To 3
                If A1$(I3, I4) = A3$(I3, I5) And I5 <> Q6%(I3) Then V4%(I3, I5) = I4
            Next I5

        Next I4

    End If

End Sub


'----------------------------------------
'           KICKOFF Subroutine
'----------------------------------------
'This subroutine gives the user choices
'to handle a pro kick off.
Sub KICKOFF ()

    Call SCOREBOARD

    If J6 = 1 And P1 = CT Or J6 = 2 Then

        I9 = 2

    Else
        Call OPTIONBOX(9)
        Print A$(W%); " DO YOU ELECT TO:"
        Locate 12, 14
        Locate , 14: Print "1 - KICK OFF"
        Locate , 14: Print "2 - RECEIVE"
        Locate , 14: Print "3 - DEFEND GOAL WITH WIND AT BACK"
        Locate , 14: Print "4 - DEFEND GOAL WITH WIND IN FACE"

        Do
            I$ = GetKeyPress$
            I9 = Val(I$)
        Loop Until I9 >= 1 And I9 <= 4

    End If

    Screen , , 0, 0

    If I9 = 1 Or I9 = 2 Then

        Call SCOREBOARD

        If J6 = 1 And D = CT Or J6 = 2 Then
            I1 = 1
        Else
            Call OPTIONBOX(7)

            Print A$(1 - W%); " DO YOU ELECT TO:"
            Locate 12, 14
            Locate , 14: Print "1 - DEFEND GOAL WITH WIND AT BACK"
            Locate , 14: Print "2 - DEFEND GOAL WITH WIND IN FACE"

            Do
                I$ = GetKeyPress$
                I1 = Val(I$)
            Loop Until I1 >= 1 And I1 <= 2

        End If

        Screen , , 0, 0
        WX%(0) = D

        If I1 = 2 Then WX%(0) = 1 - D
        If I9 = 1 Then Call CHANGEPOSS: W% = 1 - W%

    End If

    If I9 = 3 Or I9 = 4 Then

        If I9 = 3 Then WX%(0) = P1
        If I9 = 4 Then WX%(0) = D

        Swap P1, D

        Call SCOREBOARD

        If J6 = 1 And P1 = CT Or J6 = 2 Then
            I1 = 2
        Else
            Call OPTIONBOX(7)
            Print A$(1 - W%); " DO YOU ELECT TO:"
            Locate 12, 14
            Locate , 14: Print "1 - KICK OFF"
            Locate , 14: Print "2 - RECEIVE"

            Do
                I$ = GetKeyPress$
                I1 = Val(I$)
            Loop Until I1 >= 1 And I1 <= 2

        End If

        Screen , , 0, 0
        If I1 = 1 Then Call CHANGEPOSS

    End If

End Sub


'----------------------------------------
'         COLKICKOFF Subroutine
'----------------------------------------
'This subroutine gives the user choices
'to handle a college kick off.
Sub COLKICKOFF ()

    If Q > 2 Then
        Call KICKOFF
    Else

        Call SCOREBOARD

        If J6 = 1 And P1 = CT Or J6 = 2 Then
            I9 = 2
        Else
            Call OPTIONBOX(9)
            Print A$(P1); " DO YOU ELECT TO:"
            Locate 12, 14
            Locate , 14: Print "1 - KICK OFF"
            Locate , 14: Print "2 - RECEIVE"
            Locate , 14: Print "3 - DEFEND GOAL WITH WIND AT BACK"
            Locate , 14: Print "4 - DEFEND GOAL WITH WIND IN FACE"
            Locate , 14: Print "5 - DEFER CHOICE TO 2ND HALF"

            Do
                I$ = GetKeyPress$
                I9 = Val(I$)
            Loop Until I9 >= 1 And I9 <= 5

        End If

        Screen , , 0, 0

        Select Case I9

            Case 1, 2

                Call SCOREBOARD

                If J6 = 1 And D = CT Or J6 = 2 Then
                    I1 = 1
                Else
                    Call OPTIONBOX(7)
                    Print A$(D); " DO YOU ELECT TO:"
                    Locate 12, 14
                    Locate , 14: Print "1 - DEFEND GOAL WITH WIND AT BACK"
                    Locate , 14: Print "2 - DEFEND GOAL WITH WIND IN FACE"

                    Do
                        I$ = GetKeyPress$
                        I1 = Val(I$)
                    Loop Until I1 >= 1 And I1 <= 2
                End If

                Screen , , 0, 0
                WX%(0) = D

                If I1 = 2 Then WX%(0) = 1 - D
                If I9 = 1 Then Call CHANGEPOSS: W% = 1 - W%

            Case 3, 4

                If I9 = 3 Then WX%(0) = P1
                If I9 = 4 Then WX%(0) = D

                Swap P1, D

                Call SCOREBOARD

                If J6 = 1 And P1 = CT Or J6 = 2 Then
                    I1 = 2
                Else
                    Call OPTIONBOX(7)
                    Print A$(P1); " DO YOU ELECT TO:"

                    Locate 12, 14
                    Locate , 14: Print "1 - KICK OFF"
                    Locate , 14: Print "2 - RECEIVE"

                    Do
                        I$ = GetKeyPress$
                        I1 = Val(I$)
                    Loop Until I1 >= 1 And I1 <= 2
                End If

                Screen , , 0, 0

                If I1 = 1 Then Call CHANGEPOSS

            Case 5
                Swap P1, D
                W% = P1
                Call KICKOFF

        End Select

    End If

End Sub


'----------------------------------------
'         TAKESAFETY Subroutine
'----------------------------------------
'This subroutine handles ball position,
'variables and Play-by-play for when a
'player takes a safety voluntarily.
Sub TAKESAFETY ()

    Call AddPossessionTime(4, 7)

    G = (Y * -1) - 1
    K(P1, 1) = K(P1, 1) + 1
    K(P1, 2) = K(P1, 2) + G

    U$ = A6$(P1, 0) + " IS HEADED OUT OF THE END ZONE"
    Call PBP

    S(D, Q) = S(D, Q) + 2
    S(D, 0) = S(D, 0) + 2

End Sub


'----------------------------------------
'           FINDINT Subroutine
'----------------------------------------
'This subroutine appears to determine
'something related to interceptions.
'Perhaps the player to associate with
'an interception attempt?
Sub FINDINT ()

    M5 = 0
    RN = Int(Rnd(1) * DDI(1 - P1)) + 1

    For Z1 = 0 To 9
        M5 = M5 + DI(1 - P1, Z1)
        If RN <= M5 Then X$ = DI$(1 - P1, Z1): Exit For
    Next

End Sub


'----------------------------------------
'           YARDAGE Subroutine
'----------------------------------------
'This subroutine I believe is used to
'round yardage gained 
'-0.4 to 0.6
Sub YARDAGE ()

    G = G + (Int(Rnd(1) * 11) - 5) / 10

End Sub


'----------------------------------------
'          PUNTYARDS Subroutine
'----------------------------------------
'This subroutine handles the calculations
'for punt yardage and who receives the
'punt.
Sub PUNTYARDS ()

    Call d100(I3)
    Y = Y + G

    Call CHANGEPOSS

    YT = Y
    Y = 100 - Y

    Call YARDLINE

    RN = Int(Rnd(1) * 1000) + 1

    Select Case B2(P1, PR)

        Case 1 To 4

            Select Case RN

                Case 1 To 50
                    G = Int((Rnd(1) * 6) - 5)

                Case 51 To 899
                    G = Int((Rnd(1) * 14) + 0) + (B2(P1, PR) - 3) * 3

                Case 900 To 988
                    If I2 <> 1 Then G = Int((Rnd(1) * 39) + 12) + (B2(P1, PR) - 3) * 3

                Case 989 To 1000
                    If I2 <> 1 Then G = 110

            End Select

        Case 5

            Select Case RN

                Case 1 To 900
                    G = Int((Rnd(1) * 25) + 0)

                Case 901 To 940
                    G = Int((Rnd(1) * 39) + 12)

                Case 941 To 1000
                    If I2 <> 1 Then G = 110

            End Select

        Case Is >= 6

            If RN > 900 And I2 <> 1 Then
                G = 110
            Else
                G = Int((Rnd(1) * 26) + 0) + (B2(P1, PR) - 6) * 3
            End If

    End Select

    X1 = 4
    Call YARDAGE
    Call MARKER

    U$ = "THE BALL IS TAKEN BY " + A5$(P1, PR) + " AT THE" + Str$(Int(YL))
    Call PBP

    SY = 100 - Y
    EY = SY - G

    Call MOVEBALL

End Sub


'----------------------------------------
'          FAKEYARDS Subroutine
'----------------------------------------
'This subroutine handles yardage gains and
'Play-by-Play text for a fake play.
Sub FAKEYARDS (choice)

    U$ = "IT'S A FAKE!!! THE UPBACK IS RUNNING THE BALL"
    Call PBP

    Call d100(RN)

    Select Case choice

        Case 0

            If RN <= 36 Then
                G = Int(Rnd(1) * 27)
            Else
                G = Int(Rnd(1) * 6) - 2
            End If

        Case 1

            Select Case RN
                Case 1 To 36
                    G = Int(Rnd(1) * 21)

                Case 37 To 90
                    G = Int(Rnd(1) * 11) - 4

                Case 91 To 100
                    G = 100 - Y
            End Select

        Case 2
            If RN <= 8 Then
                G = Int(Rnd(1) * 21)
            Else
                G = Int(Rnd(1) * 7) - 7
            End If

    End Select

    Call YARDAGE

    O = 1

    SY = 100 - Y
    EY = SY - G

    Call MOVEBALL

    U$ = "THE UPBACK GAINED"
    Print
    X = 10
    X1 = 11

    If Int((G + Y) * 10 + .5) / 10 >= 99.94999 Then
        U$ = U$ + Str$(Int(100 - Y))
    Else
        U$ = U$ + Str$(Int((G) * 10 + .5) / 10)
    End If

    U$ = U$ + " YARDS ON THE FAKE RUN"
    Call PBP

End Sub


'----------------------------------------
'           FUMBLE Subroutine
'----------------------------------------
'This subroutine I believe tries to calc-
'ulate if a player has fumbled the ball.
Sub FUMBLE ()

    Call d100(F8)

    If RF% = 1 Then

        F8 = F8 - 10
        RF% = 0

    Else

        If F% = 1 Then F8 = F8 - 6
        If F% = 2 Then F8 = F8 + 1
        If F% = 4 Then F8 = F8 - 2
        If F% = 5 Then F8 = F8 + 2

        If P2 = 1 Then F8 = F8 + 2
        If P2 = 2 Then F8 = F8 - 1
        If P2 = 5 Then F8 = F8 - 1

    End If

    F8 = F8 - WX%(5)
    F% = 0

    If F8 <= B6(P1, 3) + B6(D, 4) Then F9 = 1

End Sub


'----------------------------------------
'            FLEA Subroutine
'----------------------------------------
'This subroutine handles yardage and the
'Play-by-Play text for a flea flicker.
Sub FLEA ()

    I1 = Q6%(P1)

    C% = A7(P1, Q6%(P1)) + Int(B6(D, 1)) - 4

    intI% = A8(P1, Q6%(P1)) + B6(D, 2) + 5

    S% = 5

    Call d100(RN)

    If D3 = 7 Or D3 = 8 Then S% = 30
    If D3 = 9 Or D3 = 10 Then S% = 50
    If D3 = 11 Then S% = 70

    If RN <= 25 Then
        G = Int(Rnd(1) * 50) + 51
    Else
        G = Int(Rnd(1) * 15) + 35
    End If

    CP = Int(Rnd(1) * 16) + 35

    If intG9%(P1) > 0 Then
        C% = 3
        intI% = intI% + 10
        If S% = 5 Then S% = 30
    End If

    intG9%(P1) = 1

    U$ = A1$(P1, 0) + " TAKES THE HANDOFF"
    Call PBP

    U$ = "HE TOSSES IT BACK TO " + A3$(P1, Q6%(P1)) + " FOR A FLEA FLICKER!!!"
    Call PBP

    I3 = Int(Rnd(1) * 3)

    U$ = A2$(P1, I3) + " IS OPEN DOWNFIELD"
    Call PBP

    Call d100(RN)

End Sub


'----------------------------------------
'           REVGAIN Subroutine
'----------------------------------------
'This subroutine handles yardage and the
'Play-by-Play text for a reverse play.
Sub REVGAIN ()

    U$ = A3$(P1, Q6%(P1)) + " TAKES THE SNAP"

    U$ = U$ + " AND HANDS OFF TO " + A1$(P1, I1) + " ON THE REVERSE!!"
    Call PBP

    Call d100(RN)

    If RV%(P9) = 0 Then
        Select Case RN

            Case 1 To 20
                G = (Int(Rnd(1) * 8) + 5) * -1: RF% = 1

            Case 21 To 80
                G = Int(Rnd(1) * 11)

            Case 81 To 100
                G = Int(Rnd(1) * 81)

        End Select

    Else

        Select Case RN
            Case 1 To 5: G = Int(Rnd(1) * 81)
            Case 6 To 55: G = Int(Rnd(1) * 11)
            Case 56 To 100: G = (Int(Rnd(1) * 8) + 5) * -1: RF% = 1
        End Select

    End If

    RV%(P9) = 1

End Sub


'----------------------------------------
'           FAKERUN Subroutine
'----------------------------------------
'This subroutine handles yardage and the
'Play-by-Play text for a fake run on a
'kicking lineup.
Sub FAKERUN (choice)

    U$ = "IT'S A FAKE!!! THE HOLDER IS RUNNING THE BALL"
    Call PBP

    Call d100(RN)

    Select Case choice
        Case 1
            Select Case RN
                Case 1 To 20: G = Int(Rnd(1) * 21)
                Case 21 To 95: G = Int(Rnd(1) * 11) - 4
                Case 96 To 100: G = 100 - Y
            End Select

        Case 2
            If RN <= 8 Then
                G = Int(Rnd(1) * 21)
            Else
                G = Int(Rnd(1) * 7) - 7
            End If

    End Select

    Call YARDAGE
    O = 1

    SY = 100 - Y
    EY = SY - G

    Call MOVEBALL

    U$ = "THE HOLDER GAINED"
    Print

    X = 10
    X1 = 11

    If Int((G + Y) * 10 + .5) / 10 >= 99.94999 Then
        U$ = U$ + Str$(Int(100 - Y))
    Else
        U$ = U$ + Str$(Int((G) * 10 + .5) / 10)
    End If

    U$ = U$ + " YARDS ON THE FAKE RUN"
    Call PBP

End Sub


'----------------------------------------
'           HANDOFF Subroutine
'----------------------------------------
'This subroutine handles the Play-by-Play 
'text for a run play.
Sub HANDOFF ()

    If D2 = 11 Then
        U$ = D$(D2)
    Else
        U$ = D$(D2) + " " + D1$(D3)
    End If

    Call PBP

    U$ = A3$(P1, Q6%(P1)) + " TAKES THE SNAP"

    If P2 = 4 Or P2 = 5 Then

        DR = Int(Rnd(1) * 2)

        If A1$(P1, I1) = A3$(P1, Q6%(P1)) Then

            U$ = U$ + " AND KEEPS IT ON THE " + RP$(RP)
            Call PBP

        Else
            RN = Int(Rnd(1) * 2) + 1

            If RN = 1 Then
                U$ = U$ + " AND TOSSES OUT TO " + A1$(P1, I1)
            Else
                'RN = 2
                U$ = U$ + " AND PITCHES OUT TO " + A1$(P1, I1)
            End If

            Call PBP

            U$ = A1$(P1, I1) + " GOES AROUND THE " + DR$(DR) + " END"
            Call PBP

        End If

    Else

        If A1$(P1, I1) = A3$(P1, Q6%(P1)) Then
            U$ = U$ + " AND KEEPS IT ON THE " + RP$(RP)
        Else
            U$ = U$ + " AND HANDS OFF TO " + A1$(P1, I1) + " ON THE " + RP$(RP)
        End If

        Call PBP

    End If

End Sub


'----------------------------------------
'          PASSBALL Subroutine
'----------------------------------------
'This subroutine helps setup the stage for
'a pass play, including Play-by-Play text.
'This includes determining who the ball is
'going to and where they might be.
Sub PASSBALL ()

    S6 = 0

    Call QBLINE

    Call d100(I)

    R1 = 2

    '--- This was I2 previously not J
    For J = 3 To 0 Step -1
        If I <= A6(P1, J) Then I1 = J
    Next J

    If RQ%(P1) = 1 Then
        Q6%(P1) = I1
    Else
        I1 = Q6%(P1)
    End If

    Do

        Call d100(RN2)
        newRandomNum% = 0

        '--- This was I2 previously not J
        For J = 15 To 10 Step -1
            If RN2 <= A4(P1, J - 10) Then I3 = J
        Next J

        '--- This was I2 previously not J
        For J = 9 To 0 Step -1
            If RN2 <= A2(P1, J) Then I3 = J
        Next J

        If I3 > 9 Then
            If A2$(P1, I3 - 10) = A3$(P1, Q6%(P1)) Then newRandomNum% = 1
        End If

        If I3 < 10 Then
            If A1$(P1, I3) = A3$(P1, Q6%(P1)) Then newRandomNum% = 1
        End If

    Loop Until newRandomNum% = 0

    If D2 = 11 Then U$ = D$(D2) Else U$ = D$(D2) + " " + D1$(D3)

    Call PBP
    Call PASSPBP

    If I3 > 9 Then RV$ = A2$(P1, I3 - 10) Else RV$ = A1$(P1, I3)

    RN = Int(Rnd(1) * 6) + 1

    Select Case RN
        Case 1: U$ = "HE'S GOT "
        Case 2: U$ = "HE SPOTS "
        Case 3: U$ = "HE'S LOOKING FOR "
        Case 4: U$ = "HE SEES "
        Case 5: U$ = "HE'S SEARCHING FOR "
        Case 6: U$ = "HE'S GOT "
    End Select

    Call WHICHRECEIVER

    I = Int(Rnd(1) * 5) + 1
    DR = Int(Rnd(1) * 2)

    Select Case I
        Case 1, 6
            U$ = U$ + " IN THE OPEN"
            Call PBP

        Case 2
            U$ = U$ + " ON THE SIDELINE"
            Call PBP

            ' I'm not confident the below is accurate
            'I think Case 3 should also run code for 4/5
            'And Case 4 should also run code for 5
        Case 3
            If P2 <> 13 Then U$ = U$ + " OVER THE MIDDLE": Call PBP

        Case 4
            If P2 <> 13 Then U$ = U$ + " DOWNFIELD": Call PBP

        Case 5
            If P2 = 12 Or P2 = 15 Then U$ = U$ + " DEEP": Call PBP

    End Select

    Call d100(I)
    
End Sub


'----------------------------------------
'          ARMADJUST Subroutine
'----------------------------------------
'This subroutine does some calculations
'related to the QB "arm rating"
Sub ARMADJUST ()

    S2 = A7(P1, I1) + Int(B6(D, 1))

    If P1 = H% Then
        S2 = S2 + 3
    Else
        'P1 <> H%
        If H% <> 2 Then S2 = S2 - 3
    End If

    Select Case Y
        Case 0 To 40.001: PQ = 3
        Case 40.002 To 80.001: PQ = -2
        Case 80.002 To 85.001: PQ = -4
        Case 85.002 To 90.001: PQ = -10
        Case 90.002 To 95.001: PQ = -26
        Case Is > 95.001: PQ = -13
    End Select

    S3 = S1%(1, P2 - 8, D3)

    PW = 0

    If WX%(0) <> P1 And (P2 = 11 Or P2 = 14 Or P2 = 16 Or P2 = 17 Or P2 = 18) Then PW = WX%(2)

    If WX%(0) <> P1 And (P2 = 12 Or P2 = 15) Then PW = WX%(3) + WX%(6)

End Sub


'----------------------------------------
'            SCORE Subroutine
'----------------------------------------
'This subroutine tracks variables related
'to team score and also updates the current
'score in the game.
Sub SCORE ()

    X2 = X2 + 1
    scoreTimes(X2) = gameClock!
    C(X2) = Q

    If X1 <> 7 Then
        K1(X2, 1) = P1
    Else
        K1(X2, 1) = D
    End If

    K1(X2, 0) = X1
    K1(X2, 5) = 100 - Y

    If X1 = 3 Then K1(X2, 5) = 100 - N
    If X1 = 8 Then K1(X2, 5) = 117 + intY8% - Y

    K1(X2, 2) = I1
    If X1 = 5 Or X1 = 12 Then K1(X2, 2) = Z1

    K1(X2, 3) = I3
    If K1(X2, 5) < 1 Then K1(X2, 5) = 1

End Sub


'----------------------------------------
'          COMPILER Subroutine
'----------------------------------------
' ...explanation...
Sub COMPILER ()

    If X >= 1 And X <= 4 Then

        Select Case X

            Case 1, 4
                K(P1, 1) = K(P1, 1) + 1
                If G + Y < 99.95 Then
                    K(P1, 2) = K(P1, 2) + G
                Else
                    K(P1, 2) = K(P1, 2) + 100 - Y
                End If

            Case 2
                K(P1, 3) = K(P1, 3) + 1

            Case 3
                K(P1, 3) = K(P1, 3) + 1
                K(P1, 4) = K(P1, 4) + 1

                If G + Y < 99.95 Then
                    K(P1, 6) = K(P1, 6) + G
                Else
                    K(P1, 6) = K(P1, 6) + 100 - Y
                End If

        End Select


        Select Case X

            Case 1

                K2(P1, I1, 0) = K2(P1, I1, 0) + 1
                If G + Y >= 99.95 Then
                    K2(P1, I1, 1) = K2(P1, I1, 1) + 100 - Y
                    K2(P1, I1, 2) = K2(P1, I1, 2) + 1
                    BG = 100 - Y
                    If BG > RB(P1, I1) Then strRB$(P1, I1) = "t": RB(P1, I1) = BG
                Else
                    K2(P1, I1, 1) = K2(P1, I1, 1) + G
                    If G > RB(P1, I1) Then strRB$(P1, I1) = "": RB(P1, I1) = G
                End If

                If HB% = 1 Then HB% = 0
                X = 0

            Case 2

                If HB% = 0 Then K2(P1, I1, 9) = K2(P1, I1, 9) + 1
                If HB% = 1 Then HB% = 0
                X = 0

            Case 3

                If HB% <> 1 Then

                    K2(P1, I1, 9) = K2(P1, I1, 9) + 1
                    K2(P1, I1, 10) = K2(P1, I1, 10) + 1

                    If G + Y >= 99.95 Then
                        K2(P1, I1, 12) = K2(P1, I1, 12) + 100 - Y
                        K2(P1, I1, 13) = K2(P1, I1, 13) + 1
                    Else
                        K2(P1, I1, 12) = K2(P1, I1, 12) + G
                    End If

                End If

                If I3 > 9 Then

                    If G + Y >= 99.95 Then
                        K2(P1, I3 - 10, 7) = K2(P1, I3 - 10, 7) + 100 - Y
                        K2(P1, I3 - 10, 8) = K2(P1, I3 - 10, 8) + 1
                    Else
                        K2(P1, I3 - 10, 7) = K2(P1, I3 - 10, 7) + G
                    End If

                    K2(P1, I3 - 10, 6) = K2(P1, I3 - 10, 6) + 1

                Else

                    If G + Y >= 99.95 Then
                        K2(P1, I3, 4) = K2(P1, I3, 4) + 100 - Y
                        K2(P1, I3, 5) = K2(P1, I3, 5) + 1
                    Else
                        K2(P1, I3, 4) = K2(P1, I3, 4) + G
                    End If

                    K2(P1, I3, 3) = K2(P1, I3, 3) + 1

                End If

                If HB% = 1 Then HB% = 0
                X = 0

            Case 4
                If W5 = 0 Or W5 = 1 And G9 = 0 Then K2(P1, Q6%(P1) + 10, 0) = K2(P1, Q6%(P1) + 10, 0) + 1
                If W5 = 0 And G + Y < 99.95 Or W5 = 1 And G9 = 0 And G + Y < 99.95 Then K2(P1, Q6%(P1) + 10, 1) = K2(P1, Q6%(P1) + 10, 1) + G
                If W5 = 0 And G + Y >= 99.95 Or W5 = 1 And G9 = 0 And G + Y >= 99.95 Then K2(P1, Q6%(P1) + 10, 1) = K2(P1, Q6%(P1) + 10, 1) + 100 - Y: K2(P1, Q6%(P1) + 10, 2) = K2(P1, Q6%(P1) + 10, 2) + 1
                If W5 = 1 Then W6(P1, 0) = W6(P1, 0) + 1: W6(P1, 1) = W6(P1, 1) + G * -1: SK(1 - P1, Z1, 0) = SK(1 - P1, Z1, 0) + 1: SK(1 - P1, Z1, 1) = SK(1 - P1, Z1, 1) + G * -1
                If HB% = 1 Then HB% = 0
                X = 0

        End Select

    End If

End Sub


'----------------------------------------
'           TWOMIN Subroutine
'----------------------------------------
'This subroutine gives the user a menu of
'options for the last 2 minutes of the
'game and handles the appropriate changes
'to team variables
'-- we should have I1 as a param rather than
'-- it being a global
Sub TWOMIN ()

    Call OPTIONBOX(7)
    
    Locate 9, 14: Print "1 - HUDDLE"
    Locate , 14: Print "2 - TIME OUT "; A$(P1); " "; T1(P1)
    Locate , 14: Print "3 - TIME OUT "; A$(D); " "; T1(D):
    Locate , 14: Print "4 - HURRY UP OFFENSE"
    Locate , 14: Print "5 - THROW AWAY PASS"

    Do

        If J6 <> 0 Then

            I5 = S(P1, 0) - S(D, 0)

            'Is it possible for more than one of these to be TRUE at the same time?
            'If not, consider setting a flag value to then be checked outside the if
            'That would only give us one Exit Do
            If (J6 = 1 And D = CT Or J6 = 2) Then

                If I5 > 0 And I5 <= 14 And T1(D) > 0 And Q = 4 Then I1 = 3: Exit Do

                If I5 <= 0 And I5 >= -14 Then

                    If T1(P1) > 0 Then
                        I1 = 2
                    Else
                        I1 = 4
                    End If

                    Exit Do

                End If

            End If

            If J6 = 2 Then I1 = 1: Exit Do

            If Q = 2 And Y > 15 And (J6 = 1 And P1 = CT Or J6 = 2) And I5 <= 0 Then
                If T1(P1) > 0 Then
                    I1 = 2
                Else
                    I1 = 4
                End If
                Exit Do
            End If

            If Q = 2 And Y > 40 And I5 > 0 And B6(P1, 7) < 65 And (J6 = 1 And P1 = CT Or J6 = 2) And T1(P1) > 0 Then I1 = 2: Exit Do
            If Q = 2 And Y > 40 And I5 >= 0 And B6(P1, 7) < 65 And (J6 = 2 Or J6 = 1 And P1 = CT) Then I1 = 4: Exit Do

        End If

        I$ = GetKeyPress$
        I1 = Val(I$)

    Loop Until Not (I1 < 1 Or I1 > 5 Or (I1 = 2 Or I1 = 4 Or I1 = 5) And J6 = 1 And P1 = CT Or I1 = 3 And J6 = 1 And D = CT)

    Color 0, 5 * (1 - BW)

End Sub


'----------------------------------------
'           FGDIST Subroutine
'----------------------------------------
'This subroutine calculcates the distance
'for a FG
Sub FGDIST ()

    I9 = 0

    If WX%(0) = P1 And WX%(1) = -7 Then I9 = -7
    If WX%(0) = P1 And WX%(1) = -15 Then I9 = -15

    If WX%(0) <> P1 And WX%(1) = -7 Then I9 = 7
    If WX%(0) <> P1 And WX%(1) = -15 Then I9 = 15

    For I = 4 To 0 Step -1:
        If Y >= F1(I) + intY8% + I9 Then F2 = F(I) - ((9 - B4(P1, Q7%(P1))) * 5)
        If Y >= 68 + intY8% And Y >= F1(I) + intY8% + I9 Then F2 = F2 + (Y - F1(I)) + intY8% - 4 + I9
    Next I

    If F2 <= 0 Then F2 = 5
    If F2 >= 100 Then F2 = 95

End Sub


'----------------------------------------
'           RUNMENU Subroutine
'----------------------------------------
'This subroutine prints the different
'options for a run play
Sub RUNMENU ()

    Call FRAMEOPTION(12, P1)

    Print "SELECT RUNNING PLAY "; A$(P1)
    Locate 12
    Locate , 14: Print "1 - BLAST                 9 - POWER SWEEP "
    Locate , 14: Print "2 - DIVE                 10 - QUICK PITCH "
    Locate , 14: Print "3 - OFF TACKLE           11 - QUICK TRAP  "
    Locate , 14: Print "4 - TOSS SWEEP           12 - ISOLATION   "
    Locate , 14: Print "5 - OPTION RUN           13 - SPRINT DRAW "
    Locate , 14: Print "6 - DRAW PLAY            14 - OVER THE TOP"
    Locate , 14: Print "7 - TRAP/MISDIRECTION    15 - COUNTER     "
    Locate , 14: Print "8 - QB SNEAK                              "

End Sub


'----------------------------------------
'          PASSMENU Subroutine
'----------------------------------------
'This subroutine prints the different
'options for a pass play
Sub PASSMENU ()

    Call FRAMEOPTION(11, P1)

    Print "SELECT PASS PLAY "; A$(P1)
    Locate 12
    Locate , 14: Print "1 - 3 STEP DROP           8 - SIDELINE PASS"
    Locate , 14: Print "2 - SHORT PASS            9 - ROLLOUT PASS "
    Locate , 14: Print "3 - MEDIUM PASS          10 - BOOTLEG PASS "
    Locate , 14: Print "4 - LONG PASS            11 - CROSS        "
    Locate , 14: Print "5 - SCREEN PASS          12 - CURL PASS    "
    Locate , 14: Print "6 - MED PLAY ACT PASS    13 - DEEP POST    "
    Locate , 14: Print "7 - LONG PLAY ACT PASS   14 - DEEP CORNER  "

End Sub


'----------------------------------------
'        SHORTYARDAGE Subroutine
'----------------------------------------
'This subroutine calculates yardage gains
'for Goal Line situations.
Sub SHORTYARDAGE ()

    Call d100(I6)

    If D2 > 3 And D2 < 6 Then

        Select Case Y

            Case 94.999 To 95.998

                Select Case I6
                    Case 1 To 17: G = 6
                    Case 18 To 22: G = 4
                    Case 23 To 35: G = 3
                    Case 36 To 52: G = 2
                    Case 53 To 76: G = 1
                    Case 77 To 93: G = 0
                    Case 94 To 100: G = -1
                End Select

            Case 95.999 To 96.998

                Select Case I6
                    Case 1 To 26: G = 5
                    Case 27 To 29: G = 3
                    Case 30 To 49: G = 2
                    Case 50 To 78: G = 1
                    Case 79 To 94: G = 0
                    Case 95 To 100: G = -1
                End Select

            Case 96.999 To 97.998

                Select Case I6
                    Case 1 To 27: G = 4
                    Case 28 To 32: G = 2
                    Case 33 To 80: G = 1
                    Case 81 To 98: G = 0
                    Case 99 To 100: G = -1
                End Select

            Case 97.999 To 98.998

                Select Case I6
                    Case 1 To 46: G = 3
                    Case 47 To 72: G = 1
                    Case 73 To 91: G = 0
                    Case 92 To 100: G = -1
                End Select

            Case Is >= 98.999

                Select Case I6
                    Case 1 To 61: G = 2
                    Case 62 To 96: G = 0
                    Case 97 To 100: G = -1
                End Select

        End Select

    Else

        Select Case Y

            Case 94.999 To 95.998

                Select Case I6
                    Case 1 To 14: G = 6
                    Case 15 To 17: G = 4
                    Case 18 To 29: G = 3
                    Case 30 To 43: G = 2
                    Case 44 To 63: G = 1
                    Case 64 To 77: G = 0
                    Case 78 To 84: G = -1
                    Case 85 To 91: G = -2
                    Case 92 To 98: G = -3
                    Case 99 To 100: G = -4
                End Select

            Case 95.999 To 96.998

                Select Case I6
                    Case 1 To 29: G = 5
                    Case 30 To 31: G = 3
                    Case 32 To 45: G = 2
                    Case 46 To 72: G = 1
                    Case 73 To 86: G = 0
                    Case 87 To 90: G = -1
                    Case 91: G = -2
                    Case 92 To 94: G = -3
                    Case 95 To 97: G = -4
                    Case 98 To 100: G = -5
                End Select

            Case 96.999 To 97.998

                Select Case I6
                    Case 1 To 24: G = 4
                    Case 25 To 28: G = 2
                    Case 29 To 69: G = 1
                    Case 70 To 85: G = 0
                    Case 86 To 88: G = -1
                    Case 89 To 93: G = -2
                    Case 94 To 100: G = -4
                End Select

            Case 97.999 To 98.998

                Select Case I6
                    Case 1 To 43: G = 3
                    Case 44 To 65: G = 1
                    Case 66 To 83: G = 0
                    Case 84 To 92: G = -1
                    Case 93 To 94: G = -2
                    Case 95 To 100: G = -4
                End Select

            Case Is >= 98.999

                Select Case I6
                    Case 1 To 57: G = 2
                    Case 58 To 74: G = 0
                    Case 75 To 83: G = -1
                    Case 84 To 90: G = -2
                    Case 91 To 97: G = -3
                    Case 98 To 100: G = -4
                End Select

        End Select

    End If

    Call d100(I6)

    If I2 <= 30 Then
        If I6 <= GL%(I2, 1) Then G = G + GL%(I2, 2)
    Else
        'I2 < 30
        If I6 <= GL%(30, 1) Then G = G + GL%(30, 2)
    End If

End Sub


'----------------------------------------
'           PASSPBP Subroutine
'----------------------------------------
'This subroutine develops the Play-by-play
'string for pass play.
Sub PASSPBP ()

    Call d100(RN)

    If D3 >= 7 Then

        Select Case RN

            Case 1 To 33:
                U$ = "BLITZ IS COMING...!!"
                Call PBP

            Case 34 To 66:
                U$ = "HERE COMES THE BLITZ...!!"
                Call PBP

            Case 67 To 109:
                U$ = "BLITZ IS ON...!!"
                Call PBP

                If intDS%(1 - P1) = 0 Then
                    X$ = A$(1 - P1)
                Else

                    M5 = 0
                    RN = Int(Rnd(1) * DDS(1 - P1)) + 1

                    For Z1 = 0 To 14
                        M5 = M5 + DS(1 - P1, Z1)
                        If RN <= M5 Then X$ = DS$(1 - P1, Z1): Exit For
                    Next

                End If

        End Select

        4906 RN = Int(Rnd(1) * 15) + 1
        If (D3 >= 7 Or D2 >= 9) Then

            Select Case RN

                Case 1: U$ = A3$(P1, I1) + " HAS TO HURRY"
                Case 2: U$ = A3$(P1, I1) + " IS UNDER A HEAVY PASS RUSH"
                Case 3: U$ = A3$(P1, I1) + " IS BEING RUSHED"
                Case 4: U$ = A3$(P1, I1) + " IS BEING PRESSURED"
                Case 5: U$ = A3$(P1, I1) + " FEELS THE HEAT"
                Case 6: U$ = A3$(P1, I1) + " IS BEING CHASED"
                Case 7: U$ = A3$(P1, I1) + " IS BEING HURRIED"
                Case 8: U$ = A3$(P1, I1) + " IS FORCED OUT OF THE POCKET"
                Case 9: U$ = A3$(P1, I1) + " IS SCRAMBLING"
                Case 10: U$ = A3$(P1, I1) + " IS UNDER THE GUN"
                Case 11: U$ = A3$(P1, I1) + "'S POCKET IS COLLAPSING"
                Case 12: U$ = A3$(P1, I1) + "'S PROTECTION IS BREAKING DOWN"
                Case 13: U$ = "HERE COMES " + X$
                Case 14: U$ = X$ + " BREAKS THROUGH"
                Case 15: U$ = X$ + " IS COMING THROUGH"

            End Select

        Else

            Select Case P2

                Case 9, 10
                    If RN <= 50 Then
                        U$ = A3$(P1, I1) + " TAKES THE SNAP AND DROPS BACK...LOOKING SHORT..."
                    Else
                        U$ = A3$(P1, I1) + " DROPS QUICKLY AND SETS..."
                    End If

                Case 11, 16
                    Select Case RN

                        Case 1 To 30: U$ = A3$(P1, I1) + " DROPS BACK AND LOOKS..."
                        Case 31 To 40: U$ = A3$(P1, I1) + " DROPS BACK...HE'S UNDER PRESSURE..."
                        Case 41 To 60: U$ = A3$(P1, I1) + " TO THROW...HAS TIME..."
                        Case 61 To 70: U$ = A3$(P1, I1) + " BACK TO PASS...HAS PROTECTION..."
                        Case 71 To 80: U$ = A3$(P1, I1) + " DROPS BACK...IS BEING CHASED!!"
                        Case 81 To 100: U$ = A3$(P1, I1) + " HAS PLENTY OF TIME TO THROW..."

                    End Select

                Case 12
                    If RN <= 50 Then
                        U$ = A3$(P1, I1) + " DROPS BACK...HE WANTS TO GO DEEP"
                    Else
                        U$ = A3$(P1, I1) + " TAKES A DEEP DROP...HE'S LOOKING LONG"
                    End If

                Case 13
                    If RN <= 50 Then
                        U$ = A3$(P1, I1) + " DROPPING...BEING CHASED..."
                    Else
                        U$ = A3$(P1, I1) + " DROPS BACK...HE'S UNDER PRESSURE..."
                    End If

                Case 14, 15
                    If RN <= 50 Then
                        U$ = A3$(P1, I1) + " MAKES A GOOD PLAY FAKE..."
                    Else
                        U$ = A3$(P1, I1) + " FAKES THE GIVE AND WANTS TO THROW IT..."
                    End If

                Case 17
                    U$ = A3$(P1, I1) + " ROLLS OUT..."

                Case 18
                    U$ = A3$(P1, I1) + " HAS IT ON THE BOOTLEG"

            End Select

        End If

    End If

    Call PBP

End Sub


'----------------------------------------
'            SACK Subroutine
'----------------------------------------
'This subroutine develops the Play-by-play
'text for a sack.
Sub SACK ()

    U$ = "BUT HE WON'T BE ABLE TO GET THIS PASS AWAY!"
    Call PBP

    U$ = A3$(P1, I1)

    If HB% = 1 Then U$ = A1$(P1, I1)

    If E = 1 Then
        U$ = U$ + " IS DROPPED"
    Else

        R0 = Int(Rnd(1) * 12) + 1
        Call d100(RN)

        Select Case R0
            Case 1: U$ = U$ + " IS SACKED"
            Case 2: If RN <= 20 Then U$ = U$ + " IS NAILED"
            Case 3: If RN <= 30 Then U$ = U$ + " IS BURIED"
            Case 4: If RN <= 40 Then U$ = U$ + " IS DRILLED"
            Case 5: If RN <= 50 Then U$ = U$ + " IS HIT"
            Case 6: If RN <= 60 Then U$ = U$ + " IS THROWN"
            Case 7: If RN <= 70 Then U$ = U$ + " IS HAMMERED"
            Case 8: If RN <= 80 Then U$ = U$ + " IS TACKLED"
            Case 9: If RN <= 90 Then U$ = U$ + " IS SWARMED UNDER"
            Case 10: U$ = U$ + " IS LEVELED"
            Case 11: U$ = U$ + " IS SNOWED UNDER"
            Case 12: U$ = U$ + " IS WRAPPED UP"
        End Select

    End If

    U$ = U$ + " FOR A" + Str$(Int(G + .5)) + " YARD LOSS"

End Sub


'----------------------------------------
'           QBLINE Subroutine
'----------------------------------------
'This subroutine handles Play-by-Play for
'when the QB approaches the o-line.
Sub QBLINE ()

    QB = 0
    Call d100(RN1)

    If RQ%(P1) = 1 Then Q6%(P1) = 0 Else QB = Q6%(P1)

    If Not (D1 <= 2 Or D1 = 3 And RN1 <= 80) Then

        RN = Int(Rnd(1) * 8) + 1
        Select Case RN
            Case 1: U$ = A$(P1) + " COMES UP TO THE LINE"
            Case 2: U$ = A$(P1) + " BREAKS THE HUDDLE AND LINES UP"
            Case 3: U$ = "THE " + AA$(P1) + " COME UP TO THE LINE"
            Case 4: U$ = "THE " + AA$(P1) + " BREAK THE HUDDLE AND LINE UP"
            Case 5: U$ = A3$(P1, QB) + " BARKS OUT THE SIGNALS"
            Case 6: U$ = A3$(P1, QB) + " LOOKS OVER THE DEFENSE"
            Case 7: U$ = "HERE IS THE " + DN$(D1) + " DOWN AND" + Str$(Int(Y1)) + " YARD PLAY FOR " + A$(P1)
            Case 8: U$ = "HERE IS THE " + DN$(D1) + " DOWN AND" + Str$(Int(Y1)) + " YARD PLAY FOR THE " + AA$(P1)
        End Select

        Call PBP

    End If

End Sub


'----------------------------------------
'            SQUIB Subroutine
'----------------------------------------
'This subroutine handles the yardage AND
'Play-by-Play text for a squib kick
Sub SQUIB ()

    U$ = A7$(P1, Q7%(P1)) + " IS PLACING THE BALL ON THE TEE"
    Call PBP

    U$ = A$(P1) + " IS LINING UP FOR THE KICKOFF"
    Call PBP

    U$ = "IT'S A SQUIBBER DOWN THE FIELD"
    Call PBP

    Swap P1, D

    N = 100 - (Y + Int(Rnd(1) * 16) + 29)
    X = 0
    N = N + (Int(Rnd(1) * 11) - 5) / 10
    Y = N
    YT = 100 - Y

    Call MARKER
    Call YARDLINE

    U$ = "KICK TAKEN BY AN UPMAN AT THE" + Str$(Int(N + .5)) + " YD LINE "
    Call PBP

    G = Int(Rnd(1) * 7) + 9

    SY = 100 - Y
    EY = SY - G

    Call MOVEBALL

    Y = N + G
    F% = 3

End Sub


'----------------------------------------
'           PUNTPBP Subroutine
'----------------------------------------
'This subroutine creates the Play-by-play
'text for a punt.
Sub PUNTPBP ()
    RN = Int(Rnd(1) * 12) + 1
    Select Case RN
        Case 1: U$ = "HE HITS IT"
        Case 2: U$ = "HE NAILS IT"
        Case 3: U$ = "HE KICKS IT"
        Case 4: U$ = "HE LAUNCHES IT"
        Case 5: U$ = "HE BOOTS IT"
        Case 6: U$ = "HE BOOMS IT"
        Case 7: U$ = "HE HITS ONE"
        Case 8: U$ = "HE NAILS ONE"
        Case 9: U$ = "HE KICKS ONE"
        Case 10: U$ = "HE LAUNCHES ONE"
        Case 11: U$ = "HE BOOTS ONE"
        Case 12: U$ = "HE BOOMS ONE"
    End Select

    Call PBP

    RN = Int(Rnd(1) * 6) + 1

    Select Case RN
        Case 1: U$ = "IT'S A HIGH, SPIRALING KICK"
        Case 2: U$ = "IT'S A HIGH FLOATER"
        Case 3: U$ = "IT'S A HIGH END OVER END KICK"
        Case 4: U$ = "IT'S A LOW, LINE DRIVE"
        Case 5: U$ = "HE GETS IT TO TURN OVER"
        Case 6: U$ = "HE DOESN'T GET IT TO TURN OVER"
    End Select

End Sub


'----------------------------------------
'           STUFFED Subroutine
'----------------------------------------
'This subroutine generates a Play-by-Play
'for "stuffed" run plays / losses
Sub STUFFED ()

    RN = Int(Rnd(1) * 12) + 1

    Select Case RN
        Case 1: U$ = "HE'S SNOWED UNDER BY A GANG OF TACKLERS"
        Case 2: U$ = "HE MEETS A STONE WALL"
        Case 3: U$ = "HE BOUNCES OFF ONE TACKLER"
        Case 4: U$ = "HE SLIPS AND FALLS"
        Case 5: U$ = "THE HOLE IS CLOSED"
        Case 6: U$ = "HE FIGHTS FOR EXTRA YARDAGE"
        Case 7: U$ = "HE'S STOOD UP!"
        Case 8: U$ = "HIS FEET GO OUT FROM UNDER HIM"
        Case 9: U$ = "HE SLIPS TO THE TURF"
        Case 10: U$ = "DOWN HE GOES!!"
        Case 11: U$ = "HE SLIPS TRYING TO MAKE HIS CUT"
        Case 12: U$ = "HE CAN'T KEEP HIS FOOTING"
    End Select

    Call PBP

End Sub


'----------------------------------------
'           MISSFG Subroutine
'----------------------------------------
'This subroutine builds the Play-by-Play
'string for a missed Field Goal.
Sub MISSFG

    'direction of kick (right/left)
    DR = Int(Rnd(1) * 2)

    Call d100(RN)

    Select Case RN

        Case 1 To 35: U$ = "NO GOOD"
        Case 36 To 60: U$ = "IT SAILS WIDE...NO GOOD"
        Case 61 To 80: U$ = "HE MISSED IT!"
        Case 81 To 85: U$ = "IT HITS THE UPRIGHTS....NO GOOD!"
        Case 86 To 90: U$ = "HE HOOKS IT...NO GOOD!"
        Case 91 To 95:
            If 117 + intY8% - Y > 45 Then
                U$ = "IT FALLS SHORT....NO GOOD!"
            Else
                U$ = "IT'S NO GOOD ... OFF TO THE " + DR$(DR)
            End If
        Case 96 To 100: U$ = "IT'S NO GOOD!"

    End Select

    Call PBP

End Sub


'----------------------------------------
'           MADEFG Subroutine
'----------------------------------------
'This subroutine builds the Play-by-Play
'string for a made Field Goal.
Sub MADEFG
    Call d100(RN)

    Select Case RN
        Case 1 To 10: U$ = "IT'S GOOD!!!"
        Case 11 To 20: U$ = "THE KICK IS GOOD!!!"
        Case 21 To 30: U$ = "HE PUTS IT THROUGH THE UPRIGHTS!!!"
        Case 31 To 40: U$ = "HE SPLITS THE UPRIGHTS!!!"
        Case 41 To 50: U$ = "IT'S GOOD!!!"
        Case 51 To 60: U$ = "HE HAMMERS IT THROUGH!!!"
        Case 61 To 70: U$ = "RIGHT DOWN THE MIDDLE!!!"
        Case 71 To 80: U$ = "IT HAS THE DISTANCE...IT'S GOOD!!!"
        Case 81 To 90: U$ = "HE NAILS IT...IT'S GOOD!!!"
        Case 91 To 100: U$ = "IT'S GOOD!"
    End Select

    Call PBP

End Sub


'----------------------------------------
'           MISSPAT Subroutine
'----------------------------------------
'This subroutine builds the Play-by-Play
'string for a missed PAT.
Sub MISSPAT

    Call d100(RN)

    Select Case RN
        Case 1 To 50: U$ = "NO GOOD"
        Case 51 To 70: U$ = "HE MISSED IT!"
        Case 71 To 75: U$ = "BAD SNAP FROM CENTER!! NO KICK": K2(P1, 6 + Q7%(P1) * 4, 17) = K2(P1, 6 + Q7%(P1) * 4, 17) - 1
        Case 76 To 95: U$ = "THE KICK SAILS WIDE!!...NO GOOD!"
        Case 96 To 100: U$ = "IT HITS THE UPRIGHTS!!...NO GOOD!"
    End Select

    Call PBP

End Sub


'----------------------------------------
'           MADEPATSubroutine
'----------------------------------------
'This subroutine builds the Play-by-Play
'string for a made PAT.
Sub MADEPAT

    Call d100(RN)

    Select Case RN
        Case 1 To 25: U$ = "IT'S GOOD!!!"
        Case 26 To 50: U$ = "THE KICK IS GOOD!!!"
        Case 51 To 60: U$ = "HE PUTS IT THROUGH THE UPRIGHTS!!!"
        Case 61 To 70: U$ = "HE SPLITS THE UPRIGHTS!!!"
        Case 71 To 80: U$ = "IT'S GOOD!!!"
        Case 81 To 90: U$ = "HE HAMMERS IT THROUGH!!!"
        Case 91 To 100: U$ = "RIGHT DOWN THE MIDDLE!!!"
    End Select

    Call PBP

End Sub


'----------------------------------------
'           KICKSET Subroutine
'----------------------------------------
'This subroutine handles the setup for a
'kick off by handling Play-by-Play
Sub KICKSET ()

    U$ = A7$(P1, Q7%(P1)) + " IS PLACING THE BALL ON THE TEE"
    Call PBP

    Call d100(RN)

    If RN <= 50 Then
        U$ = A$(P1) + " IS LINING UP FOR THE KICKOFF"
    Else
        U$ = "THE " + AA$(P1) + " ARE LINING UP FOR THE KICKOFF"
    End If

    Call PBP

    U$ = "AND THE KICK IS ON ITS WAY"
    Call PBP

    Swap P1, D

    Call d100(RN)

    ' *** added +intY8% to the next 2 lines ***
    If RN <= 88 Then
        N = 100 - (Y + Int(Rnd(1) * 13) + 55 + intY8%)
    Else
        N = 100 - (Y + Int(Rnd(1) * 8) + 68 + intY8%)
    End If

    If G9 = 0 And Y9 = 0 Then N = N + 10

    If WX%(0) = P1 Then
        N = N - Int(Rnd(1) * 7) + 3 - WX%(1)
    Else
        N = N + Int(Rnd(1) * 7) - 3 + WX%(1)
    End If

End Sub


'----------------------------------------
'           QBTHROW Subroutine
'----------------------------------------
'This subroutine creates a play-by-play
'string for a QB pass.
Sub QBTHROW ()

    Call d100(RN)
    Select Case RN
        Case 1: U$ = "HE PASSES IT"
        Case 2: U$ = "HE FIRES IT"
        Case 3: U$ = "HE FIRES THE BALL"
        Case 4: U$ = "HE FIRES ONE"
        Case 5: U$ = "HE FIRES A PASS"
        Case 6: U$ = "HE RIFLES IT"
        Case 7: U$ = "HE RIFLES THE BALL"
        Case 8: U$ = "HE RIFLES ONE"
        Case 9: U$ = "HE RIFLES A PASS"
        Case 10: U$ = "HE THROWS"
        Case 11: U$ = "HE TOSSES"
        Case 12: U$ = "HE DRILLS A PASS"
        Case 13: U$ = "HE FLOATS A PASS"
        Case 14: U$ = "HE THREADS IT"
        Case 15: U$ = "HE DRILLS THE BALL"
        Case 16: U$ = "HE UNLOADS THE BALL"
        Case 17: U$ = "HE UNLOADS IT"
        Case 18: U$ = "HE RIPS THE BALL"
        Case 19: U$ = "HE RIPS IT"
        Case 20: U$ = "THROWN ON A LINE"
        Case 21: U$ = "HE DRILLS IT"
        Case 22: U$ = "HE FLINGS IT"
        Case 23: U$ = "HE FIRES A BULLET"
    End Select

    Call PBP

End Sub


'----------------------------------------
'           RUNPBP Subroutine
'----------------------------------------
'This subroutine creates a play-by-play
'string for a run.
Sub RUNPBP ()

    If P2 <> 4 And P2 <> 5 Then

        RN = Int(Rnd(1) * 46) + 1

        Select Case RN
            Case 1: U$ = A1$(P1, I1) + " GAINS"
            Case 2: U$ = A1$(P1, I1) + " BLASTS AHEAD FOR"
            Case 3: U$ = A1$(P1, I1) + " SCOOTS OUT FOR"
            Case 4: U$ = A1$(P1, I1) + " SCOOTS AHEAD FOR"
            Case 5: U$ = A1$(P1, I1) + " IS AHEAD FOR"
            Case 6: U$ = A1$(P1, I1) + " POPS THROUGH FOR"
            Case 7: U$ = A1$(P1, I1) + " SLASHES AHEAD FOR"
            Case 8: U$ = A1$(P1, I1) + " HAMMERS AHEAD FOR"
            Case 9: U$ = A1$(P1, I1) + " HAMMERS THROUGH FOR"
            Case 10: U$ = A1$(P1, I1) + " HAMMERS OUT"
            Case 11: U$ = A1$(P1, I1) + " MUSCLES AHEAD FOR"
            Case 12: U$ = A1$(P1, I1) + " MUSCLES THROUGH FOR"
            Case 13: U$ = A1$(P1, I1) + " MUSCLES OUT"
            Case 14: U$ = A1$(P1, I1) + " DASHES AHEAD FOR"
            Case 15: U$ = A1$(P1, I1) + " DASHES THROUGH FOR"
            Case 16: U$ = A1$(P1, I1) + " DASHES OUT FOR"
            Case 17: U$ = A1$(P1, I1) + " RUMBLES AHEAD FOR"
            Case 18: U$ = A1$(P1, I1) + " RUMBLES THROUGH FOR"
            Case 19: U$ = A1$(P1, I1) + " RUMBLES FOR"
            Case 20: U$ = A1$(P1, I1) + " CRACKS AHEAD FOR"
            Case 21: U$ = A1$(P1, I1) + " CRACKS THROUGH FOR"
            Case 22: U$ = A1$(P1, I1) + " DARTS AHEAD FOR"
            Case 23: U$ = A1$(P1, I1) + " DARTS THROUGH FOR"
            Case 24: U$ = A1$(P1, I1) + " DARTS FOR"
            Case 25: U$ = A1$(P1, I1) + " KNIFES AHEAD FOR"
            Case 26: U$ = A1$(P1, I1) + " KNIFES THROUGH FOR"
            Case 27: U$ = A1$(P1, I1) + " BULLS HIS WAY FOR"
            Case 28: U$ = A1$(P1, I1) + " BULLS AHEAD FOR"
            Case 29: U$ = A1$(P1, I1) + " BULLS THROUGH FOR"
            Case 30: U$ = A1$(P1, I1) + " MUSCLES HIS WAY FOR"
            Case 31: U$ = A1$(P1, I1) + " BLASTS HIS WAY FOR"
            Case 32: U$ = A1$(P1, I1) + " POWERS HIS WAY FOR"
            Case 33: U$ = A1$(P1, I1) + " POWERS AHEAD FOR"
            Case 34: U$ = A1$(P1, I1) + " POWERS THROUGH FOR"
            Case 35: U$ = A1$(P1, I1) + " DIVES AHEAD FOR"
            Case 36: U$ = A1$(P1, I1) + " DIVES OUT FOR"
            Case 37: U$ = A1$(P1, I1) + " DIVES THROUGH FOR"
            Case 38: U$ = A1$(P1, I1) + " CHARGES AHEAD FOR"
            Case 39: U$ = A1$(P1, I1) + " CHARGES HIS WAY FOR"
            Case 40: U$ = A1$(P1, I1) + " CHARGES THROUGH FOR"
            Case 41: U$ = A1$(P1, I1) + " SMASHES HIS WAY FOR"
            Case 42: U$ = A1$(P1, I1) + " SMASHES AHEAD FOR"
            Case 43: U$ = A1$(P1, I1) + " SMASHES THROUGH FOR"
            Case 44: U$ = A1$(P1, I1) + " BOLTS AHEAD FOR"
            Case 45: U$ = A1$(P1, I1) + " BOLTS THROUGH FOR"
            Case 46: U$ = A1$(P1, I1) + " BOLTS FOR"
        End Select

    Else

        RN = Int(Rnd(1) * 23) + 1

        Select Case RN
            Case 1: U$ = A1$(P1, I1) + " GALLOPS AHEAD FOR"
            Case 2: U$ = A1$(P1, I1) + " GALLOPS THROUGH FOR"
            Case 3: U$ = A1$(P1, I1) + " GALLOPS FOR"
            Case 4: U$ = A1$(P1, I1) + " DASHES AHEAD FOR"
            Case 5: U$ = A1$(P1, I1) + " DASHES THROUGH FOR"
            Case 6: U$ = A1$(P1, I1) + " DASHES FOR"
            Case 7: U$ = A1$(P1, I1) + " SCOOTS AHEAD FOR"
            Case 8: U$ = A1$(P1, I1) + " SCOOTS THROUGH FOR"
            Case 9: U$ = A1$(P1, I1) + " SCOOTS OUT FOR"
            Case 10: U$ = A1$(P1, I1) + " DASHES OUT FOR"
            Case 11: U$ = A1$(P1, I1) + " SCAMPERS THROUGH FOR"
            Case 12: U$ = A1$(P1, I1) + " SCAMPERS OUT FOR"
            Case 13: U$ = A1$(P1, I1) + " SCAMPERS FOR"
            Case 14: U$ = A1$(P1, I1) + " SCAMPERS AHEAD FOR"
            Case 15: U$ = A1$(P1, I1) + " SLIPS THROUGH FOR"
            Case 16: U$ = A1$(P1, I1) + " SLIPS OUT FOR"
            Case 17: U$ = A1$(P1, I1) + " SLIPS AHEAD FOR"
            Case 18: U$ = A1$(P1, I1) + " SKIRTS OUTSIDE FOR"
            Case 19: U$ = A1$(P1, I1) + " SKIRTS OUT FOR"
            Case 20: U$ = A1$(P1, I1) + " TURNS THE CORNER FOR"
            Case 21: U$ = A1$(P1, I1) + " TURNS UPFIELD FOR"
            Case 22: U$ = A1$(P1, I1) + " GETS THE CORNER FOR"
            Case 23: U$ = A1$(P1, I1) + " GETS UPFIELD FOR"

        End Select

    End If

End Sub


'----------------------------------------
'            PCPBP Subroutine
'----------------------------------------
'This subroutine builds the play-by-play
'text for a pass completion, along with
'udpating variables for position.
Sub PCPBP ()

    Call QBTHROW

    If FF% = 0 Then

        Select Case P2

            Case 9, 10
                If RY < 3 Then
                    CP = Int(Rnd(1) * 7) - 2
                Else
                    CP = Int(Rnd(1) * 6) + 2
                End If

            Case 13:
                If RY < 3 Then
                    CP = Int(Rnd(1) * 4) - 7
                Else
                    CP = (Int(Rnd(1) * 4) + 1) * -1
                End If

            Case 11, 14, 16, 17, 18:
                If RY < 4 Then
                    CP = Int(Rnd(1) * 5) + 3
                Else
                    If RY = 4 Or RY = 5 Then
                        CP = Int(Rnd(1) * 9) + 6
                    Else
                        CP = Int(Rnd(1) * 9) + 8
                    End If
                End If

            Case 12, 15
                If RY < 3 Then
                    CP = Int(Rnd(1) * 5) + 3
                Else
                    If RY = 3 Or RY = 4 Then
                        CP = Int(Rnd(1) * 10) + 10
                    Else
                        CP = Int(Rnd(1) * 36) + 20
                    End If
                End If
        End Select

    End If

    PC = CP

    If CP > G Then CP = G: IT = 1

    YT = 100 - Y - CP

    Call YARDLINE
    Call MARKER

    If YT <= 0 Then
        U$ = RV$ + " MAKES THE CATCH IN THE END ZONE!!!"
        Call PBP
    Else
        Call d100(RN)

        Select Case P2
            Case 9, 10
                Select Case RN
                    Case 1 To 33
                        U$ = RV$ + " HAS IT OVER THE MIDDLE"
                    Case 34 To 67
                        U$ = RV$ + " CATCHES IT IN THE FLAT"
                    Case 68 To 199
                        U$ = "HE DUMPS IT TO " + RV$
                End Select

            Case 13
                Select Case RN
                    Case 1 To 33
                        U$ = "HE SCREENS IT TO " + RV$
                    Case 34 To 67
                        U$ = "HE DUMPS THE SCREEN TO " + RV$
                    Case 68 To 199
                        U$ = "HE HAS " + RV$ + " ON THE SCREEN PASS"
                End Select

            Case 11, 12, 14, 15
                Select Case RN
                    Case 1 To 33
                        U$ = RV$ + " TAKES IT OVER THE MIDDLE"
                    Case 34 To 67
                        U$ = "HE HAS " + RV$
                    Case 68 To 199
                        U$ = "HE COMPLETES IT TO " + RV$
                End Select

            Case 16
                If RN <= 50 Then
                    U$ = "HE HAS " + RV$ + " NEAR THE SIDELINE"
                Else
                    U$ = "HE FINDS " + RV$
                End If

            Case 17, 18
                Select Case RN
                    Case 1 To 50
                        U$ = "HE HITS " + RV$

                    Case 51 To 90
                        U$ = "HE FIRES IT TO " + RV$

                    Case 91 To 100
                        U$ = RV$ + " MAKES A GREAT CATCH"
                End Select

        End Select

        If FF% <> 0 Then U$ = RV$ + " MAKES A GREAT CATCH"
        U$ = U$ + " AT THE" + Str$(Int(YL)) + " YARD LINE"

        If IT = 1 Then
            IT = 0
            Call PBP
            Call PBP
        Else
            Call PBP
            Call PBP
            SY = 100 - Y - CP
            EY = 100 - Y - G
            Call MOVEBALL
        End If

    End If


End Sub


'----------------------------------------
'          Touchback Subroutine
'----------------------------------------
'This subroutine handles a touchback BY
'update the variables for down, YARDLINE
'Also calls Play-by-Play and sets the
'ball position marker.
Sub Touchback

    Call CHANGEPOSS

    '20 yard line
    Y = 20
    YT = 80

    '1st and 10
    D1 = 1
    Y1 = 10

    U$ = "TOUCHBACK"

    Call PBP
    Call MARKER
    Call YARDLINE

End Sub


'----------------------------------------
'      AddPossessionTime Subroutine
'----------------------------------------
'This subroutine updates the team's time
'of possession for the most recent play.
'The time added is between minSeconds
'and maxSeconds, determined randomly.
Sub AddPossessionTime (minSeconds, maxSeconds)

    secsDelta = maxSeconds - minSeconds
    timeElapsed! = Int(Rnd(1) * secsDelta) + minSeconds
    gameClock! = gameClock! - timeElapsed!
    timePoss(P1) = timePoss(P1) + timeElapsed!

End Sub


'----------------------------------------
'          FumblePBP Subroutine
'----------------------------------------
'This subroutine creates the play-by-play
'text for a fumnle
Sub FumblePBP ()

    RN = Int(Rnd(1) * 6) + 1

    Select Case RN

        Case 1: U$ = "*** FUMBLE ON THE PLAY!! ***"
        Case 2: U$ = "*** LOOSE BALL!! ***"
        Case 3: U$ = "*** BALL IS ON THE GROUND!! ***"
        Case 4: U$ = "*** BALL IS KNOCKED LOOSE!! ***"
        Case 5: U$ = "*** BALL IS STRIPPED!! ***"
        Case 6: U$ = "*** FREE BALL !! ***"

    End Select

    Call PBP

End Sub


'----------------------------------------
'          GoForTwo Subroutine
'----------------------------------------
'This subroutine makes a generic attempt
'to determine if the attempt at 2PC is
'successfull. It also gives Play-by-Play
'text for the attempt.
Sub GoForTwo ()

    If R1 = 1 Then K1(X2, 4) = 20
    If R1 = 2 Then K1(X2, 4) = 30

    U$ = "TRY FOR TWO IS "
    E = 0
    K(P1, 35) = K(P1, 35) + 1

    If G < 2 And G9 = 1 And Y8 = 3 Then
        U$ = U$ + "NO GOOD"
        Call PBP
    Else
        If G < 3 And G9 <> 1 And Y8 <> 3 Then
            U$ = U$ + "NO GOOD"
            Call PBP
        Else
            'If G >= 3 Or G9 = 1 And Y8 = 3 And G >= 2 Then
            U$ = U$ + "GOOD"
            Call PBP

            S(P1, 0) = S(P1, 0) + 2
            S(P1, Q) = S(P1, Q) + 2
            K1(X2, 4) = K1(X2, 4) + 1
            K(P1, 36) = K(P1, 36) + 1

            Call DisplayField

        End If

    End If

End Sub


'----------------------------------------
'           EVENTS Subroutine
'----------------------------------------
'This subroutine works with another to
'look for any events that meet the limits
'for "special". If found, it will create
'a corresponding "special" box score
Sub EVENTS (specialCount, specialStat)

    Dim E%(13)

    If _FileExists("EVENTS.BOX") Then

        Open "EVENTS.BOX" For Input As #1
        For X = 1 To 13
            Input #1, E%(X)
        Next
        Close 1

        checkSpecial% = 0

        If Q > E%(1) Then
            checkSpecial% = 1
        Else

            If S(1, 0) > E%(2) Or S(0, 0) > E%(2) Or S(1, 0) < E%(3) Or S(0, 0) < E%(3) Then
                checkSpecial% = 1
            Else

                For I = 0 To 1

                    For I1 = 0 To 9

                        '--Combine into multiple Or
                        If K2(I, I1, 1) > E%(4) Then
                            checkSpecial% = 1
                        Else
                            If K2(I, I1, 2) > E%(5) Then
                                checkSpecial% = 1
                            Else
                                If K2(I, I1, 4) > E%(6) Then
                                    checkSpecial% = 1
                                Else
                                    If K2(I, I1, 5) > E%(7) Then
                                        checkSpecial% = 1
                                    End If
                                End If
                            End If
                        End If

                        If checkSpecial% = 1 Then Exit For

                    Next

                Next

                If checkSpecial% <> 1 Then

                    For I = 0 To 1

                        For I1 = 0 To 5

                            If K2(I, I1, 7) > E%(6) Then
                                checkSpecial% = 1
                            Else
                                If K2(I, I1, 8) > E%(7) Then
                                    checkSpecial% = 1
                                End If
                            End If

                            If checkSpecial% = 1 Then Exit For

                        Next

                    Next

                End If

                If checkSpecial% <> 1 Then

                    For I = 0 To 1
                        For I1 = 0 To 3
                            If K2(I, I1, 12) > E%(8) Then
                                checkSpecial% = 1
                            Else
                                If K2(I, I1, 13) > E%(9) Then
                                    checkSpecial% = 1
                                End If
                            End If
                        Next
                    Next

                End If

                If checkSpecial% <> 1 Then

                    For I = 0 To 1
                        If K2(I, 3, 17) > E%(10) Then
                            checkSpecial% = 1
                        Else
                            If K2(I, 7, 17) > E%(10) Then
                                checkSpecial% = 1
                            End If
                        End If
                    Next

                End If

            End If

        End If

    End If 'Done checking EVENTS.BOX file

    If checkSpecial% = 1 Then
        Call FoundSpecial(specialCount, specialStat)
    End If

End Sub


'----------------------------------------
'        FoundSpecial Subroutine
'----------------------------------------
'This subroutine simply counts how many
'special boxscore files already exist, so
'that it an assign a unique number to the
'boxscore about to be created.
Sub FoundSpecial (specialCount, specialStat)

    'Beep
    Spec$ = diskPaths$(1) + "*.SPC"
    specialCount = FileCount%(Spec$)
    specialCount = specialCount + 1
    specialStat = 1

End Sub


'----------------------------------------
'          POSTGAME Subroutine
'----------------------------------------
'This subroutine processes everything that
'is necessary after a game is complete.
'It checks for special events, handles a 
'prompt for stats, and saving of stats.
'Records in Football are only calculated
'when stats are compiled.
Sub POSTGAME ()

    Shared scheduleFile$

    'Call CheckRecords
    Call EVENTS(specialCount, specialStat)
    endGame = 1

    Do

        Color 15, 0
        Cls

        Color 14: Print "(0) ";
        Color 15: Print "STATS TO SCREEN"
        Print

        Color 14: Print "(1) ";
        Color 15: Print "STATS TO PRINTER"
        Print

        Color 14: Print "(2) ";
        Color 15: Print "STATS TO TEXT FILE"

        If AP = 1 And J6 = 2 Then
            X = 2
        Else

            Do
                J$ = GetKeyPress$
                X = Val(J$)
            Loop Until X >= 0 And X <= 2

        End If

        Call BOXOPTIONS(X)

        'Reset option for next call
        If X <> 0 Then X = 0

        Color 15, 0
        Cls

        If Not (AP = 1 And J6 = 2) Then

            Do
                'Using Home Team's color for the box
                Call TEAMBOX(1, 1)
                U$ = "DISPLAY STATS AGAIN? (Y/N)"
                Locate 7, (80 - Len(U$)) / 2
                Print U$
                Color 15, 0
                I$ = GetKeyPress$
            Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

        End If

    Loop Until UCase$(I$) = "N" Or (AP = 1 And J6 = 2)

    Call TICKER

    'If we had special events
    If specialStat = 1 Then

        NM$ = "BOX" + Mid$(Str$(specialCount), 2, Len(Str$(specialCount))) + ".SPC"

        'Append special events
        'Call BOX2SPC(NM$)

        Call BOX2FILE(2, NM$)

    End If

    Call SAVESTATS

    endGame = 0
    specialStat = 0

End Sub


'----------------------------------------
'         BOXOPTIONS Subroutine
'----------------------------------------
'This subroutine takes appropriate action
'for the output of the box file, which
'depends on the choice given to it.

' PARAMETER outputChoice
'    represents menu choice
'       0 = Display on screen
'       1 = Send to printer
'       2 = Save to file

'The option to send to printer will first
'create a temporary file, then loop THROUGH
'it to print each line.
Sub BOXOPTIONS (outputChoice)

    Shared scheduleFile$

    Select Case outputChoice

        Case 0
            Call BOX2SCREEN

        Case 1, 2
            If outputChoice = 1 Then
                'Printer = temporary file
                NM$ = "TEMPBOX"
            Else
                'File = prompt | auto-create
                If AP% <> 1 Then
                    Cls
                    Print "ENTER 8-CHARACTER FILENAME FOR BOXSCORE (NO SPACES OR PERIODS)";: Input NM$
                    NM$ = NM$ + ".SPC"
                Else
                    ' NM$ = "BOXSCORE." + MID$(STR$(AP%(0) + AP%(2)), 2, LEN(STR$(AP%(0) + AP%(2))))
                    NM$ = "BOX" + Mid$(Str$(AP%(0) + AP%(2)), 2, Len(Str$(AP%(0) + AP%(2))))
                End If

            End If

            'Includes a special option to send to printer when done
            Call BOX2FILE(outputChoice, NM$)

    End Select

End Sub


'----------------------------------------
'          BOX2FILE Subroutine
'----------------------------------------
'This subroutine formats the boxscore for
'an output file.

' PARAMETER printChoice
'    choice to print file vs. saving it

'The option to send to printer will first
'create a temporary file, then loop THROUGH
'it to print each line.
Sub BOX2FILE (printChoice, NM$)

    Open diskPaths$(1) + NM$ For Append As #1

    If H% = 2 Then
        Print #1, "SITE: NEUTRAL"
    Else
        Print #1, "SITE: "; SITE$
    End If

    Print #1, Using "ATTENDANCE: ###,###"; actualAttendance&
    Print #1,

    Print #1, Tab(20); "Q1 Q2 Q3 Q4 ";
    If Q > 4 Then
        For I1 = 5 To Q
            Print #1, "OT ";
        Next
    End If

    Print #1, "- GAME"

    'Score summary
    For I = 0 To 1

        Print #1, A$(I); Tab(20);
        Print #1, Using "## ## ## ## "; S(I, 1), S(I, 2), S(I, 3), S(I, 4);

        If Q > 4 Then
            For I1 = 5 To Q
                Print #1, Using "## "; S(I, I1);
            Next
        End If

        Print #1, "- ";
        Print #1, Using "###"; S(I, 0)

    Next I

    Print #1,

    If X2 <> 0 Then

        For I = 1 To X2

            Print #1, A$(K1(I, 1)); "-";

            TI = scoreTimes(I)
            TI = TI + TI * (TI < 0)
            IR% = Int(TI / 60)
            J = TI - IR% * 60

            Print #1, Tab(17);

            'Minutes
            Print #1, Using "##"; IR%;
            Print #1, ":";

            'Seconds
            If J >= 10 Then
                Print #1, Using "## "; J;
            Else
                Print #1, Using "0#"; J;
            End If

            Print #1, Tab(23);

            If C(I) = 1 Then Print #1, "OF 1ST -";
            If C(I) = 2 Then Print #1, "OF 2ND -";
            If C(I) = 3 Then Print #1, "OF 3RD -";
            If C(I) = 4 Then Print #1, "OF 4TH -";
            If C(I) > 4 Then Print #1, "OF OT "; C(I) - 4; " -";

            If K1(I, 0) <> 7 Then Print #1, Int(K1(I, 5) + .5);

            skipPAT% = 0

            Select Case K1(I, 0)

                Case 1
                    Print #1, "RUN BY "; A1$(K1(I, 1), K1(I, 2))

                Case 2
                    Print #1, "PASS BY "; A3$(K1(I, 1), K1(I, 2));: Print #1, " TO ";
                    If K1(I, 3) > 9 Then Print #1, A2$(K1(I, 1), K1(I, 3) - 10)
                    If K1(I, 3) <= 9 Then Print #1, A1$(K1(I, 1), K1(I, 3))

                Case 3
                    Print #1, "K.O. RETURN BY "; A4$(K1(I, 1), K1(I, 2))

                Case 4
                    Print #1, "PUNT RETURN BY "; A5$(K1(I, 1), K1(I, 2))

                Case 5
                    Print #1, "INTERCEPTION RETURN BY "; DI$(K1(I, 1), K1(I, 2))

                Case 6
                    Print #1, "BLOCKED KICK RECOVERED IN END ZONE"

                Case 7
                    Print #1, "SAFETY": skipPAT% = 1

                Case 8
                    Print #1, "FG BY "; A7$(K1(I, 1), K1(I, 2)): skipPAT% = 1

                Case 9
                    Print #1, "RUN BY "; A3$(K1(I, 1), K1(I, 2))

                Case 10
                    Print #1, "FUMBLE RETURN "

                Case 11
                    Print #1, "FAKE PUNT", K1(I, 2)

                Case 12
                    Print #1, "2-PT DEFENSE RETURN BY "; DI$(K1(I, 1), K1(I, 2)): skipPAT% = 1

            End Select

            If skipPAT% <> 1 Then
                Print #1, Tab(17);
                If K1(I, 4) = 10 Then Print #1, " (KICK FAILED)"
                If K1(I, 4) = 20 Then Print #1, " (RUN FAILED)"
                If K1(I, 4) = 30 Then Print #1, " (PASS FAILED)"
                If K1(I, 4) = 11 Then Print #1, " (KICK BY "; A7$(K1(I, 1), K1(I, 6));: Print #1, ")"
                If K1(I, 4) = 21 Then Print #1, " (RUN GOOD)"
                If K1(I, 4) = 31 Then Print #1, " (PASS GOOD)"
            End If

        Next I

    End If

    Print #1,
    Print #1,

    Print #1, Tab(27); "TEAM STATISTICS"
    hSpace1 = (15 - Len(A$(0))) / 2
    hSpace2 = (15 - Len(A$(1))) / 2
    Print #1, Tab(10 + hSpace1); A$(0); Tab(45 + hSpace2); A$(1)

    Print #1, Tab(17); K(0, 0); Tab(29); "FIRST DOWNS"; Tab(51); K(1, 0)

    Print #1, Tab(14);
    If G9 = 0 Then
        Print #1, K(0, 1); "-"; Int(K(0, 2) + .5); Tab(29); "RUSHING YDS"; Tab(48); K(1, 1); "-"; Int(K(1, 2) + .5)
    Else
        Print #1, K(0, 1) - W6(0, 0); "-"; Int(K(0, 2) + W6(0, 1) + .5); Tab(29); "RUSHING YDS"; Tab(48); K(1, 1) - W6(1, 0); "-"; Int(K(1, 2) + W6(1, 1) + .5)
    End If

    Print #1, Tab(16); Int(K(0, 6) + .5); Tab(29); "PASSING YDS"; Tab(51); Int(K(1, 6) + .5)

    Print #1, Tab(16); Int(K(0, 6) + .5) + Int(K(0, 2) + .5); Tab(30); "TOTAL YDS"; Tab(51); Int(K(1, 6) + .5) + Int(K(1, 2) + .5)

    Print #1, Tab(13); K(0, 4); "-"; K(0, 3); "-"; K(0, 5); Tab(31); "PASSES"; Tab(47); K(1, 4); "-"; K(1, 3); "-"; K(1, 5)

    If K(0, 7) <> 0 And K(1, 7) <> 0 Then
        Print #1, Tab(15); K(0, 7); "-"; Int((K(0, 8) / K(0, 7)) * 10 + .5) / 10; Tab(32); "PUNTS"; Tab(49); K(1, 7); "-"; Int((K(1, 8) / K(1, 7)) * 10 + .5) / 10
    End If

    Print #1, Tab(15); K(0, 9); "-"; K(0, 10); Tab(31); "FUM/LOST"; Tab(50); K(1, 9); "-"; K(1, 10)

    Print #1, Tab(15); K(0, 11); "-"; Int(K(0, 12) + .5); Tab(31); "PENALTIES"; Tab(50); K(1, 11); "-"; Int(K(1, 12) + .5)

    Print #1, Tab(15); W6(0, 0); "-"; Int(W6(0, 1) + .5); Tab(32); "SACKED"; Tab(50); W6(1, 0); "-"; Int(W6(1, 1) + .5)

    Print #1, Tab(16);
    Print #1, Using "##"; Int(timePoss(0) / 60);
    Print #1, ":";
    Print #1, Using "##"; timePoss(0) - Int(timePoss(0) / 60) * 60;
    Print #1, Tab(26); "TIME OF POSSESSION";
    Print #1, Tab(51);
    Print #1, Using "##"; Int(timePoss(1) / 60);
    Print #1, ":";
    Print #1, Using "##"; timePoss(1) - Int(timePoss(1) / 60) * 60

    Print #1, Tab(15); TE%(0) - TF%(0); "-"; TE%(0); Tab(27); "THIRD DOWN EFF"; Tab(49); TE%(1) - TF%(1); "-"; TE%(1)
    Print #1,
    Print #1,

    Print #1, Tab(17); "RUSHING STATISTICS"
    Call ADDBACKS

    For I = 0 To 1
        Print #1, A$(I); Tab(19); "TC   YDS   AVG   LG   TD"
        For I1 = 0 To 13
            If K2(I, I1, 0) <> 0 Then
                If I1 <= 9 Then Print #1, A1$(I, I1);
                If I1 > 9 Then Print #1, A3$(I, I1 - 10);
                Print #1, Tab(18); Using "###  #### ###.#  "; K2(I, I1, 0), Int(K2(I, I1, 1) + .5), Int(K2(I, I1, 1) + .5) / K2(I, I1, 0);
                If I1 <= 9 Then Print #1, Using "###   ##"; RB(I, I1), K2(I, I1, 2)
                If I1 > 9 Then Print #1, Using "      ##"; K2(I, I1, 2)
            End If
        Next I1
        Print #1,
    Next I

    Print #1, Tab(17); "RECEIVING"

    For I = 0 To 1
        Print #1, A$(I); Tab(19); "TC    YDS    AVG   LG    TD"

        For I1 = 0 To 5
            If K2(I, I1, 6) <> 0 Then
                Print #1, A2$(I, I1); Tab(19);
                Print #1, Using "##    ###   ##.#  ###    ##"; K2(I, I1, 6), Int(K2(I, I1, 7) + .5), Int(K2(I, I1, 7) + .5) / K2(I, I1, 6), WR(I, I1 + 10), K2(I, I1, 8)
            End If
        Next I1

        For I1 = 0 To 9
            If K2(I, I1, 3) <> 0 Then
                Print #1, A1$(I, I1); Tab(19);
                Print #1, Using "##    ###   ##.#  ###    ##"; K2(I, I1, 3), Int(K2(I, I1, 4) + .5), Int(K2(I, I1, 4) + .5) / K2(I, I1, 3), WR(I, I1), K2(I, I1, 5)
            End If
        Next I1

        Print #1,

    Next I

    Print #1, Tab(17); "PASSING"

    For I = 0 To 1

        Print #1, A$(I); Tab(19); "ATT  COM COM %  YDS  Y/A  Y/C  TD  TD%  I    I%  LG"

        For I1 = 0 To 3

            If K2(I, I1, 9) <> 0 Then
                Print #1, A3$(I, I1); Tab(19);
                Print #1, Using "###  ### ###.#  ### ##.# "; K2(I, I1, 9), K2(I, I1, 10), K2(I, I1, 10) / K2(I, I1, 9) * 100, Int(K2(I, I1, 12) + .5), Int(K2(I, I1, 12) + .5) / K2(I, I1, 9);

                If K2(I, I1, 10) <> 0 Then
                    Print #1, Using "##.#  ##"; Int(K2(I, I1, 12) + .5) / K2(I, I1, 10), K2(I, I1, 13);
                Else
                    Print #1, Using "      ##"; K2(I, I1, 13);
                End If

                Print #1, Using "###.# ## ###.# ###"; K2(I, I1, 13) / K2(I, I1, 9) * 100, K2(I, I1, 11), K2(I, I1, 11) / K2(I, I1, 9) * 100, QB(I, I1)
            End If
        Next I1
        Print #1,
    Next I

    Print #1, Tab(17); "KICKOFF RETURNS"

    For I = 0 To 1
        Print #1, A$(I); Tab(19); "KR   YDS   AVG   LG  TD"
        For I1 = 0 To 2
            If K2(I, I1, 14) <> 0 Then
                Print #1, A4$(I, I1); Tab(19);
                Print #1, Using "##  ####  ##.#  ###  ##"; K2(I, I1, 14), Int(K2(I, I1, 15) + .5), Int(K2(I, I1, 15) + .5) / K2(I, I1, 14), KR(I, I1), K2(I, I1, 16)
            End If
        Next I1
        Print #1,
    Next I

    Print #1,
    Print #1, Tab(17); "PUNT RETURNS"

    For I = 0 To 1
        Print #1, A$(I); Tab(19); "PR   YDS   AVG   LG  TD"
        For I1 = 3 To 5
            If K2(I, I1, 14) <> 0 Then
                Print #1, A5$(I, I1 - 3); Tab(19);
                Print #1, Using "##  ####  ##.#  ###  ##"; K2(I, I1, 14), Int(K2(I, I1, 15) + .5), Int(K2(I, I1, 15) + .5) / K2(I, I1, 14), PR(I, I1 - 3), K2(I, I1, 16)
            End If
        Next I1
        Print #1,
    Next I

    Print #1, Tab(17); "PUNTING"

    For I = 0 To 1
        Print #1, A$(I); Tab(19); "PNT   AVG  LG  TB  BLK  20"
        If K(I, 7) <> 0 Then
            Print #1, A6$(I, 0); Tab(19);
            Print #1, Using "###  ##.#  ##  ##   ##  ##  ##  ##.#  ##.#"; K(I, 7), K(I, 8) / K(I, 7), K(I, 26), K(I, 27), K(I, 28), K(I, 29)
        End If
        Print #1,
    Next I

    Print #1, Tab(17); "KICKING"

    For I = 0 To 1
        Print #1, A$(I); Tab(19); "EPM EPA   EP% FGM FGA   FG% LG  0-19 20-29 30-39 40-49  50+"

        If K2(I, 4, 17) <> 0 Or K2(I, 6, 17) <> 0 Then

            Print #1, A7$(I, 0); Tab(19);

            If K2(I, 6, 17) <> 0 Then Print #1, Using "### ### ###.# "; K2(I, 5, 17), K2(I, 6, 17), K2(I, 5, 17) / K2(I, 6, 17) * 100;

            If K2(I, 4, 17) = 0 Then
                Print #1,
            Else
                Print #1, Tab(33); Using "### ### ###.# ##  #"; K2(I, 3, 17), K2(I, 4, 17), K2(I, 3, 17) / K2(I, 4, 17) * 100, FL(I, 0), FM(I, 0, 0);
                Print #1, "- ";: Print #1, Using "#  #"; FA(I, 0, 0); FM(I, 0, 1);
                Print #1, "- ";: Print #1, Using "#  #"; FA(I, 0, 1); FM(I, 0, 2);
                Print #1, "- ";: Print #1, Using "#  #"; FA(I, 0, 2); FM(I, 0, 3);
                Print #1, "- ";: Print #1, Using "#  #"; FA(I, 0, 3); FM(I, 0, 4);
                Print #1, "- ";: Print #1, Using "#"; FA(I, 0, 4)
            End If

        End If

        If K2(I, 8, 17) <> 0 Or K2(I, 10, 17) <> 0 Then
            Print #1, A7$(I, 1); Tab(19);

            If K2(I, 10, 17) <> 0 Then Print #1, Using "### ### ###.# "; K2(I, 9, 17), K2(I, 10, 17), K2(I, 9, 17) / K2(I, 10, 17) * 100;

            If K2(I, 8, 17) = 0 Then
                Print #1,
            Else
                Print #1, Tab(33); Using "### ### ###.# ##  #"; K2(I, 7, 17), K2(I, 8, 17), K2(I, 7, 17) / K2(I, 8, 17) * 100, FL(I, 1), FM(I, 1, 0);
                Print #1, "- ";: Print #1, Using "#  #"; FA(I, 1, 0); FM(I, 1, 1);
                Print #1, "- ";: Print #1, Using "#  #"; FA(I, 1, 1); FM(I, 1, 2);
                Print #1, "- ";: Print #1, Using "#  #"; FA(I, 1, 2); FM(I, 1, 3);
                Print #1, "- ";: Print #1, Using "#  #"; FA(I, 1, 3); FM(I, 1, 4);
                Print #1, "- ";: Print #1, Using "#"; FA(I, 1, 4)
            End If
        End If

        Print #1,
    Next I

    Print #1,
    Print #1, "INTERCEPTIONS"

    For I = 0 To 1:

        Print #1, A$(I); Tab(16);
        Print #1, "IR   YDS   AVG   LG  TD"

        For I1 = 0 To 9
            If SI(I, I1, 0) <> 0 Then
                Print #1, DI$(I, I1); Tab(16);
                Print #1, Using "##  ####  ##.#  ###  ##"; SI(I, I1, 0), Int(SI(I, I1, 1) + .5), Int(SI(I, I1, 1) + .5) / SI(I, I1, 0), IR(I, I1), SI(I, I1, 2)
            End If
        Next I1

        Print #1,

    Next I

    Print #1, "SACKS"

    For I = 0 To 1:
        Print #1, A$(I); Tab(19);
        Print #1, "NO.   YDS LOST"
        For I1 = 0 To 14
            If SK(I, I1, 0) <> 0 Then
                Print #1, DS$(I, I1); Tab(19);
                Print #1, Using " ##       ##"; SK(I, I1, 0), Int(SK(I, I1, 1) + .5)
            End If
        Next I1
        Locate , 1: Print #1,
    Next I

    If printChoice = 1 Then Print #1, Chr$(12)

    Close #1

    If printChoice = 1 Then

        Open diskPaths$(1) + NM$ For Input As #2

        Do
            Line Input #2, X$
            LPrint X$
        Loop While Left$(X$, 1) <> Chr$(12)

        Close #2

        Kill "TEMPBOX"

    End If


End Sub


'----------------------------------------
'           BOX2SPC Subroutine
'----------------------------------------
'This subroutine adds any special event 
'information to a boxscore file
Sub BOX2SPC (NM$)

    Open diskPaths$(1) + NM$ For Append As #2

    Print #2,

    'Output any special events
    Print #2,

    Close #2

End Sub


'----------------------------------------
'         BOX2SCREEN Subroutine
'----------------------------------------
'This subroutine formats the boxscore for
'output to the end user display.
Sub BOX2SCREEN ()

    Cls

    Color 14
    If H% = 2 Then
        Print "SITE: ";
        Color 15
        Print "NEUTRAL"
    Else
        Print "SITE: ";
        Color 15
        Print SITE$
    End If

    Color 14
    Print "ATTENDANCE: ";
    Color 15
    Print Using "###,###"; actualAttendance&
    Print

    Call ScoreSummary

    If Not (AP = 1 And J6 = 2) Then
        I$ = GetKeyPress$
    End If

    Call STATS2SCREEN

End Sub


'----------------------------------------
'        ScoreSummary Subroutine
'----------------------------------------
'This subroutine prints a score by period
'for each team.
Sub ScoreSummary

    Locate 4, 20
    Color 14

    '-- Q has been increased prior to this call
    '-- So Q = 3 represents halftime

    If Q = 3 Then
        Print "Q1 Q2 ";
    Else
        Print "Q1 Q2 Q3 Q4 ";

        If Q = 6 Then
            Print "OT ";
        Else
            If Q > 6 Then
                For X = 5 To Q
                    'OT1, OT2, OT3
                    Print Using "OT# "; (X - 4);
                Next X
            End If
        End If

    End If

    Print "- GAME"

    For I = 0 To 1:

        Color PA%(I, 2), PA%(I, 1)
        Print A$(I);
        Color 15, 0
        Locate , 20

        If Q = 3 Then
            Print Using "## ## "; S(I, 1), S(I, 2);
        Else

            Print Using "## ## ## ## "; S(I, 1), S(I, 2), S(I, 3), S(I, 4);

            If Q > 5 Then
                For I1 = 5 To Q
                    Print Using "## "; S(I, I1);
                Next
            End If

        End If

        Print "- ";

        Print Using "###"; S(I, 0)

    Next I

    Print
    Color 15, 0

    If X2 <> 0 Then

        For I = 1 To X2

            Print A$(K1(I, 1)); "-";

            TI = scoreTimes(I)
            TI = TI + TI * (TI < 0)
            IR% = Int(TI / 60)
            J = TI - IR% * 60

            Locate , 17
            Print Using "##.##"; IR% + J / 100;
            Locate , 19: Print ":";

            Locate , 23

            If C(I) = 1 Then Print "OF 1ST -";
            If C(I) = 2 Then Print "OF 2ND -";
            If C(I) = 3 Then Print "OF 3RD -";
            If C(I) = 4 Then Print "OF 4TH -";
            If C(I) = 5 Then Print "OF OVERTIME -";

            If K1(I, 0) <> 7 Then Print Int(K1(I, 5) + .5);

            skipPAT% = 0

            Select Case K1(I, 0)

                Case 1
                    Print "RUN BY "; A1$(K1(I, 1), K1(I, 2))

                Case 2
                    Print "PASS BY "; A3$(K1(I, 1), K1(I, 2)); " TO ";: If K1(I, 3) > 9 Then Print A2$(K1(I, 1), K1(I, 3) - 10)
                    If K1(I, 3) <= 9 Then Print A1$(K1(I, 1), K1(I, 3))

                Case 3
                    Print "K.O. RETURN BY "; A4$(K1(I, 1), K1(I, 2))

                Case 4
                    Print "PUNT RETURN BY "; A5$(K1(I, 1), K1(I, 2))

                Case 5
                    Print "INTERCEPTION RETURN BY "; DI$(K1(I, 1), K1(I, 2))

                Case 6
                    Print "BLOCKED KICK RECOVERED IN END ZONE"

                Case 7
                    Print "SAFETY": skipPAT% = 1

                Case 8
                    Print "FG BY "; A7$(K1(I, 1), K1(I, 2)): skipPAT% = 1

                Case 9
                    Print "RUN BY "; A3$(K1(I, 1), K1(I, 2))

                Case 10
                    Print "FUMBLE RETURN "

                Case 11
                    Print "FAKE PUNT ", K1(I, 2)

                Case 12
                    Print "2-PT DEFENSE RETURN BY "; DI$(K1(I, 1), K1(I, 2)): skipPAT% = 1

            End Select

            If skipPAT% <> 1 Then
                Locate , 17
                If K1(I, 4) = 10 Then Print " (KICK FAILED)"
                If K1(I, 4) = 20 Then Print " (RUN FAILED)"
                If K1(I, 4) = 30 Then Print " (PASS FAILED)"
                If K1(I, 4) = 11 Then Print " (KICK BY "; A7$(K1(I, 1), K1(I, 6));: Print ")"
                If K1(I, 4) = 21 Then Print " (RUN GOOD)"
                If K1(I, 4) = 31 Then Print " (PASS GOOD)"
            End If

            If I = 10 And K1(11, 0) <> 0 And X = 0 Then Call GetKeyWhenNoDelay: Cls
            If I = 20 And K1(21, 0) <> 0 And X = 0 Then Call GetKeyWhenNoDelay: Cls
            If I = 30 And K1(31, 0) <> 0 And X = 0 Then Call GetKeyWhenNoDelay: Cls
            If I = 40 And K1(41, 0) <> 0 And X = 0 Then Call GetKeyWhenNoDelay: Cls

        Next I

    End If

End Sub


'----------------------------------------
'        STATS2SCREEN Subroutine
'----------------------------------------
'This subroutine formats the game stats
'for output to the end user display
Sub STATS2SCREEN ()

    Color , 1
    Cls

    Call OPTIONBOX(14)

    Locate , 32

    Print "TEAM STATISTICS"

    Locate , 15
    Color PA%(0, 2), PA%(0, 1): Print A$(0);

    Color 0, 7
    Locate , 50
    Color PA%(1, 2), PA%(1, 1): Print A$(1)

    Color 0, 7
    Locate , 20: Print K(0, 0);
    Locate , 34: Print "FIRST DOWNS";
    Locate , 55: Print K(1, 0)

    If G9 = 0 Then
        Locate , 18: Print K(0, 1); "-"; Int(K(0, 2) + .5);
        Locate , 34: Print "RUSHING YDS";
        Locate , 53: Print K(1, 1); "-"; Int(K(1, 2) + .5)
    Else
        Locate , 18: Print K(0, 1) - W6(0, 0); "-"; Int(K(0, 2) + W6(0, 1) + .5);
        Locate , 34: Print "RUSHING YDS";
        Locate , 53: Print K(1, 1) - W6(1, 0); "-"; Int(K(1, 2) + W6(1, 1) + .5)
    End If

    Locate , 20: Print Int(K(0, 6) + .5);
    Locate , 34: Print "PASSING YDS";
    Locate , 55: Print Int(K(1, 6) + .5)

    Locate , 35: Print "TOTAL YDS";
    Locate , 20: Print Int(K(0, 6) + .5) + Int(K(0, 2) + .5);
    Locate , 55: Print Int(K(1, 6) + .5) + Int(K(1, 2) + .5)

    Locate , 37: Print "PASSES";
    Locate , 16: Print K(0, 4); "-"; K(0, 3); "-"; K(0, 5);
    Locate , 51: Print K(1, 4); "-"; K(1, 3); "-"; K(1, 5)

    If K(0, 7) <> 0 And K(1, 7) <> 0 Then
        Locate , 38: Print "PUNTS";
        Locate , 15: Print K(0, 7); "-"; Int((K(0, 8) / K(0, 7)) * 10 + .5) / 10;
        Locate , 50: Print K(1, 7); "-"; Int((K(1, 8) / K(1, 7)) * 10 + .5) / 10
    End If

    Locate , 36: Print "FUM/LOST";
    Locate , 18: Print K(0, 9); "-"; K(0, 10);
    Locate , 53: Print K(1, 9); "-"; K(1, 10)

    Locate , 35: Print "PENALTIES";
    Locate , 18: Print K(0, 11); "-"; Int(K(0, 12) + .5);
    Locate , 53: Print K(1, 11); "-"; Int(K(1, 12) + .5)

    Locate , 37: Print "SACKED";
    Locate , 18: Print W6(0, 0); "-"; Int(W6(0, 1) + .5);
    Locate , 53: Print W6(1, 0); "-"; Int(W6(1, 1) + .5)

    Locate , 18: Print Using "##"; Int(timePoss(0) / 60);: Print ":";: Print Using "##"; timePoss(0) - Int(timePoss(0) / 60) * 60;
    Locate , 31: Print "TIME OF POSSESSION";
    Locate , 53: Print Using "##"; Int(timePoss(1) / 60);: Print ":";: Print Using "##"; timePoss(1) - Int(timePoss(1) / 60) * 60

    Locate , 32: Print "THIRD DOWN EFF";
    Locate , 16: Print TE%(0) - TF%(0); "-"; TE%(0);
    Locate , 51: Print TE%(1) - TF%(1); "-"; TE%(1)

    Call GetKeyWhenNoDelay
    Call FRAMESTATS(22)

    Locate , 32: Print "RUSHING STATISTICS"
    Call ADDBACKS

    For I = 0 To 1

        Locate , 10
        Color PA%(I, 2), PA%(I, 1): Print A$(I);: Color 0, 7
        Locate , 26
        Print "TC   YDS   AVG   LG   TD"

        For I1 = 0 To 13
            If K2(I, I1, 0) <> 0 Then
                Locate , 10
                If I1 <= 9 Then Print A1$(I, I1);
                If I1 > 9 Then Print A3$(I, I1 - 10);

                Locate , 25: Print Using "###  #### ###.#  "; K2(I, I1, 0), Int(K2(I, I1, 1) + .5), Int(K2(I, I1, 1) + .5) / K2(I, I1, 0);
                If I1 <= 9 Then Print Using "###   ##"; RB(I, I1), K2(I, I1, 2)
                If I1 > 9 Then Print Using "      ##"; K2(I, I1, 2)
            End If
        Next I1

        Print

    Next I

    Call GetKeyWhenNoDelay
    Call FRAMESTATS(22)

    Locate , 32: Print "RECEIVING STATISTICS"

    For I = 0 To 1
        Locate , 10
        Color PA%(I, 2), PA%(I, 1): Print A$(I);: Color 0, 7
        Locate , 28: Print "TC    YDS    AVG   LG    TD"

        For I1 = 0 To 5
            If K2(I, I1, 6) <> 0 Then
                Locate , 10
                Print A2$(I, I1);
                Locate , 28: Print Using "##    ###   ##.#  ###    ##"; K2(I, I1, 6), Int(K2(I, I1, 7) + .5), Int(K2(I, I1, 7) + .5) / K2(I, I1, 6), WR(I, I1 + 10), K2(I, I1, 8)
            End If
        Next I1

        For I1 = 0 To 9
            If K2(I, I1, 3) <> 0 Then
                Locate , 10
                Print A1$(I, I1);
                Locate , 28: Print Using "##    ###   ##.#  ###    ##"; K2(I, I1, 3), Int(K2(I, I1, 4) + .5), Int(K2(I, I1, 4) + .5) / K2(I, I1, 3), WR(I, I1), K2(I, I1, 5)
            End If
        Next I1

        Print

    Next I

    Call GetKeyWhenNoDelay
    Call FRAMESTATS(22)

    Locate , 32: Print "PASSING STATISTICS"

    For I = 0 To 1
        Locate , 10
        Color PA%(I, 2), PA%(I, 1): Print A$(I);: Color 0, 7
        Locate , 26: Print "ATT  COM COM %  YDS  Y/A  Y/C  TD  TD%  I    I%  LG"

        For I1 = 0 To 3

            If K2(I, I1, 9) <> 0 Then

                Locate , 10
                Print A3$(I, I1);
                Locate , 26: Print Using "###  ### ###.#  ### ##.# "; K2(I, I1, 9), K2(I, I1, 10), K2(I, I1, 10) / K2(I, I1, 9) * 100, Int(K2(I, I1, 12) + .5), Int(K2(I, I1, 12) + .5) / K2(I, I1, 9);

                If K2(I, I1, 10) <> 0 Then
                    Print Using "##.#  ##"; Int(K2(I, I1, 12) + .5) / K2(I, I1, 10), K2(I, I1, 13);
                Else
                    Print Using "      ##"; K2(I, I1, 13);
                End If

                Print Using "###.# ## ###.# ###"; K2(I, I1, 13) / K2(I, I1, 9) * 100, K2(I, I1, 11), K2(I, I1, 11) / K2(I, I1, 9) * 100, QB(I, I1)

            End If

        Next I1

        Print

    Next I

    Call GetKeyWhenNoDelay
    Call FRAMESTATS(22)

    Locate , 25: Print "KICKOFF RETURN STATISTICS"

    For I = 0 To 1
        Locate , 10
        Color PA%(I, 2), PA%(I, 1): Print A$(I);
        Color 0, 7
        Locate , 26: Print "KR   YDS   AVG   LG  TD"

        For I1 = 0 To 2

            If K2(I, I1, 14) <> 0 Then
                Locate , 10
                Print A4$(I, I1);
                Locate , 26
                Print Using "##  ####  ##.#  ###  ##"; K2(I, I1, 14), Int(K2(I, I1, 15) + .5), Int(K2(I, I1, 15) + .5) / K2(I, I1, 14), KR(I, I1), K2(I, I1, 16)

            End If

        Next I1

        Print
    Next I

    Print
    Locate , 25: Print "PUNT RETURN STATISTICS"

    For I = 0 To 1
        Locate , 10
        Color PA%(I, 2), PA%(I, 1): Print A$(I);
        Color 0, 7
        Locate , 26: Print "PR   YDS   AVG   LG  TD"

        For I1 = 3 To 5
            If K2(I, I1, 14) <> 0 Then
                Locate , 10
                Print A5$(I, I1 - 3);
                Locate , 26
                Print Using "##  ####  ##.#  ###  ##"; K2(I, I1, 14), Int(K2(I, I1, 15) + .5), Int(K2(I, I1, 15) + .5) / K2(I, I1, 14), PR(I, I1 - 3), K2(I, I1, 16)
            End If
        Next I1

        Print
    Next I

    Call GetKeyWhenNoDelay
    Call FRAMESTATS(22)

    Locate , 29: Print "PUNTING STATISTICS"
    Print

    For I = 0 To 1
        Locate , 10
        Color PA%(I, 2), PA%(I, 1)
        Print A$(I);: Color 0, 7
        Locate , 26: Print "PNT   AVG  LG  TB  BLK  20"

        If K(I, 7) <> 0 Then
            Locate , 10
            Print A6$(I, 0);
            Locate , 26
            Print Using "###  ##.#  ##  ##   ##  ##  ##  ##.#  ##.#"; K(I, 7), K(I, 8) / K(I, 7), K(I, 26), K(I, 27), K(I, 28), K(I, 29)
        End If

        Print
    Next I

    Print
    Locate , 29: Print "KICKING STATISTICS": Print

    For I = 0 To 1

        Locate , 2
        Color PA%(I, 2), PA%(I, 1): Print A$(I);: Color 0, 7
        Locate , 18: Print "EPM EPA   EP% FGM FGA   FG% LG  0-19 20-29 30-39 40-49  50+"

        If K2(I, 4, 17) <> 0 Or K2(I, 6, 17) <> 0 Then
            Locate , 2
            Print A7$(I, 0);
            Locate , 18

            If K2(I, 6, 17) <> 0 Then Print Using "### ### ###.# "; K2(I, 5, 17), K2(I, 6, 17), K2(I, 5, 17) / K2(I, 6, 17) * 100;

            If K2(I, 4, 17) = 0 Then
                Print
            Else
                Locate , 32
                Print Using "### ### ###.# ##  #"; K2(I, 3, 17), K2(I, 4, 17), K2(I, 3, 17) / K2(I, 4, 17) * 100, FL(I, 0), FM(I, 0, 0);
                Print "- ";: Print Using "#  #"; FA(I, 0, 0); FM(I, 0, 1);
                Print "- ";: Print Using "#  #"; FA(I, 0, 1); FM(I, 0, 2);
                Print "- ";: Print Using "#  #"; FA(I, 0, 2); FM(I, 0, 3);
                Print "- ";: Print Using "#  #"; FA(I, 0, 3); FM(I, 0, 4);
                Print "- ";: Print Using "#"; FA(I, 0, 4)
            End If

        End If

        If K2(I, 8, 17) <> 0 Or K2(I, 10, 17) <> 0 Then

            Locate , 2
            Print A7$(I, 1);
            Locate , 18

            If K2(I, 10, 17) <> 0 Then Print Using "### ### ###.# "; K2(I, 9, 17), K2(I, 10, 17), K2(I, 9, 17) / K2(I, 10, 17) * 100;

            If K2(I, 8, 17) = 0 Then
                Print
            Else

                Locate , 32
                Print Using "### ### ###.# ##  #"; K2(I, 7, 17), K2(I, 8, 17), K2(I, 7, 17) / K2(I, 8, 17) * 100, FL(I, 1), FM(I, 1, 0);
                Print "- ";: Print Using "#  #"; FA(I, 1, 0); FM(I, 1, 1);
                Print "- ";: Print Using "#  #"; FA(I, 1, 1); FM(I, 1, 2);
                Print "- ";: Print Using "#  #"; FA(I, 1, 2); FM(I, 1, 3);
                Print "- ";: Print Using "#  #"; FA(I, 1, 3); FM(I, 1, 4);
                Print "- ";: Print Using "#"; FA(I, 1, 4)

            End If

        End If

        8594 Print
    Next I

    Call GetKeyWhenNoDelay
    Call FRAMESTATS(22)

    Locate , 35: Print "INTERCEPTIONS"
    Print

    For I = 0 To 1:
        Locate , 19
        Color PA%(I, 2), PA%(I, 1): Print A$(I);
        Color 0, 7
        Locate , 35
        Print "IR   YDS   AVG   LG  TD"

        For I1 = 0 To 9
            If SI(I, I1, 0) <> 0 Then
                Locate , 19: Print DI$(I, I1);
                Locate , 35: Print Using "##  ####  ##.#  ###  ##"; SI(I, I1, 0), Int(SI(I, I1, 1) + .5), Int(SI(I, I1, 1) + .5) / SI(I, I1, 0), IR(I, I1), SI(I, I1, 2)
            End If
        Next I1

        Locate , 1: Print

    Next I

    Call GetKeyWhenNoDelay
    Call FRAMESTATS(22)

    Locate , 39: Print "SACKS"
    Print

    For I = 0 To 1
        Locate , 19
        Color PA%(I, 2), PA%(I, 1): Print A$(I);: Color 0, 7

        Locate , 35
        Print "NO.   YDS LOST"

        For I1 = 0 To 14
            If SK(I, I1, 0) <> 0 Then
                Locate , 19: Print DS$(I, I1);
                Locate , 35: Print Using " ##       ##"; SK(I, I1, 0), Int(SK(I, I1, 1) + .5)
            End If
        Next I1

        Locate , 1
        Print

    Next I

    Call GetKeyWhenNoDelay

End Sub


'----------------------------------------
'          SAVESTATS Subroutine
'----------------------------------------
'This subroutine prompts the user in ORDER
'to determine which teams to save satts For
'(autoplay will always save both teams). 
'It also updates the GAME82 progress file, 
'since at this point only can the game be 
'considered fully complete.
Sub SAVESTATS ()

    Shared scheduleFile$

    Cls

    If AP <> 1 Then

        Do
            Call TEAMBOX(1, 1)
            U$ = "SAVE STATISTICS? (Y/N)"
            Locate , (80 - Len(U$)) / 2
            Print U$
            Color 15, 0

            I$ = GetKeyPress$
        Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

    End If

    If UCase$(I$) = "Y" Or AP = 1 Then

        PX = 0

        Cls

        ' Update schedule, ticker, etc.
        If AP = 1 Then

            Call TickerSchedule

            If AP%(1) < AP%(0) + AP%(2) Then
                Kill "GAME82"
                endAllGames = 1
            Else

                Open "GAME82" For Output As #2

                Print #2, scheduleFile$

                For I = 0 To 2:
                    Print #2, AP%(I)
                Next

                Close 2

            End If

        End If

        Cls

        PN = Q

        For I = 0 To 1
            B$(I) = A$(I)
            Y$(I) = B$(I)
        Next

        For idx = 0 To 1

            skipCompile% = 0

            Color 15, 0
            Cls

            Call FRAMEOPTION(1, idx)

            U$ = "COMPILE STATS FOR " + B$(idx) + "? (Y/N)"
            Locate , (80 - Len(U$)) / 2
            Print U$
            Color 15, 0

            If AP <> 1 Then

                Do
                    I$ = GetKeyPress$
                Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

                If I$ = "N" Then skipCompile% = 1

            End If

            If skipCompile% <> 1 Then

                Call COMPILESTATFILES(idx)

            End If

        Next idx

    End If

End Sub


'----------------------------------------
'      COMPILESTATFILES Subroutine
'----------------------------------------
'This subroutine updates the various stat 
'files for the corresponding team based on 
'the stats generated for a completed game.
Sub COMPILESTATFILES (teamIdx)

    'Determine stat file name
    statFile$ = nameStatFile$(B$(teamIdx))

    'Read existing stats from the file
    If _FileExists(diskPaths$(1) + statFile$) Then

        Open diskPaths$(1) + statFile$ For Input As #2

        Input #2, B$(teamIdx)

        For I = 0 To 9: Input #2, A1$(teamIdx, I): Next
        For I = 0 To 5: Input #2, A2$(teamIdx, I): Next
        For I = 0 To 3: Input #2, A3$(teamIdx, I): Next
        For I = 0 To 2: Input #2, A4$(teamIdx, I): Next
        For I = 0 To 2: Input #2, A5$(teamIdx, I): Next

        Input #2, A6$(teamIdx, 0)

        For I = 0 To 1:
            Input #2, A7$(teamIdx, I)
        Next

        For J = 0 To 13:
            For K = 0 To 17:
                Input #2, Z2(J, K)
            Next
        Next

        For L = 0 To 38:
            Input #2, Z(L)
        Next

        For L = 0 To 38:
            Input #2, Z1(L)
        Next

        For J = 0 To 9
            Input #2, DI$(teamIdx, J)
            For J1 = 0 To 2
                Input #2, GI(teamIdx, J, J1)
            Next
        Next

        For J = 0 To 14
            Input #2, DS$(teamIdx, J)
            For J1 = 0 To 1
                Input #2, GS(teamIdx, J, J1)
            Next
        Next

        For I = 0 To 9: Input #2, LR(teamIdx, I): Input #2, strLR$(teamIdx, I, 0): Input #2, strLR$(teamIdx, I, 1): Next
        For I = 0 To 15: Input #2, LC(teamIdx, I): Input #2, strLC$(teamIdx, I, 0): Input #2, strLC$(teamIdx, I, 1): Next
        For I = 0 To 3: Input #2, LP(teamIdx, I): Input #2, LP$(teamIdx, I, 0): Input #2, LP$(teamIdx, I, 1): Next
        For I = 0 To 2: Input #2, LK(teamIdx, I): Input #2, LK$(teamIdx, I, 0): Input #2, LK$(teamIdx, I, 1): Next
        For I = 0 To 2: Input #2, PK(teamIdx, I): Input #2, PK$(teamIdx, I, 0): Input #2, PK$(teamIdx, I, 1): Next
        For I = 0 To 1: Input #2, LF(teamIdx, I): Input #2, LF$(teamIdx, I): For I1 = 0 To 4: Input #2, AM(teamIdx, I, I1): Input #2, AF(teamIdx, I, I1): Next: Next
        For I = 0 To 9: Input #2, LI(teamIdx, I): Input #2, LI$(teamIdx, I, 0): Input #2, LI$(teamIdx, I, 1): Next

        Close #2

    End If

    For I = 0 To 9
        If RB(teamIdx, I) > LR(teamIdx, I) Then LR(teamIdx, I) = RB(teamIdx, I): strLR$(teamIdx, I, 0) = strRB$(teamIdx, I): strLR$(teamIdx, I, 1) = A$(1 - teamIdx)
        If IR(teamIdx, I) > LI(teamIdx, I) Then LI(teamIdx, I) = IR(teamIdx, I): LI$(teamIdx, I, 0) = strIR$(teamIdx, I): LI$(teamIdx, I, 1) = A$(1 - teamIdx)
    Next

    For I = 0 To 15
        If WR(teamIdx, I) > LC(teamIdx, I) Then LC(teamIdx, I) = WR(teamIdx, I): strLC$(teamIdx, I, 0) = strWR$(teamIdx, I): strLC$(teamIdx, I, 1) = A$(1 - teamIdx)
    Next

    For I = 0 To 3
        If QB(teamIdx, I) > LP(teamIdx, I) Then LP(teamIdx, I) = QB(teamIdx, I): LP$(teamIdx, I, 0) = strQB$(teamIdx, I): LP$(teamIdx, I, 1) = A$(1 - teamIdx)
    Next

    For I = 0 To 2
        If KR(teamIdx, I) > LK(teamIdx, I) Then LK(teamIdx, I) = KR(teamIdx, I): LK$(teamIdx, I, 0) = strKR$(teamIdx, I): LK$(teamIdx, I, 1) = A$(1 - teamIdx)
        If PR(teamIdx, I) > PK(teamIdx, I) Then PK(teamIdx, I) = PR(teamIdx, I): PK$(teamIdx, I, 0) = strPR$(teamIdx, I): PK$(teamIdx, I, 1) = A$(1 - teamIdx)
    Next

    If K(teamIdx, 26) > Z(28) Then Z(28) = K(teamIdx, 26)

    For I = 0 To 1

        If FL(teamIdx, I) > LF(teamIdx, I) Then
            LF(teamIdx, I) = FL(teamIdx, I)
            LF$(teamIdx, 1) = A$(1 - teamIdx)
        End If

        For I1 = 0 To 4
            AM(teamIdx, I, I1) = AM(teamIdx, I, I1) + FM(teamIdx, I, I1)
            AF(teamIdx, I, I1) = AF(teamIdx, I, I1) + FA(teamIdx, I, I1)
        Next

    Next

    For J = 0 To 13
        For K = 0 To 17:
            Z2(J, K) = Z2(J, K) + Int(K2(teamIdx, J, K) + .5)
        Next
    Next

    Z(32) = Z(32) + S(teamIdx, 1)
    Z(33) = Z(33) + S(teamIdx, 2)
    Z(34) = Z(34) + S(teamIdx, 3)
    Z(35) = Z(35) + S(teamIdx, 4)

    For K = 5 To PN
        Z(36) = Z(36) + S(teamIdx, K)
    Next

    Z1(32) = Z1(32) + S(1 - teamIdx, 1)
    Z1(33) = Z1(33) + S(1 - teamIdx, 2)
    Z1(34) = Z1(34) + S(1 - teamIdx, 3)
    Z1(35) = Z1(35) + S(1 - teamIdx, 4)

    For K = 5 To PN
        Z1(36) = Z1(36) + S(1 - teamIdx, K)
    Next

    For J = 0 To 3
        Z(17) = Z(17) + K2(teamIdx, J, 13)
        Z1(17) = Z1(17) + K2(1 - teamIdx, J, 13)
    Next

    For J = 0 To 13
        Z(15) = Z(15) + K2(teamIdx, J, 2)
        Z1(15) = Z1(15) + K2(1 - teamIdx, J, 2)
    Next

    For J = 0 To 2
        Z(18) = Z(18) + K2(teamIdx, J, 16)
        Z1(18) = Z1(18) + K2(1 - teamIdx, J, 16)
        Z(22) = Z(22) + K2(teamIdx, J, 14)
        Z1(22) = Z1(22) + K2(1 - teamIdx, J, 14)
        Z(23) = Z(23) + K2(teamIdx, J, 15)
        Z1(23) = Z1(23) + K2(1 - teamIdx, J, 15)
        Z(19) = Z(19) + K2(teamIdx, J + 3, 16)
        Z1(18) = Z1(19) + K2(1 - teamIdx, J + 3, 16)
        Z(24) = Z(24) + K2(teamIdx, J + 3, 14)
        Z1(24) = Z1(24) + K2(1 - teamIdx, J + 3, 14)
        Z(25) = Z(25) + K2(teamIdx, J + 3, 15)
        Z1(25) = Z1(25) + K2(1 - teamIdx, J + 3, 15)
    Next

    For J = 0 To 9
        Z(20) = Z(20) + SI(teamIdx, J, 2)
        Z1(20) = Z1(20) + SI(1 - teamIdx, J, 2)
        Z(26) = Z(26) + SI(teamIdx, J, 0)
        Z1(26) = Z1(26) + SI(1 - teamIdx, J, 0)
        Z(27) = Z(27) + SI(teamIdx, J, 1)
        Z1(27) = Z1(27) + SI(1 - teamIdx, J, 1)
    Next

    Z(21) = Z(21) + K(teamIdx, 19)
    Z1(21) = Z1(21) + K(1 - teamIdx, 19)
    Z(37) = Z(37) + K(teamIdx, 35)
    Z1(37) = Z1(37) + K(1 - teamIdx, 35)
    Z(38) = Z(38) + K(teamIdx, 36)
    Z1(38) = Z1(38) + K(1 - teamIdx, 36)
    Z(30) = Z(30) + K(teamIdx, 28)
    Z1(30) = Z1(30) + K(1 - teamIdx, 28)
    Z(29) = Z(29) + K(teamIdx, 27)
    Z1(29) = Z1(29) + K(1 - teamIdx, 27)
    Z(31) = Z(31) + K(teamIdx, 29)
    Z1(31) = Z1(31) + K(1 - teamIdx, 29)

    For L = 0 To 12: Z(L) = Z(L) + K(teamIdx, L): Next
    For L = 0 To 12: Z1(L) = Z1(L) + K(1 - teamIdx, L): Next

    Z(13) = Z(13) + W6(teamIdx, 0)
    Z(14) = Z(14) + W6(teamIdx, 1)
    Z1(13) = Z1(13) + W6(1 - teamIdx, 0)
    Z1(14) = Z1(14) + W6(1 - teamIdx, 1)

    For J = 0 To 9
        For J1 = 0 To 2
            GI(teamIdx, J, J1) = GI(teamIdx, J, J1) + SI(teamIdx, J, J1)
        Next
    Next

    For J = 0 To 14
        For J1 = 0 To 1
            GS(teamIdx, J, J1) = GS(teamIdx, J, J1) + SK(teamIdx, J, J1)
        Next
    Next

    Print ">>>>>"
    Print " THE STATS ARE BEING SAVED UNDER"
    Print "THE FOLLOWING NAME::: ";
    Color PA%(teamIdx, 2), PA%(teamIdx, 1): Print statFile$
    Color 15, 0

    Open diskPaths$(1) + statFile$ For Output As #1
    Print #1, Y$(teamIdx)

    For I = 0 To 9: Print #1, A1$(teamIdx, I): Next
    For I = 0 To 5: Print #1, A2$(teamIdx, I): Next
    For I = 0 To 3: Print #1, A3$(teamIdx, I): Next
    For I = 0 To 2: Print #1, A4$(teamIdx, I): Next
    For I = 0 To 2: Print #1, A5$(teamIdx, I): Next

    Print #1, A6$(teamIdx, 0)

    For I = 0 To 1:
        Print #1, A7$(teamIdx, I)
    Next

    For J = 0 To 13
        For K = 0 To 17:
            Print #1, Z2(J, K)
        Next
    Next

    For L = 0 To 38:
        Print #1, Z(L)
    Next

    For L = 0 To 38:
        Print #1, Z1(L)
    Next

    For J = 0 To 9
        Print #1, DI$(teamIdx, J)
        For J1 = 0 To 2
            Print #1, GI(teamIdx, J, J1)
        Next
    Next

    For J = 0 To 14
        Print #1, DS$(teamIdx, J)
        For J1 = 0 To 1
            Print #1, GS(teamIdx, J, J1)
        Next
    Next

    For I = 0 To 9:
        Print #1, LR(teamIdx, I)
        Print #1, strLR$(teamIdx, I, 0)
        Print #1, strLR$(teamIdx, I, 1)
    Next

    For I = 0 To 15:
        Print #1, LC(teamIdx, I)
        Print #1, strLC$(teamIdx, I, 0)
        Print #1, strLC$(teamIdx, I, 1)
    Next

    For I = 0 To 3:
        Print #1, LP(teamIdx, I)
        Print #1, LP$(teamIdx, I, 0)
        Print #1, LP$(teamIdx, I, 1)
    Next

    For I = 0 To 2:
        Print #1, LK(teamIdx, I)
        Print #1, LK$(teamIdx, I, 0)
        Print #1, LK$(teamIdx, I, 1)
    Next

    For I = 0 To 2:
        Print #1, PK(teamIdx, I)
        Print #1, PK$(teamIdx, I, 0)
        Print #1, PK$(teamIdx, I, 1)
    Next

    For I = 0 To 1:
        Print #1, LF(teamIdx, I)
        Print #1, LF$(teamIdx, I)
        For I1 = 0 To 4:
            Print #1, AM(teamIdx, I, I1)
            Print #1, AF(teamIdx, I, I1)
        Next
    Next

    For I = 0 To 9:
        Print #1, LI(teamIdx, I)
        Print #1, LI$(teamIdx, I, 0)
        Print #1, LI$(teamIdx, I, 1)
    Next

    Close #1

    Print "<<<<<"
    Print
    Print

    numberGames = 0

    'Read stats in from file
    If _FileExists(diskPaths$(1) + statFile$ + "S") Then

        Open diskPaths$(1) + statFile$ + "S" For Input As #1

        Input #1, numberGames

        For I = 1 To 120: Input #1, O%(I): Next
        For I = 1 To 120: Input #1, HO$(I): Next
        For I = 1 To 120: Input #1, TeamScore%(I): Next
        For I = 1 To 120: Input #1, H$(I): Next
        For I = 1 To 120: Input #1, intPR%(0, I): Next
        For I = 1 To 120: Input #1, intPR%(1, I): Next
        For I = 1 To 120: Input #1, CRD&(I): Next
        For I = 1 To 120: Input #1, SITE$(I): Next

        Close #1

    End If

    If numberGames < 120 Then numberGames = numberGames + 1
    If H% = teamIdx Then H$(numberGames) = "H"
    If H% <> teamIdx Then H$(numberGames) = "A"
    If H% = 2 Then H$(numberGames) = "X"
    If H% = teamIdx And PN > 4 Then H$(numberGames) = "H-" + Str$(PN - 4) + " OT"
    If H% <> teamIdx And PN > 4 Then H$(numberGames) = "A-" + Str$(PN - 4) + " OT"
    If H% = 2 And PN > 4 Then H$(numberGames) = "X-" + Str$(PN - 4) + " OT"

    O%(numberGames) = S(teamIdx, 0)
    HO$(numberGames) = A$(1 - teamIdx)
    TeamScore%(numberGames) = S(1 - teamIdx, 0)
    CRD&(numberGames) = actualAttendance&
    SITE$(numberGames) = SITE$
    intPR%(0, numberGames) = PA%(teamIdx, 4)
    intPR%(1, numberGames) = PA%(1 - teamIdx, 4)

    'Write stats to new file
    Open diskPaths$(1) + statFile$ + "S" For Output As #1

    Print #1, numberGames%

    For I = 1 To 120: Print #1, O%(I): Next
    For I = 1 To 120: Print #1, HO$(I): Next
    For I = 1 To 120: Print #1, TeamScore%(I): Next
    For I = 1 To 120: Print #1, H$(I): Next
    For I = 1 To 120: Print #1, intPR%(0, I): Next
    For I = 1 To 120: Print #1, intPR%(1, I): Next
    For I = 1 To 120: Print #1, CRD&(I): Next
    For I = 1 To 120: Print #1, SITE$(I): Next

    Close #1

    For I = 1 To 120
        intPR%(0, I) = 0
        intPR%(1, I) = 0
        O%(I) = 0
        TeamScore%(I) = 0
        HO$(I) = ""
        H$(I) = ""
    Next

    For J = 0 To 10:
        For K = 0 To 17
            Z2(J, K) = 0
        Next
    Next

    For L = 0 To 38: Z(L) = 0: Next
    For L = 0 To 38: Z1(L) = 0: Next

End Sub


'----------------------------------------
'      Custom Function
'----------------------------------------
'It's not clear at this time what this
'function does
Function FNP (X)
    FNP = 11 + Int((X + Int(X / 5) - 1) / 2)
End Function


'----------------------------------------
'      GetTeamYear Function
'----------------------------------------
'This subroutine determines the 4-digit 
'team year from the team loaded by the
'file. It uses the 2 digit year to make
'assumptions. (00 to 24 are year 2000.)
'This limit was chosen because all of
'the earliest files with 1900 teams are 
'for NFL / 1925.
Function GetTeamYear% (teamName$)

    teamYear% = Val(teamName$)

    If teamYear% >= 0 And teamYear% <= 24 Then
        GetTeamYear% = 2000 + teamYear%
    Else
        GetTeamYear% = 1900 + teamYear%
    End If

End Function


'----------------------------------------
'            pbplog Function
'----------------------------------------
'This subroutine is designed to help me
'print information about where the game
'is at during the code. The general idea
'was originally to be called everywhere
'there is PBP. This helps me debug where
'issues are happening in a game.
Sub pbplog (lineNumber)

    Print #7, "Called from line "; lineNumber
    Print #7,

End Sub


'----------------------------------------
'       ChooseGameTeam Subroutine
'----------------------------------------
'This subroutine provides interface for 
'choosing a team for the game
Sub ChooseGameTeam (yearNumber$, numberTeams, chosenIdx, teamName$, gameIdx)

    Shared previousYear$

    Do

        Color 15, 0
        Cls

        JJ = 7

        Locate 6, 8
        Color 15, 4

        Print " " + Chr$(214); String$(61, 196); Chr$(183) + " ";

        For II = 1 To JJ
            Locate 6 + II, 8
            Print " " + Chr$(186); String$(61, 32); Chr$(186) + " ";
        Next

        Locate 7 + JJ, 8
        Print " " + Chr$(211); String$(61, 196); Chr$(189) + " ";

        Locate 7, 32

        Locate , 12: Print "ENTER DISK ID: "
        Print
        Locate , 12: Print "THE DISK ID IS USUALLY THE LAST TWO DIGITS OF THE"
        Locate , 12: Print "SEASON DISK YOU ARE PLAYING FROM (IE. 89, 76, 67)."
        Print
        Locate , 12: Print "HIT <ENTER> TO USE PREVIOUS ID"

        I$ = GetKeyPress$

        If I$ <> Chr$(27) Then

            If I$ <> Chr$(13) Then

                Locate 7, 27: Print I$
                Locate 7, 28: Line Input NY$
                NY$ = I$ + NY$
                Color 15, 0

                If Not (NY$ = "" And yearNumber$ <> "") Then

                    yearNumber$ = RTrim$(NY$)
                    Erase teamNames$
                    numberTeams = 0

                    Cls

                    If Not _FileExists(diskPaths$(0) + TEAM_FILE_NAME$ + "." + yearNumber$) Then

                        MsgText$ = "NO TEAM FILES WERE FOUND MATCHING THIS ID. PRESS ANY KEY TO RETURN TO MAIN MENU"
                        BoxWidth = 20
                        BoxHeight = (Len(MsgText$) / BoxWidth) + 3 'top and box lines + 1 extra
                        Locate ((25 - BoxHeight) / 2), (80 - ((BoxWidth + 2) / 2))
                        Call CSMsgBox(MsgText$, BoxWidth, Pass)
                        I$ = GetKeyPress$
                        Call CSMsgBox("", 0, Pass)
                        Exit Sub

                    Else

                        Open diskPaths$(0) + TEAM_FILE_NAME$ + "." + yearNumber$ For Random As #1 Len = TEAM_SIZE_BYTES

                        fileLength& = LOF(1)

                        Field #1, 15 As Q$(0)

                        numberTeams = fileLength& / TEAM_SIZE_BYTES

                        For teamIdx = 1 To numberTeams
                            Get #1, teamIdx
                            'numberTeams = numberTeams + 1
                            teamNames$(teamIdx) = Q$(0)
                            teamIndex%(teamIdx) = teamIdx
                        Next teamIdx

                        Close 1

                        previousYear$ = yearNumber$

                    End If 'Done checking if file exists

                End If 'Done checking for blank year number

            Else

                yearNumber$ = previousYear$

            End If 'Done checking for ENTER key

            'Locate 2, 33
            'Color 31: Print "LOADING..."

            Do

                Call SelectGameTeam(numberTeams, yearNumber$, chosenIdx, teamName$, ExitCode%, gameIdx)

                If ExitCode% <> 27 And numberTeams <> 0 Then

                    Do
                        Locate 2, 33
                        Color PA%(gameIdx, 2), PA%(gameIdx, 1): Print teamName$

                        Color 15, 4
                        Locate 3, 32: Print "ANY CHANGE? (Y/N)";

                        J$ = GetKeyPress$

                    Loop Until J$ = Chr$(27) Or UCase$(J$) = "Y" Or UCase$(J$) = "N"

                End If

            Loop Until ExitCode% = 27 Or J$ = Chr$(27) Or UCase$(J$) = "N"

        End If 'Done checking for ESC

    Loop Until UCase$(J$) = "N" Or I$ = Chr$(27) 'Or J$ = Chr$(27)

    If I$ = Chr$(27) Or J$ = Chr$(27) Then chosenIdx = 0

End Sub


'----------------------------------------
'       SelectGameTeam Subroutine
'----------------------------------------
'This subroutine provides an interface for
'selecting a team from the list loaded by
'the disk ID.
Sub SelectGameTeam (numberTeams, yearNumber$, selectedIdx, teamName$, ExitCode%, gameIdx)

    'Shared teamNames$()

    If numberTeams > 0 Then

        SELECTION% = 1
        Count% = numberTeams
        Start% = 1
        FileFGColr% = 15: FileBGColr% = 4
        HiLiteFGColr% = 0: HiLiteBGColr% = 7
        Rows% = 20
        Columns% = 4
        Spacing% = 6
        Row% = 4
        Column% = 1

        Color , 4
        Cls
        Color 14
        Locate , 33: Print "TEAM SELECTION"
        Locate 25, 1
        Color 14: Print "ESC";: Color 15: Print "-SELECT NEW ID  PGDN  PGUP  ";
        Color 14: Print "ENTER";: Color 15: Print "-SELECTS TEAM";

        _MouseShow "DEFAULT"
        MAMenu teamNames$(), SELECTION%, Start%, Count%, ExitCode%, FileFGColr%, FileBGColr%, HiLiteFGColr%, HiLiteBGColr%, Rows%, Columns%, Spacing%, Row%, Column%
        _MouseHide

        If ExitCode% <> 27 Then

            selectedIdx = teamIndex%(SELECTION%)

            'Locate 2, 33
            'Color 31: Print "LOADING..."

            Call ReadGameTeam(yearNumber$, teamName$, selectedIdx, gameIdx)

        End If

    End If

End Sub


'----------------------------------------
'        ReadGameTeam Subroutine
'----------------------------------------
'This subroutine reads in the data for the
'selected tema into each of the data arrays
'needed by the game.
Sub ReadGameTeam (teamYear$, targetTeam$, teamIdx, gameIdx)

    Open diskPaths$(0) + TEAM_FILE_NAME$ + "." + teamYear$ For Random As #1 Len = TEAM_SIZE_BYTES

    Field #1, 15 As Q$(1), 15 As Q$(2), 2 As Q$(3), 2 As Q$(4), 2 As Q$(5), 2 As Q$(6), 2 As Q$(7), 2 As Q$(8), 2 As Q$(9), 2 As Q$(10), 2 As Q$(11), 2 As Q$(12), 2 As Q$(13), 2 As Q$(14), 2 As Q$(15), 200 As Q$(0), 200 As Q$(199), 200 As Q$, 200 As Q$, 78 As Q$(0)

    Field #1, 56 As Q$(0), 12 As Q$(16), 2 As Q$(17), 2 As Q$(18), 2 As Q$(19), 2 As Q$(20), 12 As Q$(21), 2 As Q$(22), 2 As Q$(23), 2 As Q$(24), 2 As Q$(25), 200 As Q$, 200 As Q$(200), 238 As Q$(201), 200 As Q$

    Field #1, 96 As Q$(0), 12 As Q$(26), 2 As Q$(27), 2 As Q$(28), 2 As Q$(29), 2 As Q$(30), 12 As Q$(31), 2 As Q$(32), 2 As Q$(33), 2 As Q$(34), 2 As Q$(35), 200 As Q$(199), 200 As Q$(200), 198 As Q$(201), 200 As Q$

    Field #1, 136 As Q$(0), 12 As Q$(36), 2 As Q$(37), 2 As Q$(38), 2 As Q$(39), 2 As Q$(40), 12 As Q$(41), 2 As Q$(42), 2 As Q$(43), 2 As Q$(44), 2 As Q$(45), 200 As Q$(199), 200 As Q$(200), 158 As Q$(201), 200 As Q$

    Field #1, 176 As Q$(0), 12 As Q$(46), 2 As Q$(47), 2 As Q$(48), 2 As Q$(49), 2 As Q$(50), 12 As Q$(51), 2 As Q$(52), 2 As Q$(53), 2 As Q$(54), 2 As Q$(55), 200 As Q$(199), 200 As Q$(200), 118 As Q$(201), 200 As Q$

    Field #1, 216 As Q$(0), 12 As Q$(56), 2 As Q$(57), 2 As Q$(58), 2 As Q$(59), 2 As Q$(60), 12 As Q$(61), 2 As Q$(62), 2 As Q$(63), 2 As Q$(64), 2 As Q$(65), 200 As Q$(199), 200 As Q$(200), 78 As Q$(201), 200 As Q$

    Field #1, 200 As Q$(0), 56 As Q$, 12 As Q$(66), 2 As Q$(67), 2 As Q$(68), 12 As Q$(69), 2 As Q$(70), 2 As Q$(71), 12 As Q$(72), 2 As Q$(73), 2 As Q$(74), 200 As Q$(99), 200 As Q$(200), 200 As Q$, 30 As Q$

    Field #1, 200 As Q$(0), 100 As Q$, 4 As Q$(201), 12 As Q$(75), 2 As Q$(76), 2 As Q$(77), 12 As Q$(78), 2 As Q$(79), 2 As Q$(80), 12 As Q$(81), 2 As Q$(82), 2 As Q$(83), 200 As Q$(199), 182 As Q$(200), 200 As Q$

    Field #1, 200 As Q$(0), 152 As Q$(201), 12 As Q$(84), 2 As Q$(85), 2 As Q$(86), 2 As Q$(87), 2 As Q$(88), 12 As Q$(89), 2 As Q$(90), 2 As Q$(91), 2 As Q$(92), 2 As Q$(93), 200 As Q$(199), 200 As Q$(200), 142 As Q$(202)

    Field #1, 200 As Q$(0), 192 As Q$(201), 12 As Q$(94), 2 As Q$(95), 2 As Q$(96), 2 As Q$(97), 2 As Q$(98), 12 As Q$(99), 2 As Q$(100), 2 As Q$(101), 2 As Q$(102), 2 As Q$(103), 200 As Q$(199), 200 As Q$(200), 102 As Q$(202)

    Field #1, 200 As Q$(0), 200 As Q$(199), 32 As Q$(200), 12 As Q$(104), 2 As Q$(105), 2 As Q$(106), 12 As Q$(107), 2 As Q$(108), 2 As Q$(109), 12 As Q$(110), 2 As Q$(111), 2 As Q$(112), 200 As Q$(201), 200 As Q$(202), 54 As Q$(203)

    Field #1, 200 As Q$(0), 200 As Q$(199), 80 As Q$(200), 12 As Q$(113), 2 As Q$(114), 2 As Q$(115), 12 As Q$(116), 2 As Q$(117), 2 As Q$(118), 12 As Q$(119), 2 As Q$(120), 2 As Q$(121), 200 As Q$(201), 200 As Q$(202), 6 As Q$(203)

    Field #1, 200 As Q$, 200 As Q$, 128 As Q$, 12 As Q$(122), 2 As Q$(123), 12 As Q$(124), 2 As Q$(125), 2 As Q$(126), 2 As Q$(127), 2 As Q$(128), 12 As Q$(129), 2 As Q$(130), 2 As Q$(131), 2 As Q$(132), 2 As Q$(133), 2 As Q$(134), 200 As Q$, 150 As Q$

    Field #1, 200 As Q$(0), 200 As Q$(199), 184 As Q$(200), 12 As Q$(135), 2 As Q$(136), 12 As Q$(137), 2 As Q$(138), 12 As Q$(139), 2 As Q$(140), 12 As Q$(141), 2 As Q$(142), 12 As Q$(143), 2 As Q$(144), 200 As Q$(201), 80 As Q$(202)

    Field #1, 200 As Q$(0), 100 As Q$, 200 As Q$(199), 154 As Q$(200), 12 As Q$(145), 2 As Q$(146), 12 As Q$(147), 2 As Q$(148), 12 As Q$(149), 2 As Q$(150), 12 As Q$(151), 2 As Q$(152), 12 As Q$(153), 2 As Q$(154), 200 As Q$(201), 10 As Q$(202)

    Field #1, 200 As Q$(0), 100 As Q$, 200 As Q$(199), 224 As Q$(200), 12 As Q$(155), 2 As Q$(156), 12 As Q$(157), 2 As Q$(158), 12 As Q$(159), 2 As Q$(160), 12 As Q$(161), 2 As Q$(162), 12 As Q$(163), 2 As Q$(164), 140 As Q$(201)

    Field #1, 200 As Q$(0), 200 As Q$, 200 As Q$(199), 194 As Q$(200), 12 As Q$(165), 2 As Q$(166), 12 As Q$(167), 2 As Q$(168), 12 As Q$(169), 2 As Q$(170), 12 As Q$(171), 2 As Q$(172), 12 As Q$(173), 2 As Q$(174), 70 As Q$(201)

    Field #1, 232 As Q$(0), 200 As Q$, 200 As Q$(199), 232 As Q$(200), 12 As Q$(175), 2 As Q$(176), 12 As Q$(177), 2 As Q$(178), 12 As Q$(179), 2 As Q$(180), 12 As Q$(181), 2 As Q$(182), 12 As Q$(183), 2 As Q$(184)

    Get #1, teamIdx

    targetTeam$ = RTrim$(Q$(1))
    AA$(gameIdx) = RTrim$(Q$(2))

    For I1 = 0 To 7
        B6(gameIdx, I1) = CVI(Q$(I1 + 3))
    Next I1

    For I1 = 0 To 4
        PA%(gameIdx, I1) = CVI(Q$(I1 + 11))
    Next I1

    For I1 = 0 To 9
        A1$(gameIdx, I1) = RTrim$(Q$(I1 * 5 + 16))
        A(gameIdx, I1) = CVI(Q$(I1 * 5 + 17))
        A1(gameIdx, I1) = CVI(Q$(I1 * 5 + 18))
        A2(gameIdx, I1) = CVI(Q$(I1 * 5 + 19))
        A3(gameIdx, I1) = CVI(Q$(I1 * 5 + 20))
    Next I1

    For I1 = 0 To 5
        A2$(gameIdx, I1) = RTrim$(Q$(I1 * 3 + 66))
        A4(gameIdx, I1) = CVI(Q$(I1 * 3 + 67))
        A5(gameIdx, I1) = CVI(Q$(I1 * 3 + 68))
    Next I1

    For I1 = 0 To 3
        A3$(gameIdx, I1) = RTrim$(Q$(I1 * 5 + 84))
        A6(gameIdx, I1) = CVI(Q$(I1 * 5 + 85))
        A7(gameIdx, I1) = CVI(Q$(I1 * 5 + 86))
        A8(gameIdx, I1) = CVI(Q$(I1 * 5 + 87))
        QX%(gameIdx, I1) = CVI(Q$(I1 * 5 + 88))
    Next I1

    For I1 = 0 To 2
        A4$(gameIdx, I1) = RTrim$(Q$(I1 * 3 + 104))
        A9(gameIdx, I1) = CVI(Q$(I1 * 3 + 105))
        B(gameIdx, I1) = CVI(Q$(I1 * 3 + 106))
    Next I1

    For I1 = 0 To 2
        A5$(gameIdx, I1) = RTrim$(Q$(I1 * 3 + 113))
        B1(gameIdx, I1) = CVI(Q$(I1 * 3 + 114))
        B2(gameIdx, I1) = CVI(Q$(I1 * 3 + 115))
    Next I1

    A6$(gameIdx, 0) = RTrim$(Q$(122))
    B3(gameIdx, 0) = CVI(Q$(123))
    A7$(gameIdx, 0) = RTrim$(Q$(124))
    B4(gameIdx, 0) = CVI(Q$(125))
    B5(gameIdx, 0) = CVI(Q$(126))
    B7(gameIdx, 0) = CVI(Q$(127))
    B8(gameIdx, 0) = CVI(Q$(128))
    A7$(gameIdx, 1) = Q$(129)
    B4(gameIdx, 1) = CVI(Q$(130))
    B5(gameIdx, 1) = CVI(Q$(131))
    B7(gameIdx, 1) = CVI(Q$(132))
    B8(gameIdx, 1) = CVI(Q$(133))
    YC(gameIdx) = CVI(Q$(134))

    For I1 = 0 To 14
        DS$(gameIdx, I1) = Q$(I1 * 2 + 135)
        DS(gameIdx, I1) = CVI(Q$(I1 * 2 + 136))
    Next I1

    For I1 = 0 To 9
        DI$(gameIdx, I1) = Q$(I1 * 2 + 165)
        DI(gameIdx, I1) = CVI(Q$(I1 * 2 + 166))
    Next I1

    Close #1

    If Left$(AA$(gameIdx), 1) = " " Or AA$(gameIdx) = "" Then AA$(gameIdx) = A$(gameIdx)

    PC%(gameIdx, 0) = A(gameIdx, 0)

    For I1 = 9 To 1 Step -1
        If A(gameIdx, I1) <> 0 Then
            PC%(gameIdx, I1) = A(gameIdx, I1) - A(gameIdx, I1 - 1)
        End If
    Next

    DDS(gameIdx) = 0
    DDI(gameIdx) = 0

    For I1 = 0 To 14
        DDS(gameIdx) = DDS(gameIdx) + DS(gameIdx, I1)
        If DS(gameIdx, 0) > 0 Then intDS%(gameIdx) = 1
    Next I1

    For I1 = 0 To 9
        DDI(gameIdx) = DDI(gameIdx) + DI(gameIdx, I1)
        If DI(gameIdx, 0) > 0 Then intDI%(gameIdx) = 1
    Next I1

End Sub


'----------------------------------------
'      GetKeyWhenNoDelay Subroutine
'----------------------------------------
' ...explanation...
Sub GetKeyWhenNoDelay ()

    'If we're not in autoplay
    If Not (AP = 1 And J6 = 2) Then
        I$ = GetKeyPress$
    End If

End Sub


'----------------------------------------
'          EndOfGame Subroutine
'----------------------------------------
'This subroutine serves as the final portion
'of a post game routine. At this point,
'stats have been saved and we are simply
'looking to determine whether a new game
'should be started.
Sub EndOfGame
    'Close #7
    'Close #5

    Call POSTGAME

    If AP <> 1 Then

        Cls

        'Using Home Team's color for the box
        Call TEAMBOX(1, 1)

        Do
            U$ = "PLAY ANOTHER GAME? (Y/N)"
            Locate 7, (80 - Len(U$)) / 2
            Print U$

            Color 15, 0
            I$ = GetKeyPress$
        Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

    End If

    If UCase$(I$) = "Y" Or (AP = 1 And endAllGames <> 1) Then
        Cls
        Print "PLEASE WAIT ..."
        Call FOOTBALL
    End If

End Sub
